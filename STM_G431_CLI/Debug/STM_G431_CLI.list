
STM_G431_CLI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004828  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08004a08  08004a08  00005a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c28  08004c28  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c28  08004c28  00005c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c30  08004c30  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c30  08004c30  00005c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c34  08004c34  00005c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004c38  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000046c  2000005c  08004c94  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  08004c94  000064c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dec9  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027c6  00000000  00000000  00013f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00016720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ad  00000000  00000000  000172a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e72d  00000000  00000000  00017b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116ae  00000000  00000000  00036282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6c83  00000000  00000000  00047930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fe5b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031d4  00000000  00000000  000fe5f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  001017cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080049f0 	.word	0x080049f0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	080049f0 	.word	0x080049f0

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <apInit>:
#include "ap.h"

static void infoCli(uint8_t argc, const char **argv);

void apInit(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	cliInit(); 	// first init
 80005d4:	f000 f89e 	bl	8000714 <cliInit>
	uartInit();
 80005d8:	f000 fa2e 	bl	8000a38 <uartInit>

	cliAdd("info", infoCli);
 80005dc:	4902      	ldr	r1, [pc, #8]	@ (80005e8 <apInit+0x18>)
 80005de:	4803      	ldr	r0, [pc, #12]	@ (80005ec <apInit+0x1c>)
 80005e0:	f000 f8be 	bl	8000760 <cliAdd>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	08000621 	.word	0x08000621
 80005ec:	08004a08 	.word	0x08004a08

080005f0 <apMain>:

void apMain(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
	uint32_t pre_time;

	pre_time = millis();
 80005f6:	f000 fb4f 	bl	8000c98 <millis>
 80005fa:	6078      	str	r0, [r7, #4]

	while(1)
	{
		if(millis() - pre_time >= 1000)
 80005fc:	f000 fb4c 	bl	8000c98 <millis>
 8000600:	4602      	mov	r2, r0
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800060a:	d305      	bcc.n	8000618 <apMain+0x28>
		{
			pre_time = millis();
 800060c:	f000 fb44 	bl	8000c98 <millis>
 8000610:	6078      	str	r0, [r7, #4]
			ledToggle(_DEF_CH1);
 8000612:	2000      	movs	r0, #0
 8000614:	f000 f9fe 	bl	8000a14 <ledToggle>
			//uartPrintf(_DEF_CH1, "test %f\n", 5);
		}

		cliMain();
 8000618:	f000 f94a 	bl	80008b0 <cliMain>
		if(millis() - pre_time >= 1000)
 800061c:	e7ee      	b.n	80005fc <apMain+0xc>
	...

08000620 <infoCli>:
	}

}

void infoCli(uint8_t argc, const char **argv)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	6039      	str	r1, [r7, #0]
 800062a:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 800062c:	2300      	movs	r3, #0
 800062e:	75fb      	strb	r3, [r7, #23]

	if(argc == 1 && cliIsStr(argv[0], "test"))
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d10d      	bne.n	8000652 <infoCli+0x32>
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	492d      	ldr	r1, [pc, #180]	@ (80006f0 <infoCli+0xd0>)
 800063c:	4618      	mov	r0, r3
 800063e:	f000 f907 	bl	8000850 <cliIsStr>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d004      	beq.n	8000652 <infoCli+0x32>
	{
		cliPrintf("infoCli run test\n");
 8000648:	482a      	ldr	r0, [pc, #168]	@ (80006f4 <infoCli+0xd4>)
 800064a:	f000 f8ed 	bl	8000828 <cliPrintf>
		ret = true;
 800064e:	2301      	movs	r3, #1
 8000650:	75fb      	strb	r3, [r7, #23]
	}

	if(argc == 2 && cliIsStr(argv[0], "print"))
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b02      	cmp	r3, #2
 8000656:	d123      	bne.n	80006a0 <infoCli+0x80>
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4926      	ldr	r1, [pc, #152]	@ (80006f8 <infoCli+0xd8>)
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f8f6 	bl	8000850 <cliIsStr>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d01a      	beq.n	80006a0 <infoCli+0x80>
	{
		uint8_t count;

		count = (uint8_t)cliGetData(argv[1]);
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	3304      	adds	r3, #4
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	f000 f900 	bl	8000876 <cliGetData>
 8000676:	4603      	mov	r3, r0
 8000678:	73fb      	strb	r3, [r7, #15]
		for(int i = 0; i < count; i++)
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
 800067e:	e009      	b.n	8000694 <infoCli+0x74>
		{
			cliPrintf("print %d/%d\n", i+1, count);
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	3301      	adds	r3, #1
 8000684:	7bfa      	ldrb	r2, [r7, #15]
 8000686:	4619      	mov	r1, r3
 8000688:	481c      	ldr	r0, [pc, #112]	@ (80006fc <infoCli+0xdc>)
 800068a:	f000 f8cd 	bl	8000828 <cliPrintf>
		for(int i = 0; i < count; i++)
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	3301      	adds	r3, #1
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	7bfb      	ldrb	r3, [r7, #15]
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	429a      	cmp	r2, r3
 800069a:	dbf1      	blt.n	8000680 <infoCli+0x60>
		}
		ret = true;
 800069c:	2301      	movs	r3, #1
 800069e:	75fb      	strb	r3, [r7, #23]
	}

	if(argc == 1 && cliIsStr(argv[0], "button"))
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d111      	bne.n	80006ca <infoCli+0xaa>
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4915      	ldr	r1, [pc, #84]	@ (8000700 <infoCli+0xe0>)
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 f8cf 	bl	8000850 <cliIsStr>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d008      	beq.n	80006ca <infoCli+0xaa>
	{
		while(cliKeepLoop())
 80006b8:	e002      	b.n	80006c0 <infoCli+0xa0>
		{
			cliPrintf("\n");
 80006ba:	4812      	ldr	r0, [pc, #72]	@ (8000704 <infoCli+0xe4>)
 80006bc:	f000 f8b4 	bl	8000828 <cliPrintf>
		while(cliKeepLoop())
 80006c0:	f000 f8e8 	bl	8000894 <cliKeepLoop>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d1f7      	bne.n	80006ba <infoCli+0x9a>
		}
	}

	if(ret == false)
 80006ca:	7dfb      	ldrb	r3, [r7, #23]
 80006cc:	f083 0301 	eor.w	r3, r3, #1
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d008      	beq.n	80006e8 <infoCli+0xc8>
	{
		cliPrintf("info test\n");
 80006d6:	480c      	ldr	r0, [pc, #48]	@ (8000708 <infoCli+0xe8>)
 80006d8:	f000 f8a6 	bl	8000828 <cliPrintf>
		cliPrintf("info print 0~10\n");
 80006dc:	480b      	ldr	r0, [pc, #44]	@ (800070c <infoCli+0xec>)
 80006de:	f000 f8a3 	bl	8000828 <cliPrintf>
		cliPrintf("info button\n");
 80006e2:	480b      	ldr	r0, [pc, #44]	@ (8000710 <infoCli+0xf0>)
 80006e4:	f000 f8a0 	bl	8000828 <cliPrintf>
	}
}
 80006e8:	bf00      	nop
 80006ea:	3718      	adds	r7, #24
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	08004a10 	.word	0x08004a10
 80006f4:	08004a18 	.word	0x08004a18
 80006f8:	08004a2c 	.word	0x08004a2c
 80006fc:	08004a34 	.word	0x08004a34
 8000700:	08004a44 	.word	0x08004a44
 8000704:	08004a4c 	.word	0x08004a4c
 8000708:	08004a50 	.word	0x08004a50
 800070c:	08004a5c 	.word	0x08004a5c
 8000710:	08004a70 	.word	0x08004a70

08000714 <cliInit>:




bool cliInit(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
	for(int i = 0; i < CLI_CMD_LIST_MAX; i++)
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	e00c      	b.n	800073a <cliInit+0x26>
	{
		cli_cmd_func[i].cmd_func = NULL;
 8000720:	490c      	ldr	r1, [pc, #48]	@ (8000754 <cliInit+0x40>)
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	4613      	mov	r3, r2
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	4413      	add	r3, r2
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	440b      	add	r3, r1
 800072e:	3308      	adds	r3, #8
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < CLI_CMD_LIST_MAX; i++)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3301      	adds	r3, #1
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b07      	cmp	r3, #7
 800073e:	ddef      	ble.n	8000720 <cliInit+0xc>
	}

	cliAdd("help", cliHelp);
 8000740:	4905      	ldr	r1, [pc, #20]	@ (8000758 <cliInit+0x44>)
 8000742:	4806      	ldr	r0, [pc, #24]	@ (800075c <cliInit+0x48>)
 8000744:	f000 f80c 	bl	8000760 <cliAdd>

	return true;
 8000748:	2301      	movs	r3, #1
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000120 	.word	0x20000120
 8000758:	080007c9 	.word	0x080007c9
 800075c:	08004a80 	.word	0x08004a80

08000760 <cliAdd>:

// 명령어 추가 함수
bool cliAdd(const char *cmd_str, void (*cmd_func)(uint8_t argc, const char **argv))
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
	if(cli_cmd_count >= CLI_CMD_LIST_MAX)
 800076a:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <cliAdd+0x60>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b07      	cmp	r3, #7
 8000770:	d901      	bls.n	8000776 <cliAdd+0x16>
		return false;
 8000772:	2300      	movs	r3, #0
 8000774:	e020      	b.n	80007b8 <cliAdd+0x58>

	strncpy(cli_cmd_func[cli_cmd_count].cmd_str, cmd_str, 8);
 8000776:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <cliAdd+0x60>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	461a      	mov	r2, r3
 800077c:	4613      	mov	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	4413      	add	r3, r2
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	4a0f      	ldr	r2, [pc, #60]	@ (80007c4 <cliAdd+0x64>)
 8000786:	4413      	add	r3, r2
 8000788:	2208      	movs	r2, #8
 800078a:	6879      	ldr	r1, [r7, #4]
 800078c:	4618      	mov	r0, r3
 800078e:	f003 fc79 	bl	8004084 <strncpy>
	cli_cmd_func[cli_cmd_count].cmd_func = cmd_func;
 8000792:	4b0b      	ldr	r3, [pc, #44]	@ (80007c0 <cliAdd+0x60>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	4619      	mov	r1, r3
 8000798:	4a0a      	ldr	r2, [pc, #40]	@ (80007c4 <cliAdd+0x64>)
 800079a:	460b      	mov	r3, r1
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	440b      	add	r3, r1
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	4413      	add	r3, r2
 80007a4:	3308      	adds	r3, #8
 80007a6:	683a      	ldr	r2, [r7, #0]
 80007a8:	601a      	str	r2, [r3, #0]
	cli_cmd_count++;
 80007aa:	4b05      	ldr	r3, [pc, #20]	@ (80007c0 <cliAdd+0x60>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	3301      	adds	r3, #1
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b03      	ldr	r3, [pc, #12]	@ (80007c0 <cliAdd+0x60>)
 80007b4:	701a      	strb	r2, [r3, #0]

	return true;
 80007b6:	2301      	movs	r3, #1
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	2000011c 	.word	0x2000011c
 80007c4:	20000120 	.word	0x20000120

080007c8 <cliHelp>:

void cliHelp(uint8_t argc, const char **argv)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	6039      	str	r1, [r7, #0]
 80007d2:	71fb      	strb	r3, [r7, #7]
	cliPrintf("--------------------\n");
 80007d4:	4810      	ldr	r0, [pc, #64]	@ (8000818 <cliHelp+0x50>)
 80007d6:	f000 f827 	bl	8000828 <cliPrintf>

	for(int i = 0; i < cli_cmd_count; i++)
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	e00d      	b.n	80007fc <cliHelp+0x34>
	{
		cliPrintf("%s\n", cli_cmd_func[i].cmd_str);
 80007e0:	68fa      	ldr	r2, [r7, #12]
 80007e2:	4613      	mov	r3, r2
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	4413      	add	r3, r2
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	4a0c      	ldr	r2, [pc, #48]	@ (800081c <cliHelp+0x54>)
 80007ec:	4413      	add	r3, r2
 80007ee:	4619      	mov	r1, r3
 80007f0:	480b      	ldr	r0, [pc, #44]	@ (8000820 <cliHelp+0x58>)
 80007f2:	f000 f819 	bl	8000828 <cliPrintf>
	for(int i = 0; i < cli_cmd_count; i++)
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	3301      	adds	r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <cliHelp+0x5c>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	4293      	cmp	r3, r2
 8000806:	dbeb      	blt.n	80007e0 <cliHelp+0x18>
	}

	cliPrintf("--------------------\n");
 8000808:	4803      	ldr	r0, [pc, #12]	@ (8000818 <cliHelp+0x50>)
 800080a:	f000 f80d 	bl	8000828 <cliPrintf>
}
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	08004a88 	.word	0x08004a88
 800081c:	20000120 	.word	0x20000120
 8000820:	08004aa0 	.word	0x08004aa0
 8000824:	2000011c 	.word	0x2000011c

08000828 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 8000828:	b40f      	push	{r0, r1, r2, r3}
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
	va_list arg;

	va_start(arg, fmt);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	607b      	str	r3, [r7, #4]
	uartVPrintf(cli_ch, fmt, arg);
 8000836:	2300      	movs	r3, #0
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	6939      	ldr	r1, [r7, #16]
 800083c:	4618      	mov	r0, r3
 800083e:	f000 f9ea 	bl	8000c16 <uartVPrintf>
	va_end(arg);
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800084c:	b004      	add	sp, #16
 800084e:	4770      	bx	lr

08000850 <cliIsStr>:

bool cliIsStr(const char *p_arg, const char *p_str)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  if (strcmp(p_arg, p_str) == 0)
 800085a:	6839      	ldr	r1, [r7, #0]
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff fcdf 	bl	8000220 <strcmp>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d101      	bne.n	800086c <cliIsStr+0x1c>
    return true;
 8000868:	2301      	movs	r3, #1
 800086a:	e000      	b.n	800086e <cliIsStr+0x1e>
  else
    return false;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <cliGetData>:

int32_t cliGetData(const char *p_arg)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b084      	sub	sp, #16
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
  int32_t ret;

  ret = (int32_t)strtoul(p_arg, (char **)NULL, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f003 fbb2 	bl	8003fec <strtoul>
 8000888:	60f8      	str	r0, [r7, #12]

  return ret;
 800088a:	68fb      	ldr	r3, [r7, #12]
}
 800088c:	4618      	mov	r0, r3
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  if(uartAvailable(cli_ch) == 0)
 8000898:	2300      	movs	r3, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f000 f900 	bl	8000aa0 <uartAvailable>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d101      	bne.n	80008aa <cliKeepLoop+0x16>
    return true;
 80008a6:	2301      	movs	r3, #1
 80008a8:	e000      	b.n	80008ac <cliKeepLoop+0x18>
  else
    return false;
 80008aa:	2300      	movs	r3, #0
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <cliMain>:

bool cliMain(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
	bool ret = false;
 80008b6:	2300      	movs	r3, #0
 80008b8:	75fb      	strb	r3, [r7, #23]

	if(uartAvailable(cli_ch) > 0)
 80008ba:	2300      	movs	r3, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 f8ef 	bl	8000aa0 <uartAvailable>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	f000 808b 	beq.w	80009e0 <cliMain+0x130>
	{
		uint8_t rx_data;

		rx_data = uartRead(cli_ch);
 80008ca:	2300      	movs	r3, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 f91b 	bl	8000b08 <uartRead>
 80008d2:	4603      	mov	r3, r0
 80008d4:	72fb      	strb	r3, [r7, #11]
		//uartPrintf(_DEF_CH1, "rx data : 0x%02X (%c)\n", rx_data, rx_data);
		if(rx_data == '\r') // enter
 80008d6:	7afb      	ldrb	r3, [r7, #11]
 80008d8:	2b0d      	cmp	r3, #13
 80008da:	d16a      	bne.n	80009b2 <cliMain+0x102>
		{
			cli_buf[cli_buf_index] = 0;
 80008dc:	4b43      	ldr	r3, [pc, #268]	@ (80009ec <cliMain+0x13c>)
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b43      	ldr	r3, [pc, #268]	@ (80009f0 <cliMain+0x140>)
 80008e4:	2100      	movs	r1, #0
 80008e6:	5499      	strb	r1, [r3, r2]
			cli_buf_index = 0;
 80008e8:	4b40      	ldr	r3, [pc, #256]	@ (80009ec <cliMain+0x13c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	801a      	strh	r2, [r3, #0]

			uartPrintf(cli_ch, "\r\n");
 80008ee:	2300      	movs	r3, #0
 80008f0:	4940      	ldr	r1, [pc, #256]	@ (80009f4 <cliMain+0x144>)
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f956 	bl	8000ba4 <uartPrintf>

			// RUN CMD
			char *tok;
			char *str_ptr = cli_buf;
 80008f8:	4b3d      	ldr	r3, [pc, #244]	@ (80009f0 <cliMain+0x140>)
 80008fa:	607b      	str	r3, [r7, #4]

			cli_argc = 0;
 80008fc:	4b3e      	ldr	r3, [pc, #248]	@ (80009f8 <cliMain+0x148>)
 80008fe:	2200      	movs	r2, #0
 8000900:	801a      	strh	r2, [r3, #0]
			while((tok = strtok_r(str_ptr, " ", &str_ptr)) != NULL)
 8000902:	e00c      	b.n	800091e <cliMain+0x6e>
			{
				cli_argv[cli_argc] = tok;
 8000904:	4b3c      	ldr	r3, [pc, #240]	@ (80009f8 <cliMain+0x148>)
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	4a3c      	ldr	r2, [pc, #240]	@ (80009fc <cliMain+0x14c>)
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				cli_argc++;
 8000912:	4b39      	ldr	r3, [pc, #228]	@ (80009f8 <cliMain+0x148>)
 8000914:	881b      	ldrh	r3, [r3, #0]
 8000916:	3301      	adds	r3, #1
 8000918:	b29a      	uxth	r2, r3
 800091a:	4b37      	ldr	r3, [pc, #220]	@ (80009f8 <cliMain+0x148>)
 800091c:	801a      	strh	r2, [r3, #0]
			while((tok = strtok_r(str_ptr, " ", &str_ptr)) != NULL)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	1d3a      	adds	r2, r7, #4
 8000922:	4937      	ldr	r1, [pc, #220]	@ (8000a00 <cliMain+0x150>)
 8000924:	4618      	mov	r0, r3
 8000926:	f003 fbe8 	bl	80040fa <strtok_r>
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d1e8      	bne.n	8000904 <cliMain+0x54>
			}

			for(int i = 0; i < cli_cmd_count; i++)
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	e030      	b.n	800099a <cliMain+0xea>
			{
				if(strcmp(cli_argv[0], cli_cmd_func[i].cmd_str) == 0)
 8000938:	4b30      	ldr	r3, [pc, #192]	@ (80009fc <cliMain+0x14c>)
 800093a:	6818      	ldr	r0, [r3, #0]
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	4613      	mov	r3, r2
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	4413      	add	r3, r2
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	4a2f      	ldr	r2, [pc, #188]	@ (8000a04 <cliMain+0x154>)
 8000948:	4413      	add	r3, r2
 800094a:	4619      	mov	r1, r3
 800094c:	f7ff fc68 	bl	8000220 <strcmp>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d11e      	bne.n	8000994 <cliMain+0xe4>
				{
					if(cli_cmd_func[i].cmd_func != NULL)
 8000956:	492b      	ldr	r1, [pc, #172]	@ (8000a04 <cliMain+0x154>)
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	4613      	mov	r3, r2
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	4413      	add	r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	440b      	add	r3, r1
 8000964:	3308      	adds	r3, #8
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d013      	beq.n	8000994 <cliMain+0xe4>
					{
						cli_cmd_func[i].cmd_func(cli_argc - 1, (const char **)&cli_argv[1]);
 800096c:	4925      	ldr	r1, [pc, #148]	@ (8000a04 <cliMain+0x154>)
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	4613      	mov	r3, r2
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	4413      	add	r3, r2
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	440b      	add	r3, r1
 800097a:	3308      	adds	r3, #8
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a1e      	ldr	r2, [pc, #120]	@ (80009f8 <cliMain+0x148>)
 8000980:	8812      	ldrh	r2, [r2, #0]
 8000982:	b2d2      	uxtb	r2, r2
 8000984:	3a01      	subs	r2, #1
 8000986:	b2d2      	uxtb	r2, r2
 8000988:	491f      	ldr	r1, [pc, #124]	@ (8000a08 <cliMain+0x158>)
 800098a:	4610      	mov	r0, r2
 800098c:	4798      	blx	r3
						ret = true;
 800098e:	2301      	movs	r3, #1
 8000990:	75fb      	strb	r3, [r7, #23]
						break;
 8000992:	e008      	b.n	80009a6 <cliMain+0xf6>
			for(int i = 0; i < cli_cmd_count; i++)
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	3301      	adds	r3, #1
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a0c <cliMain+0x15c>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	461a      	mov	r2, r3
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	4293      	cmp	r3, r2
 80009a4:	dbc8      	blt.n	8000938 <cliMain+0x88>
//				ret = true;
//			}



			uartPrintf(cli_ch, "cli# ");
 80009a6:	2300      	movs	r3, #0
 80009a8:	4919      	ldr	r1, [pc, #100]	@ (8000a10 <cliMain+0x160>)
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 f8fa 	bl	8000ba4 <uartPrintf>
 80009b0:	e016      	b.n	80009e0 <cliMain+0x130>
		}
		else if(cli_buf_index < (128 - 1))
 80009b2:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <cliMain+0x13c>)
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	2b7e      	cmp	r3, #126	@ 0x7e
 80009b8:	d812      	bhi.n	80009e0 <cliMain+0x130>
		{
			cli_buf[cli_buf_index] = rx_data;
 80009ba:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <cliMain+0x13c>)
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	461a      	mov	r2, r3
 80009c0:	7af9      	ldrb	r1, [r7, #11]
 80009c2:	4b0b      	ldr	r3, [pc, #44]	@ (80009f0 <cliMain+0x140>)
 80009c4:	5499      	strb	r1, [r3, r2]
			cli_buf_index++;
 80009c6:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <cliMain+0x13c>)
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	3301      	adds	r3, #1
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	4b07      	ldr	r3, [pc, #28]	@ (80009ec <cliMain+0x13c>)
 80009d0:	801a      	strh	r2, [r3, #0]

			uartWrite(cli_ch, &rx_data, 1);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f107 030b 	add.w	r3, r7, #11
 80009d8:	2201      	movs	r2, #1
 80009da:	4619      	mov	r1, r3
 80009dc:	f000 f83c 	bl	8000a58 <uartWrite>
		}
	}

	return ret;
 80009e0:	7dfb      	ldrb	r3, [r7, #23]

}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200000f8 	.word	0x200000f8
 80009f0:	20000078 	.word	0x20000078
 80009f4:	08004aa4 	.word	0x08004aa4
 80009f8:	200000fa 	.word	0x200000fa
 80009fc:	200000fc 	.word	0x200000fc
 8000a00:	08004aa8 	.word	0x08004aa8
 8000a04:	20000120 	.word	0x20000120
 8000a08:	20000100 	.word	0x20000100
 8000a0c:	2000011c 	.word	0x2000011c
 8000a10:	08004aac 	.word	0x08004aac

08000a14 <ledToggle>:
			break;
	}
}

void ledToggle(uint8_t ch)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
	switch(ch)
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d105      	bne.n	8000a30 <ledToggle+0x1c>
	{
		case _DEF_CH1:
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000a24:	2120      	movs	r1, #32
 8000a26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a2a:	f001 f965 	bl	8001cf8 <HAL_GPIO_TogglePin>
			break;
 8000a2e:	bf00      	nop
	}
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <uartInit>:




bool uartInit(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart1, &q_buf[0], UART_Q_BUF_MAX);
 8000a3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a40:	4903      	ldr	r1, [pc, #12]	@ (8000a50 <uartInit+0x18>)
 8000a42:	4804      	ldr	r0, [pc, #16]	@ (8000a54 <uartInit+0x1c>)
 8000a44:	f002 fa22 	bl	8002e8c <HAL_UART_Receive_DMA>
	//HAL_UART_Receive_DMA(&hlpuart1, &q_buf[0], UART_Q_BUF_MAX);
	return true;
 8000a48:	2301      	movs	r3, #1
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000184 	.word	0x20000184
 8000a54:	20000288 	.word	0x20000288

08000a58 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
 8000a64:	73fb      	strb	r3, [r7, #15]
	uint32_t ret = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef hal_ret;

	switch(ch)
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <uartWrite+0x1c>
 8000a70:	2b01      	cmp	r3, #1
			/*hal_ret = HAL_UART_Transmit(&hlpuart1, p_data, length, 100);
			if(hal_ret == HAL_OK)
			{
				ret = length;
			}*/
			break;
 8000a72:	e00e      	b.n	8000a92 <uartWrite+0x3a>
			hal_ret = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	2364      	movs	r3, #100	@ 0x64
 8000a7a:	68b9      	ldr	r1, [r7, #8]
 8000a7c:	4807      	ldr	r0, [pc, #28]	@ (8000a9c <uartWrite+0x44>)
 8000a7e:	f002 f977 	bl	8002d70 <HAL_UART_Transmit>
 8000a82:	4603      	mov	r3, r0
 8000a84:	74fb      	strb	r3, [r7, #19]
			if(hal_ret == HAL_OK)
 8000a86:	7cfb      	ldrb	r3, [r7, #19]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d101      	bne.n	8000a90 <uartWrite+0x38>
				ret = length;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	617b      	str	r3, [r7, #20]
			break;
 8000a90:	bf00      	nop
	}

	return ret;
 8000a92:	697b      	ldr	r3, [r7, #20]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3718      	adds	r7, #24
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000288 	.word	0x20000288

08000aa0 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
	uint32_t ret = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]

	switch(ch)
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <uartAvailable+0x18>
 8000ab4:	2b01      	cmp	r3, #1
		ret = (UART_Q_BUF_MAX + q_in - q_out) % UART_Q_BUF_MAX;
		break;
	case _DEF_CH2:
		//q_in = (UART_Q_BUF_MAX - hlpuart1.hdmarx->Instance->CNDTR) % UART_Q_BUF_MAX;
		//ret = (UART_Q_BUF_MAX + q_in - q_out) % UART_Q_BUF_MAX;
		break;
 8000ab6:	e01a      	b.n	8000aee <uartAvailable+0x4e>
		q_in = (UART_Q_BUF_MAX - huart1.hdmarx->Instance->CNDTR) % UART_Q_BUF_MAX;
 8000ab8:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <uartAvailable+0x5c>)
 8000aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <uartAvailable+0x60>)
 8000ad0:	801a      	strh	r2, [r3, #0]
		ret = (UART_Q_BUF_MAX + q_in - q_out) % UART_Q_BUF_MAX;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <uartAvailable+0x60>)
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000ada:	4a0a      	ldr	r2, [pc, #40]	@ (8000b04 <uartAvailable+0x64>)
 8000adc:	8812      	ldrh	r2, [r2, #0]
 8000ade:	1a9b      	subs	r3, r3, r2
 8000ae0:	425a      	negs	r2, r3
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	b2d2      	uxtb	r2, r2
 8000ae6:	bf58      	it	pl
 8000ae8:	4253      	negpl	r3, r2
 8000aea:	60fb      	str	r3, [r7, #12]
		break;
 8000aec:	bf00      	nop
	}

	return ret;
 8000aee:	68fb      	ldr	r3, [r7, #12]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	20000288 	.word	0x20000288
 8000b00:	20000180 	.word	0x20000180
 8000b04:	20000182 	.word	0x20000182

08000b08 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
	uint8_t ret = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	73fb      	strb	r3, [r7, #15]

	switch(ch)
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d002      	beq.n	8000b22 <uartRead+0x1a>
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d018      	beq.n	8000b52 <uartRead+0x4a>
 8000b20:	e032      	b.n	8000b88 <uartRead+0x80>
	{
	case _DEF_CH1:
		if(q_out != q_in)
 8000b22:	4b1d      	ldr	r3, [pc, #116]	@ (8000b98 <uartRead+0x90>)
 8000b24:	881a      	ldrh	r2, [r3, #0]
 8000b26:	4b1d      	ldr	r3, [pc, #116]	@ (8000b9c <uartRead+0x94>)
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d029      	beq.n	8000b82 <uartRead+0x7a>
		{
			ret = q_buf[q_out];
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b98 <uartRead+0x90>)
 8000b30:	881b      	ldrh	r3, [r3, #0]
 8000b32:	461a      	mov	r2, r3
 8000b34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba0 <uartRead+0x98>)
 8000b36:	5c9b      	ldrb	r3, [r3, r2]
 8000b38:	73fb      	strb	r3, [r7, #15]
			q_out = (q_out + 1) % UART_Q_BUF_MAX;
 8000b3a:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <uartRead+0x90>)
 8000b3c:	881b      	ldrh	r3, [r3, #0]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	425a      	negs	r2, r3
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	bf58      	it	pl
 8000b48:	4253      	negpl	r3, r2
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <uartRead+0x90>)
 8000b4e:	801a      	strh	r2, [r3, #0]
		}
		break;
 8000b50:	e017      	b.n	8000b82 <uartRead+0x7a>
	case _DEF_CH2:
		if(q_out != q_in)
 8000b52:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <uartRead+0x90>)
 8000b54:	881a      	ldrh	r2, [r3, #0]
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <uartRead+0x94>)
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d013      	beq.n	8000b86 <uartRead+0x7e>
		{
			ret = q_buf[q_out];
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <uartRead+0x90>)
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <uartRead+0x98>)
 8000b66:	5c9b      	ldrb	r3, [r3, r2]
 8000b68:	73fb      	strb	r3, [r7, #15]
			q_out = (q_out + 1) % UART_Q_BUF_MAX;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b98 <uartRead+0x90>)
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	425a      	negs	r2, r3
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	b2d2      	uxtb	r2, r2
 8000b76:	bf58      	it	pl
 8000b78:	4253      	negpl	r3, r2
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <uartRead+0x90>)
 8000b7e:	801a      	strh	r2, [r3, #0]
		}
		break;
 8000b80:	e001      	b.n	8000b86 <uartRead+0x7e>
		break;
 8000b82:	bf00      	nop
 8000b84:	e000      	b.n	8000b88 <uartRead+0x80>
		break;
 8000b86:	bf00      	nop
	}

	return ret;
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000182 	.word	0x20000182
 8000b9c:	20000180 	.word	0x20000180
 8000ba0:	20000184 	.word	0x20000184

08000ba4 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 8000ba4:	b40e      	push	{r1, r2, r3}
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b0c7      	sub	sp, #284	@ 0x11c
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	4602      	mov	r2, r0
 8000bae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000bb2:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8000bb6:	701a      	strb	r2, [r3, #0]
	uint32_t ret = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	va_list arg;
	char print_buf[256];

	va_start(arg, fmt);
 8000bbe:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000bc2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	int len;
	len = vsnprintf(print_buf, 256, fmt, arg);
 8000bc6:	f107 000c 	add.w	r0, r7, #12
 8000bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000bce:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000bd2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bd6:	f003 fa3f 	bl	8004058 <vsniprintf>
 8000bda:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

	va_end(arg);

	if(len > 0)
 8000bde:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	dd0d      	ble.n	8000c02 <uartPrintf+0x5e>
	{
		ret = uartWrite(ch, (uint8_t *)print_buf, len);
 8000be6:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000bea:	f107 010c 	add.w	r1, r7, #12
 8000bee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000bf2:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff2d 	bl	8000a58 <uartWrite>
 8000bfe:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
	}

	return ret;
 8000c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c12:	b003      	add	sp, #12
 8000c14:	4770      	bx	lr

08000c16 <uartVPrintf>:

uint32_t uartVPrintf(uint8_t ch, const char *fmt, va_list arg)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b0c6      	sub	sp, #280	@ 0x118
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c20:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000c24:	6019      	str	r1, [r3, #0]
 8000c26:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c2a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c34:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000c38:	4602      	mov	r2, r0
 8000c3a:	701a      	strb	r2, [r3, #0]
	uint32_t ret = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	char print_buf[256];

	int len;
	len = vsnprintf(print_buf, 256, fmt, arg);
 8000c42:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c46:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000c4a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000c4e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000c52:	f107 0010 	add.w	r0, r7, #16
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	6812      	ldr	r2, [r2, #0]
 8000c5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c5e:	f003 f9fb 	bl	8004058 <vsniprintf>
 8000c62:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110


	if(len > 0)
 8000c66:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	dd0d      	ble.n	8000c8a <uartVPrintf+0x74>
	{
		ret = uartWrite(ch, (uint8_t *)print_buf, len);
 8000c6e:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000c72:	f107 0110 	add.w	r1, r7, #16
 8000c76:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c7a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fee9 	bl	8000a58 <uartWrite>
 8000c86:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
	}

	return ret;
 8000c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <millis>:
{
	HAL_Delay(time_ms);
}

uint32_t millis(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000c9c:	f000 fae2 	bl	8001264 <HAL_GetTick>
 8000ca0:	4603      	mov	r3, r0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000cae:	4b12      	ldr	r3, [pc, #72]	@ (8000cf8 <MX_DMA_Init+0x50>)
 8000cb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cb2:	4a11      	ldr	r2, [pc, #68]	@ (8000cf8 <MX_DMA_Init+0x50>)
 8000cb4:	f043 0304 	orr.w	r3, r3, #4
 8000cb8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000cba:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf8 <MX_DMA_Init+0x50>)
 8000cbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cbe:	f003 0304 	and.w	r3, r3, #4
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <MX_DMA_Init+0x50>)
 8000cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cca:	4a0b      	ldr	r2, [pc, #44]	@ (8000cf8 <MX_DMA_Init+0x50>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000cd2:	4b09      	ldr	r3, [pc, #36]	@ (8000cf8 <MX_DMA_Init+0x50>)
 8000cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	200b      	movs	r0, #11
 8000ce4:	f000 fbc7 	bl	8001476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ce8:	200b      	movs	r0, #11
 8000cea:	f000 fbde 	bl	80014aa <HAL_NVIC_EnableIRQ>

}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40021000 	.word	0x40021000

08000cfc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d02:	f107 030c 	add.w	r3, r7, #12
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	4b19      	ldr	r3, [pc, #100]	@ (8000d78 <MX_GPIO_Init+0x7c>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d16:	4a18      	ldr	r2, [pc, #96]	@ (8000d78 <MX_GPIO_Init+0x7c>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d1e:	4b16      	ldr	r3, [pc, #88]	@ (8000d78 <MX_GPIO_Init+0x7c>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2a:	4b13      	ldr	r3, [pc, #76]	@ (8000d78 <MX_GPIO_Init+0x7c>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2e:	4a12      	ldr	r2, [pc, #72]	@ (8000d78 <MX_GPIO_Init+0x7c>)
 8000d30:	f043 0304 	orr.w	r3, r3, #4
 8000d34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d36:	4b10      	ldr	r3, [pc, #64]	@ (8000d78 <MX_GPIO_Init+0x7c>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3a:	f003 0304 	and.w	r3, r3, #4
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8000d48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d4c:	f000 ffbc 	bl	8001cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Pin|SPI1_CS_Pin;
 8000d50:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8000d54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 030c 	add.w	r3, r7, #12
 8000d66:	4619      	mov	r1, r3
 8000d68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d6c:	f000 fe2a 	bl	80019c4 <HAL_GPIO_Init>

}
 8000d70:	bf00      	nop
 8000d72:	3720      	adds	r7, #32
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40021000 	.word	0x40021000

08000d7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d80:	f000 fa0b 	bl	800119a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d84:	f000 f815 	bl	8000db2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d88:	f7ff ffb8 	bl	8000cfc <MX_GPIO_Init>
  MX_DMA_Init();
 8000d8c:	f7ff ff8c 	bl	8000ca8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000d90:	f000 f908 	bl	8000fa4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  apInit();
 8000d94:	f7ff fc1c 	bl	80005d0 <apInit>
  apMain();
 8000d98:	f7ff fc2a 	bl	80005f0 <apMain>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000d9c:	2120      	movs	r1, #32
 8000d9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da2:	f000 ffa9 	bl	8001cf8 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000da6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000daa:	f000 fa67 	bl	800127c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000dae:	bf00      	nop
 8000db0:	e7f4      	b.n	8000d9c <main+0x20>

08000db2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b094      	sub	sp, #80	@ 0x50
 8000db6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db8:	f107 0318 	add.w	r3, r7, #24
 8000dbc:	2238      	movs	r2, #56	@ 0x38
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f003 f957 	bl	8004074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000dd8:	f000 ffa8 	bl	8001d2c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000de4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000de6:	2340      	movs	r3, #64	@ 0x40
 8000de8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dea:	2302      	movs	r3, #2
 8000dec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dee:	2302      	movs	r3, #2
 8000df0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000df2:	2301      	movs	r3, #1
 8000df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000df6:	2309      	movs	r3, #9
 8000df8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e02:	2302      	movs	r3, #2
 8000e04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e06:	f107 0318 	add.w	r3, r7, #24
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f001 f842 	bl	8001e94 <HAL_RCC_OscConfig>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000e16:	f000 f818 	bl	8000e4a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1a:	230f      	movs	r3, #15
 8000e1c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2102      	movs	r1, #2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 fb40 	bl	80024b8 <HAL_RCC_ClockConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e3e:	f000 f804 	bl	8000e4a <Error_Handler>
  }
}
 8000e42:	bf00      	nop
 8000e44:	3750      	adds	r7, #80	@ 0x50
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e4e:	b672      	cpsid	i
}
 8000e50:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e52:	bf00      	nop
 8000e54:	e7fd      	b.n	8000e52 <Error_Handler+0x8>
	...

08000e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e9c <HAL_MspInit+0x44>)
 8000e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e62:	4a0e      	ldr	r2, [pc, #56]	@ (8000e9c <HAL_MspInit+0x44>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e9c <HAL_MspInit+0x44>)
 8000e6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e76:	4b09      	ldr	r3, [pc, #36]	@ (8000e9c <HAL_MspInit+0x44>)
 8000e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e7a:	4a08      	ldr	r2, [pc, #32]	@ (8000e9c <HAL_MspInit+0x44>)
 8000e7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e80:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e82:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <HAL_MspInit+0x44>)
 8000e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e8e:	f000 fff1 	bl	8001e74 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <NMI_Handler+0x4>

08000ea8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <HardFault_Handler+0x4>

08000eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <MemManage_Handler+0x4>

08000eb8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef6:	f000 f9a3 	bl	8001240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f04:	4802      	ldr	r0, [pc, #8]	@ (8000f10 <DMA1_Channel1_IRQHandler+0x10>)
 8000f06:	f000 fc0e 	bl	8001726 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2000031c 	.word	0x2000031c

08000f14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f1c:	4a14      	ldr	r2, [pc, #80]	@ (8000f70 <_sbrk+0x5c>)
 8000f1e:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <_sbrk+0x60>)
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f28:	4b13      	ldr	r3, [pc, #76]	@ (8000f78 <_sbrk+0x64>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d102      	bne.n	8000f36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f30:	4b11      	ldr	r3, [pc, #68]	@ (8000f78 <_sbrk+0x64>)
 8000f32:	4a12      	ldr	r2, [pc, #72]	@ (8000f7c <_sbrk+0x68>)
 8000f34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f36:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <_sbrk+0x64>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d207      	bcs.n	8000f54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f44:	f003 f8dc 	bl	8004100 <__errno>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f52:	e009      	b.n	8000f68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f54:	4b08      	ldr	r3, [pc, #32]	@ (8000f78 <_sbrk+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5a:	4b07      	ldr	r3, [pc, #28]	@ (8000f78 <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	4a05      	ldr	r2, [pc, #20]	@ (8000f78 <_sbrk+0x64>)
 8000f64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f66:	68fb      	ldr	r3, [r7, #12]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20008000 	.word	0x20008000
 8000f74:	00000400 	.word	0x00000400
 8000f78:	20000284 	.word	0x20000284
 8000f7c:	200004c8 	.word	0x200004c8

08000f80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <SystemInit+0x20>)
 8000f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f8a:	4a05      	ldr	r2, [pc, #20]	@ (8000fa0 <SystemInit+0x20>)
 8000f8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fa8:	4b22      	ldr	r3, [pc, #136]	@ (8001034 <MX_USART1_UART_Init+0x90>)
 8000faa:	4a23      	ldr	r2, [pc, #140]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fae:	4b21      	ldr	r3, [pc, #132]	@ (8001034 <MX_USART1_UART_Init+0x90>)
 8000fb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8001034 <MX_USART1_UART_Init+0x90>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001034 <MX_USART1_UART_Init+0x90>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001034 <MX_USART1_UART_Init+0x90>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001034 <MX_USART1_UART_Init+0x90>)
 8000fca:	220c      	movs	r2, #12
 8000fcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fce:	4b19      	ldr	r3, [pc, #100]	@ (8001034 <MX_USART1_UART_Init+0x90>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd4:	4b17      	ldr	r3, [pc, #92]	@ (8001034 <MX_USART1_UART_Init+0x90>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fda:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <MX_USART1_UART_Init+0x90>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <MX_USART1_UART_Init+0x90>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe6:	4b13      	ldr	r3, [pc, #76]	@ (8001034 <MX_USART1_UART_Init+0x90>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fec:	4811      	ldr	r0, [pc, #68]	@ (8001034 <MX_USART1_UART_Init+0x90>)
 8000fee:	f001 fe6f 	bl	8002cd0 <HAL_UART_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ff8:	f7ff ff27 	bl	8000e4a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	480d      	ldr	r0, [pc, #52]	@ (8001034 <MX_USART1_UART_Init+0x90>)
 8001000:	f002 febb 	bl	8003d7a <HAL_UARTEx_SetTxFifoThreshold>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800100a:	f7ff ff1e 	bl	8000e4a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800100e:	2100      	movs	r1, #0
 8001010:	4808      	ldr	r0, [pc, #32]	@ (8001034 <MX_USART1_UART_Init+0x90>)
 8001012:	f002 fef0 	bl	8003df6 <HAL_UARTEx_SetRxFifoThreshold>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800101c:	f7ff ff15 	bl	8000e4a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001020:	4804      	ldr	r0, [pc, #16]	@ (8001034 <MX_USART1_UART_Init+0x90>)
 8001022:	f002 fe71 	bl	8003d08 <HAL_UARTEx_DisableFifoMode>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800102c:	f7ff ff0d 	bl	8000e4a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000288 	.word	0x20000288
 8001038:	40013800 	.word	0x40013800

0800103c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b09a      	sub	sp, #104	@ 0x68
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001054:	f107 0310 	add.w	r3, r7, #16
 8001058:	2244      	movs	r2, #68	@ 0x44
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f003 f809 	bl	8004074 <memset>
  if(uartHandle->Instance==USART1)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a33      	ldr	r2, [pc, #204]	@ (8001134 <HAL_UART_MspInit+0xf8>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d15f      	bne.n	800112c <HAL_UART_MspInit+0xf0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800106c:	2301      	movs	r3, #1
 800106e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	4618      	mov	r0, r3
 800107a:	f001 fc39 	bl	80028f0 <HAL_RCCEx_PeriphCLKConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001084:	f7ff fee1 	bl	8000e4a <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001088:	4b2b      	ldr	r3, [pc, #172]	@ (8001138 <HAL_UART_MspInit+0xfc>)
 800108a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800108c:	4a2a      	ldr	r2, [pc, #168]	@ (8001138 <HAL_UART_MspInit+0xfc>)
 800108e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001092:	6613      	str	r3, [r2, #96]	@ 0x60
 8001094:	4b28      	ldr	r3, [pc, #160]	@ (8001138 <HAL_UART_MspInit+0xfc>)
 8001096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001098:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a0:	4b25      	ldr	r3, [pc, #148]	@ (8001138 <HAL_UART_MspInit+0xfc>)
 80010a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a4:	4a24      	ldr	r2, [pc, #144]	@ (8001138 <HAL_UART_MspInit+0xfc>)
 80010a6:	f043 0304 	orr.w	r3, r3, #4
 80010aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ac:	4b22      	ldr	r3, [pc, #136]	@ (8001138 <HAL_UART_MspInit+0xfc>)
 80010ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80010b8:	2330      	movs	r3, #48	@ 0x30
 80010ba:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010c8:	2307      	movs	r3, #7
 80010ca:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010d0:	4619      	mov	r1, r3
 80010d2:	481a      	ldr	r0, [pc, #104]	@ (800113c <HAL_UART_MspInit+0x100>)
 80010d4:	f000 fc76 	bl	80019c4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80010d8:	4b19      	ldr	r3, [pc, #100]	@ (8001140 <HAL_UART_MspInit+0x104>)
 80010da:	4a1a      	ldr	r2, [pc, #104]	@ (8001144 <HAL_UART_MspInit+0x108>)
 80010dc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80010de:	4b18      	ldr	r3, [pc, #96]	@ (8001140 <HAL_UART_MspInit+0x104>)
 80010e0:	2218      	movs	r2, #24
 80010e2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010e4:	4b16      	ldr	r3, [pc, #88]	@ (8001140 <HAL_UART_MspInit+0x104>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ea:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <HAL_UART_MspInit+0x104>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010f0:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <HAL_UART_MspInit+0x104>)
 80010f2:	2280      	movs	r2, #128	@ 0x80
 80010f4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010f6:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <HAL_UART_MspInit+0x104>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010fc:	4b10      	ldr	r3, [pc, #64]	@ (8001140 <HAL_UART_MspInit+0x104>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001102:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <HAL_UART_MspInit+0x104>)
 8001104:	2220      	movs	r2, #32
 8001106:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001108:	4b0d      	ldr	r3, [pc, #52]	@ (8001140 <HAL_UART_MspInit+0x104>)
 800110a:	2200      	movs	r2, #0
 800110c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800110e:	480c      	ldr	r0, [pc, #48]	@ (8001140 <HAL_UART_MspInit+0x104>)
 8001110:	f000 f9e6 	bl	80014e0 <HAL_DMA_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 800111a:	f7ff fe96 	bl	8000e4a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a07      	ldr	r2, [pc, #28]	@ (8001140 <HAL_UART_MspInit+0x104>)
 8001122:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001126:	4a06      	ldr	r2, [pc, #24]	@ (8001140 <HAL_UART_MspInit+0x104>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800112c:	bf00      	nop
 800112e:	3768      	adds	r7, #104	@ 0x68
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40013800 	.word	0x40013800
 8001138:	40021000 	.word	0x40021000
 800113c:	48000800 	.word	0x48000800
 8001140:	2000031c 	.word	0x2000031c
 8001144:	40020008 	.word	0x40020008

08001148 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001148:	480d      	ldr	r0, [pc, #52]	@ (8001180 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800114a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800114c:	f7ff ff18 	bl	8000f80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001150:	480c      	ldr	r0, [pc, #48]	@ (8001184 <LoopForever+0x6>)
  ldr r1, =_edata
 8001152:	490d      	ldr	r1, [pc, #52]	@ (8001188 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001154:	4a0d      	ldr	r2, [pc, #52]	@ (800118c <LoopForever+0xe>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001158:	e002      	b.n	8001160 <LoopCopyDataInit>

0800115a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800115c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115e:	3304      	adds	r3, #4

08001160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001164:	d3f9      	bcc.n	800115a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001166:	4a0a      	ldr	r2, [pc, #40]	@ (8001190 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001168:	4c0a      	ldr	r4, [pc, #40]	@ (8001194 <LoopForever+0x16>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800116c:	e001      	b.n	8001172 <LoopFillZerobss>

0800116e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001170:	3204      	adds	r2, #4

08001172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001174:	d3fb      	bcc.n	800116e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001176:	f002 ffc9 	bl	800410c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800117a:	f7ff fdff 	bl	8000d7c <main>

0800117e <LoopForever>:

LoopForever:
    b LoopForever
 800117e:	e7fe      	b.n	800117e <LoopForever>
  ldr   r0, =_estack
 8001180:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001188:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800118c:	08004c38 	.word	0x08004c38
  ldr r2, =_sbss
 8001190:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001194:	200004c8 	.word	0x200004c8

08001198 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <ADC1_2_IRQHandler>

0800119a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011a0:	2300      	movs	r3, #0
 80011a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a4:	2003      	movs	r0, #3
 80011a6:	f000 f95b 	bl	8001460 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011aa:	200f      	movs	r0, #15
 80011ac:	f000 f80e 	bl	80011cc <HAL_InitTick>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d002      	beq.n	80011bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	71fb      	strb	r3, [r7, #7]
 80011ba:	e001      	b.n	80011c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011bc:	f7ff fe4c 	bl	8000e58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011c0:	79fb      	ldrb	r3, [r7, #7]

}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011d8:	4b16      	ldr	r3, [pc, #88]	@ (8001234 <HAL_InitTick+0x68>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d022      	beq.n	8001226 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011e0:	4b15      	ldr	r3, [pc, #84]	@ (8001238 <HAL_InitTick+0x6c>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <HAL_InitTick+0x68>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80011f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 f966 	bl	80014c6 <HAL_SYSTICK_Config>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d10f      	bne.n	8001220 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b0f      	cmp	r3, #15
 8001204:	d809      	bhi.n	800121a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001206:	2200      	movs	r2, #0
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	f04f 30ff 	mov.w	r0, #4294967295
 800120e:	f000 f932 	bl	8001476 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001212:	4a0a      	ldr	r2, [pc, #40]	@ (800123c <HAL_InitTick+0x70>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	e007      	b.n	800122a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	73fb      	strb	r3, [r7, #15]
 800121e:	e004      	b.n	800122a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	73fb      	strb	r3, [r7, #15]
 8001224:	e001      	b.n	800122a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800122a:	7bfb      	ldrb	r3, [r7, #15]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000008 	.word	0x20000008
 8001238:	20000000 	.word	0x20000000
 800123c:	20000004 	.word	0x20000004

08001240 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001244:	4b05      	ldr	r3, [pc, #20]	@ (800125c <HAL_IncTick+0x1c>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <HAL_IncTick+0x20>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4413      	add	r3, r2
 800124e:	4a03      	ldr	r2, [pc, #12]	@ (800125c <HAL_IncTick+0x1c>)
 8001250:	6013      	str	r3, [r2, #0]
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	2000037c 	.word	0x2000037c
 8001260:	20000008 	.word	0x20000008

08001264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return uwTick;
 8001268:	4b03      	ldr	r3, [pc, #12]	@ (8001278 <HAL_GetTick+0x14>)
 800126a:	681b      	ldr	r3, [r3, #0]
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	2000037c 	.word	0x2000037c

0800127c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001284:	f7ff ffee 	bl	8001264 <HAL_GetTick>
 8001288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001294:	d004      	beq.n	80012a0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001296:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <HAL_Delay+0x40>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	4413      	add	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012a0:	bf00      	nop
 80012a2:	f7ff ffdf 	bl	8001264 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d8f7      	bhi.n	80012a2 <HAL_Delay+0x26>
  {
  }
}
 80012b2:	bf00      	nop
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000008 	.word	0x20000008

080012c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012dc:	4013      	ands	r3, r2
 80012de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f2:	4a04      	ldr	r2, [pc, #16]	@ (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	60d3      	str	r3, [r2, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800130c:	4b04      	ldr	r3, [pc, #16]	@ (8001320 <__NVIC_GetPriorityGrouping+0x18>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	f003 0307 	and.w	r3, r3, #7
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	2b00      	cmp	r3, #0
 8001334:	db0b      	blt.n	800134e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	f003 021f 	and.w	r2, r3, #31
 800133c:	4907      	ldr	r1, [pc, #28]	@ (800135c <__NVIC_EnableIRQ+0x38>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	095b      	lsrs	r3, r3, #5
 8001344:	2001      	movs	r0, #1
 8001346:	fa00 f202 	lsl.w	r2, r0, r2
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000e100 	.word	0xe000e100

08001360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	2b00      	cmp	r3, #0
 8001372:	db0a      	blt.n	800138a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	490c      	ldr	r1, [pc, #48]	@ (80013ac <__NVIC_SetPriority+0x4c>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	0112      	lsls	r2, r2, #4
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	440b      	add	r3, r1
 8001384:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001388:	e00a      	b.n	80013a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4908      	ldr	r1, [pc, #32]	@ (80013b0 <__NVIC_SetPriority+0x50>)
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	3b04      	subs	r3, #4
 8001398:	0112      	lsls	r2, r2, #4
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	440b      	add	r3, r1
 800139e:	761a      	strb	r2, [r3, #24]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000e100 	.word	0xe000e100
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	@ 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f1c3 0307 	rsb	r3, r3, #7
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	bf28      	it	cs
 80013d2:	2304      	movcs	r3, #4
 80013d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3304      	adds	r3, #4
 80013da:	2b06      	cmp	r3, #6
 80013dc:	d902      	bls.n	80013e4 <NVIC_EncodePriority+0x30>
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3b03      	subs	r3, #3
 80013e2:	e000      	b.n	80013e6 <NVIC_EncodePriority+0x32>
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43da      	mvns	r2, r3
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	401a      	ands	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa01 f303 	lsl.w	r3, r1, r3
 8001406:	43d9      	mvns	r1, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	4313      	orrs	r3, r2
         );
}
 800140e:	4618      	mov	r0, r3
 8001410:	3724      	adds	r7, #36	@ 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800142c:	d301      	bcc.n	8001432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142e:	2301      	movs	r3, #1
 8001430:	e00f      	b.n	8001452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001432:	4a0a      	ldr	r2, [pc, #40]	@ (800145c <SysTick_Config+0x40>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143a:	210f      	movs	r1, #15
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f7ff ff8e 	bl	8001360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001444:	4b05      	ldr	r3, [pc, #20]	@ (800145c <SysTick_Config+0x40>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144a:	4b04      	ldr	r3, [pc, #16]	@ (800145c <SysTick_Config+0x40>)
 800144c:	2207      	movs	r2, #7
 800144e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	e000e010 	.word	0xe000e010

08001460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ff29 	bl	80012c0 <__NVIC_SetPriorityGrouping>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
 8001482:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001484:	f7ff ff40 	bl	8001308 <__NVIC_GetPriorityGrouping>
 8001488:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	68b9      	ldr	r1, [r7, #8]
 800148e:	6978      	ldr	r0, [r7, #20]
 8001490:	f7ff ff90 	bl	80013b4 <NVIC_EncodePriority>
 8001494:	4602      	mov	r2, r0
 8001496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149a:	4611      	mov	r1, r2
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff5f 	bl	8001360 <__NVIC_SetPriority>
}
 80014a2:	bf00      	nop
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff33 	bl	8001324 <__NVIC_EnableIRQ>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff ffa4 	bl	800141c <SysTick_Config>
 80014d4:	4603      	mov	r3, r0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e08d      	b.n	800160e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	4b47      	ldr	r3, [pc, #284]	@ (8001618 <HAL_DMA_Init+0x138>)
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d80f      	bhi.n	800151e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	4b45      	ldr	r3, [pc, #276]	@ (800161c <HAL_DMA_Init+0x13c>)
 8001506:	4413      	add	r3, r2
 8001508:	4a45      	ldr	r2, [pc, #276]	@ (8001620 <HAL_DMA_Init+0x140>)
 800150a:	fba2 2303 	umull	r2, r3, r2, r3
 800150e:	091b      	lsrs	r3, r3, #4
 8001510:	009a      	lsls	r2, r3, #2
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a42      	ldr	r2, [pc, #264]	@ (8001624 <HAL_DMA_Init+0x144>)
 800151a:	641a      	str	r2, [r3, #64]	@ 0x40
 800151c:	e00e      	b.n	800153c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	4b40      	ldr	r3, [pc, #256]	@ (8001628 <HAL_DMA_Init+0x148>)
 8001526:	4413      	add	r3, r2
 8001528:	4a3d      	ldr	r2, [pc, #244]	@ (8001620 <HAL_DMA_Init+0x140>)
 800152a:	fba2 2303 	umull	r2, r3, r2, r3
 800152e:	091b      	lsrs	r3, r3, #4
 8001530:	009a      	lsls	r2, r3, #2
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a3c      	ldr	r2, [pc, #240]	@ (800162c <HAL_DMA_Init+0x14c>)
 800153a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2202      	movs	r2, #2
 8001540:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001556:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001560:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800156c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001578:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	4313      	orrs	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f9b6 	bl	8001900 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800159c:	d102      	bne.n	80015a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80015b8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d010      	beq.n	80015e4 <HAL_DMA_Init+0x104>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d80c      	bhi.n	80015e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 f9d6 	bl	800197c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	e008      	b.n	80015f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40020407 	.word	0x40020407
 800161c:	bffdfff8 	.word	0xbffdfff8
 8001620:	cccccccd 	.word	0xcccccccd
 8001624:	40020000 	.word	0x40020000
 8001628:	bffdfbf8 	.word	0xbffdfbf8
 800162c:	40020400 	.word	0x40020400

08001630 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
 800163c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001648:	2b01      	cmp	r3, #1
 800164a:	d101      	bne.n	8001650 <HAL_DMA_Start_IT+0x20>
 800164c:	2302      	movs	r3, #2
 800164e:	e066      	b.n	800171e <HAL_DMA_Start_IT+0xee>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b01      	cmp	r3, #1
 8001662:	d155      	bne.n	8001710 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2202      	movs	r2, #2
 8001668:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 0201 	bic.w	r2, r2, #1
 8001680:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	68b9      	ldr	r1, [r7, #8]
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f000 f8fb 	bl	8001884 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	2b00      	cmp	r3, #0
 8001694:	d008      	beq.n	80016a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f042 020e 	orr.w	r2, r2, #14
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	e00f      	b.n	80016c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0204 	bic.w	r2, r2, #4
 80016b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 020a 	orr.w	r2, r2, #10
 80016c6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d007      	beq.n	80016e6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80016e4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d007      	beq.n	80016fe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80016fc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f042 0201 	orr.w	r2, r2, #1
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	e005      	b.n	800171c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001718:	2302      	movs	r3, #2
 800171a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800171c:	7dfb      	ldrb	r3, [r7, #23]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b084      	sub	sp, #16
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001742:	f003 031f 	and.w	r3, r3, #31
 8001746:	2204      	movs	r2, #4
 8001748:	409a      	lsls	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4013      	ands	r3, r2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d026      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x7a>
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	d021      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0320 	and.w	r3, r3, #32
 8001766:	2b00      	cmp	r3, #0
 8001768:	d107      	bne.n	800177a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0204 	bic.w	r2, r2, #4
 8001778:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177e:	f003 021f 	and.w	r2, r3, #31
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	2104      	movs	r1, #4
 8001788:	fa01 f202 	lsl.w	r2, r1, r2
 800178c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	2b00      	cmp	r3, #0
 8001794:	d071      	beq.n	800187a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800179e:	e06c      	b.n	800187a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a4:	f003 031f 	and.w	r3, r3, #31
 80017a8:	2202      	movs	r2, #2
 80017aa:	409a      	lsls	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4013      	ands	r3, r2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d02e      	beq.n	8001812 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d029      	beq.n	8001812 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0320 	and.w	r3, r3, #32
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d10b      	bne.n	80017e4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 020a 	bic.w	r2, r2, #10
 80017da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e8:	f003 021f 	and.w	r2, r3, #31
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f0:	2102      	movs	r1, #2
 80017f2:	fa01 f202 	lsl.w	r2, r1, r2
 80017f6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001804:	2b00      	cmp	r3, #0
 8001806:	d038      	beq.n	800187a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001810:	e033      	b.n	800187a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001816:	f003 031f 	and.w	r3, r3, #31
 800181a:	2208      	movs	r2, #8
 800181c:	409a      	lsls	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4013      	ands	r3, r2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d02a      	beq.n	800187c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	2b00      	cmp	r3, #0
 800182e:	d025      	beq.n	800187c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 020e 	bic.w	r2, r2, #14
 800183e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001844:	f003 021f 	and.w	r2, r3, #31
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184c:	2101      	movs	r1, #1
 800184e:	fa01 f202 	lsl.w	r2, r1, r2
 8001852:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800186e:	2b00      	cmp	r3, #0
 8001870:	d004      	beq.n	800187c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800187a:	bf00      	nop
 800187c:	bf00      	nop
}
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
 8001890:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800189a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d004      	beq.n	80018ae <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80018ac:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b2:	f003 021f 	and.w	r2, r3, #31
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ba:	2101      	movs	r1, #1
 80018bc:	fa01 f202 	lsl.w	r2, r1, r2
 80018c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b10      	cmp	r3, #16
 80018d0:	d108      	bne.n	80018e4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018e2:	e007      	b.n	80018f4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	68ba      	ldr	r2, [r7, #8]
 80018ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	60da      	str	r2, [r3, #12]
}
 80018f4:	bf00      	nop
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001900:	b480      	push	{r7}
 8001902:	b087      	sub	sp, #28
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	4b16      	ldr	r3, [pc, #88]	@ (8001968 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001910:	429a      	cmp	r2, r3
 8001912:	d802      	bhi.n	800191a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001914:	4b15      	ldr	r3, [pc, #84]	@ (800196c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	e001      	b.n	800191e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800191a:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800191c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	3b08      	subs	r3, #8
 800192a:	4a12      	ldr	r2, [pc, #72]	@ (8001974 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800192c:	fba2 2303 	umull	r2, r3, r2, r3
 8001930:	091b      	lsrs	r3, r3, #4
 8001932:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001938:	089b      	lsrs	r3, r3, #2
 800193a:	009a      	lsls	r2, r3, #2
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4413      	add	r3, r2
 8001940:	461a      	mov	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a0b      	ldr	r2, [pc, #44]	@ (8001978 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800194a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 031f 	and.w	r3, r3, #31
 8001952:	2201      	movs	r2, #1
 8001954:	409a      	lsls	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800195a:	bf00      	nop
 800195c:	371c      	adds	r7, #28
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40020407 	.word	0x40020407
 800196c:	40020800 	.word	0x40020800
 8001970:	40020820 	.word	0x40020820
 8001974:	cccccccd 	.word	0xcccccccd
 8001978:	40020880 	.word	0x40020880

0800197c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	4b0b      	ldr	r3, [pc, #44]	@ (80019bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001990:	4413      	add	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	461a      	mov	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a08      	ldr	r2, [pc, #32]	@ (80019c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800199e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	f003 031f 	and.w	r3, r3, #31
 80019a8:	2201      	movs	r2, #1
 80019aa:	409a      	lsls	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	1000823f 	.word	0x1000823f
 80019c0:	40020940 	.word	0x40020940

080019c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019d2:	e15a      	b.n	8001c8a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	2101      	movs	r1, #1
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	fa01 f303 	lsl.w	r3, r1, r3
 80019e0:	4013      	ands	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 814c 	beq.w	8001c84 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d005      	beq.n	8001a04 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d130      	bne.n	8001a66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	2203      	movs	r2, #3
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4013      	ands	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	091b      	lsrs	r3, r3, #4
 8001a50:	f003 0201 	and.w	r2, r3, #1
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	d017      	beq.n	8001aa2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d123      	bne.n	8001af6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	08da      	lsrs	r2, r3, #3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3208      	adds	r2, #8
 8001ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	220f      	movs	r2, #15
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	691a      	ldr	r2, [r3, #16]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	08da      	lsrs	r2, r3, #3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3208      	adds	r2, #8
 8001af0:	6939      	ldr	r1, [r7, #16]
 8001af2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	2203      	movs	r2, #3
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0203 	and.w	r2, r3, #3
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 80a6 	beq.w	8001c84 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b38:	4b5b      	ldr	r3, [pc, #364]	@ (8001ca8 <HAL_GPIO_Init+0x2e4>)
 8001b3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b3c:	4a5a      	ldr	r2, [pc, #360]	@ (8001ca8 <HAL_GPIO_Init+0x2e4>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b44:	4b58      	ldr	r3, [pc, #352]	@ (8001ca8 <HAL_GPIO_Init+0x2e4>)
 8001b46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b50:	4a56      	ldr	r2, [pc, #344]	@ (8001cac <HAL_GPIO_Init+0x2e8>)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	089b      	lsrs	r3, r3, #2
 8001b56:	3302      	adds	r3, #2
 8001b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	220f      	movs	r2, #15
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b7a:	d01f      	beq.n	8001bbc <HAL_GPIO_Init+0x1f8>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a4c      	ldr	r2, [pc, #304]	@ (8001cb0 <HAL_GPIO_Init+0x2ec>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d019      	beq.n	8001bb8 <HAL_GPIO_Init+0x1f4>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a4b      	ldr	r2, [pc, #300]	@ (8001cb4 <HAL_GPIO_Init+0x2f0>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d013      	beq.n	8001bb4 <HAL_GPIO_Init+0x1f0>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a4a      	ldr	r2, [pc, #296]	@ (8001cb8 <HAL_GPIO_Init+0x2f4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d00d      	beq.n	8001bb0 <HAL_GPIO_Init+0x1ec>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a49      	ldr	r2, [pc, #292]	@ (8001cbc <HAL_GPIO_Init+0x2f8>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d007      	beq.n	8001bac <HAL_GPIO_Init+0x1e8>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a48      	ldr	r2, [pc, #288]	@ (8001cc0 <HAL_GPIO_Init+0x2fc>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d101      	bne.n	8001ba8 <HAL_GPIO_Init+0x1e4>
 8001ba4:	2305      	movs	r3, #5
 8001ba6:	e00a      	b.n	8001bbe <HAL_GPIO_Init+0x1fa>
 8001ba8:	2306      	movs	r3, #6
 8001baa:	e008      	b.n	8001bbe <HAL_GPIO_Init+0x1fa>
 8001bac:	2304      	movs	r3, #4
 8001bae:	e006      	b.n	8001bbe <HAL_GPIO_Init+0x1fa>
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e004      	b.n	8001bbe <HAL_GPIO_Init+0x1fa>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e002      	b.n	8001bbe <HAL_GPIO_Init+0x1fa>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <HAL_GPIO_Init+0x1fa>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	f002 0203 	and.w	r2, r2, #3
 8001bc4:	0092      	lsls	r2, r2, #2
 8001bc6:	4093      	lsls	r3, r2
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bce:	4937      	ldr	r1, [pc, #220]	@ (8001cac <HAL_GPIO_Init+0x2e8>)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	089b      	lsrs	r3, r3, #2
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bdc:	4b39      	ldr	r3, [pc, #228]	@ (8001cc4 <HAL_GPIO_Init+0x300>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c00:	4a30      	ldr	r2, [pc, #192]	@ (8001cc4 <HAL_GPIO_Init+0x300>)
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c06:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc4 <HAL_GPIO_Init+0x300>)
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4013      	ands	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c2a:	4a26      	ldr	r2, [pc, #152]	@ (8001cc4 <HAL_GPIO_Init+0x300>)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001c30:	4b24      	ldr	r3, [pc, #144]	@ (8001cc4 <HAL_GPIO_Init+0x300>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c54:	4a1b      	ldr	r2, [pc, #108]	@ (8001cc4 <HAL_GPIO_Init+0x300>)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc4 <HAL_GPIO_Init+0x300>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c7e:	4a11      	ldr	r2, [pc, #68]	@ (8001cc4 <HAL_GPIO_Init+0x300>)
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	3301      	adds	r3, #1
 8001c88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f47f ae9d 	bne.w	80019d4 <HAL_GPIO_Init+0x10>
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	bf00      	nop
 8001c9e:	371c      	adds	r7, #28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40010000 	.word	0x40010000
 8001cb0:	48000400 	.word	0x48000400
 8001cb4:	48000800 	.word	0x48000800
 8001cb8:	48000c00 	.word	0x48000c00
 8001cbc:	48001000 	.word	0x48001000
 8001cc0:	48001400 	.word	0x48001400
 8001cc4:	40010400 	.word	0x40010400

08001cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	807b      	strh	r3, [r7, #2]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cd8:	787b      	ldrb	r3, [r7, #1]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cde:	887a      	ldrh	r2, [r7, #2]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ce4:	e002      	b.n	8001cec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ce6:	887a      	ldrh	r2, [r7, #2]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d0a:	887a      	ldrh	r2, [r7, #2]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	041a      	lsls	r2, r3, #16
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	43d9      	mvns	r1, r3
 8001d16:	887b      	ldrh	r3, [r7, #2]
 8001d18:	400b      	ands	r3, r1
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	619a      	str	r2, [r3, #24]
}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d141      	bne.n	8001dbe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d3a:	4b4b      	ldr	r3, [pc, #300]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d46:	d131      	bne.n	8001dac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d48:	4b47      	ldr	r3, [pc, #284]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d4e:	4a46      	ldr	r2, [pc, #280]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d58:	4b43      	ldr	r3, [pc, #268]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d60:	4a41      	ldr	r2, [pc, #260]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d68:	4b40      	ldr	r3, [pc, #256]	@ (8001e6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2232      	movs	r2, #50	@ 0x32
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
 8001d72:	4a3f      	ldr	r2, [pc, #252]	@ (8001e70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d74:	fba2 2303 	umull	r2, r3, r2, r3
 8001d78:	0c9b      	lsrs	r3, r3, #18
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d7e:	e002      	b.n	8001d86 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d86:	4b38      	ldr	r3, [pc, #224]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d92:	d102      	bne.n	8001d9a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f2      	bne.n	8001d80 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d9a:	4b33      	ldr	r3, [pc, #204]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001da2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001da6:	d158      	bne.n	8001e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e057      	b.n	8001e5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dac:	4b2e      	ldr	r3, [pc, #184]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001db2:	4a2d      	ldr	r2, [pc, #180]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001db8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001dbc:	e04d      	b.n	8001e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001dc4:	d141      	bne.n	8001e4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dc6:	4b28      	ldr	r3, [pc, #160]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dd2:	d131      	bne.n	8001e38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dd4:	4b24      	ldr	r3, [pc, #144]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001dda:	4a23      	ldr	r2, [pc, #140]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ddc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001de0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001de4:	4b20      	ldr	r3, [pc, #128]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001dec:	4a1e      	ldr	r2, [pc, #120]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001df2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001df4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2232      	movs	r2, #50	@ 0x32
 8001dfa:	fb02 f303 	mul.w	r3, r2, r3
 8001dfe:	4a1c      	ldr	r2, [pc, #112]	@ (8001e70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e00:	fba2 2303 	umull	r2, r3, r2, r3
 8001e04:	0c9b      	lsrs	r3, r3, #18
 8001e06:	3301      	adds	r3, #1
 8001e08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e0a:	e002      	b.n	8001e12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e12:	4b15      	ldr	r3, [pc, #84]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e1e:	d102      	bne.n	8001e26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f2      	bne.n	8001e0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e26:	4b10      	ldr	r3, [pc, #64]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e32:	d112      	bne.n	8001e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e011      	b.n	8001e5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e38:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001e48:	e007      	b.n	8001e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e4a:	4b07      	ldr	r3, [pc, #28]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e52:	4a05      	ldr	r2, [pc, #20]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e58:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	40007000 	.word	0x40007000
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	431bde83 	.word	0x431bde83

08001e74 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001e78:	4b05      	ldr	r3, [pc, #20]	@ (8001e90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	4a04      	ldr	r2, [pc, #16]	@ (8001e90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e82:	6093      	str	r3, [r2, #8]
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40007000 	.word	0x40007000

08001e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e2fe      	b.n	80024a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d075      	beq.n	8001f9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eb2:	4b97      	ldr	r3, [pc, #604]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ebc:	4b94      	ldr	r3, [pc, #592]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	2b0c      	cmp	r3, #12
 8001eca:	d102      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x3e>
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d002      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x44>
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d10b      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed8:	4b8d      	ldr	r3, [pc, #564]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d05b      	beq.n	8001f9c <HAL_RCC_OscConfig+0x108>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d157      	bne.n	8001f9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e2d9      	b.n	80024a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ef8:	d106      	bne.n	8001f08 <HAL_RCC_OscConfig+0x74>
 8001efa:	4b85      	ldr	r3, [pc, #532]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a84      	ldr	r2, [pc, #528]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 8001f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	e01d      	b.n	8001f44 <HAL_RCC_OscConfig+0xb0>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f10:	d10c      	bne.n	8001f2c <HAL_RCC_OscConfig+0x98>
 8001f12:	4b7f      	ldr	r3, [pc, #508]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a7e      	ldr	r2, [pc, #504]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 8001f18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	4b7c      	ldr	r3, [pc, #496]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a7b      	ldr	r2, [pc, #492]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 8001f24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e00b      	b.n	8001f44 <HAL_RCC_OscConfig+0xb0>
 8001f2c:	4b78      	ldr	r3, [pc, #480]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a77      	ldr	r2, [pc, #476]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 8001f32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f36:	6013      	str	r3, [r2, #0]
 8001f38:	4b75      	ldr	r3, [pc, #468]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a74      	ldr	r2, [pc, #464]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 8001f3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d013      	beq.n	8001f74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7ff f98a 	bl	8001264 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f54:	f7ff f986 	bl	8001264 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b64      	cmp	r3, #100	@ 0x64
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e29e      	b.n	80024a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f66:	4b6a      	ldr	r3, [pc, #424]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0xc0>
 8001f72:	e014      	b.n	8001f9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7ff f976 	bl	8001264 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f7c:	f7ff f972 	bl	8001264 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b64      	cmp	r3, #100	@ 0x64
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e28a      	b.n	80024a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f8e:	4b60      	ldr	r3, [pc, #384]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0xe8>
 8001f9a:	e000      	b.n	8001f9e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d075      	beq.n	8002096 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001faa:	4b59      	ldr	r3, [pc, #356]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fb4:	4b56      	ldr	r3, [pc, #344]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	2b0c      	cmp	r3, #12
 8001fc2:	d102      	bne.n	8001fca <HAL_RCC_OscConfig+0x136>
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d002      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x13c>
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d11f      	bne.n	8002010 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fd0:	4b4f      	ldr	r3, [pc, #316]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x154>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e25d      	b.n	80024a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe8:	4b49      	ldr	r3, [pc, #292]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	061b      	lsls	r3, r3, #24
 8001ff6:	4946      	ldr	r1, [pc, #280]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ffc:	4b45      	ldr	r3, [pc, #276]	@ (8002114 <HAL_RCC_OscConfig+0x280>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff f8e3 	bl	80011cc <HAL_InitTick>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d043      	beq.n	8002094 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e249      	b.n	80024a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d023      	beq.n	8002060 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002018:	4b3d      	ldr	r3, [pc, #244]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a3c      	ldr	r2, [pc, #240]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 800201e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002024:	f7ff f91e 	bl	8001264 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800202c:	f7ff f91a 	bl	8001264 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e232      	b.n	80024a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800203e:	4b34      	ldr	r3, [pc, #208]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204a:	4b31      	ldr	r3, [pc, #196]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	061b      	lsls	r3, r3, #24
 8002058:	492d      	ldr	r1, [pc, #180]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 800205a:	4313      	orrs	r3, r2
 800205c:	604b      	str	r3, [r1, #4]
 800205e:	e01a      	b.n	8002096 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002060:	4b2b      	ldr	r3, [pc, #172]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a2a      	ldr	r2, [pc, #168]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 8002066:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800206a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206c:	f7ff f8fa 	bl	8001264 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002074:	f7ff f8f6 	bl	8001264 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e20e      	b.n	80024a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002086:	4b22      	ldr	r3, [pc, #136]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x1e0>
 8002092:	e000      	b.n	8002096 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002094:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d041      	beq.n	8002126 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d01c      	beq.n	80020e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020aa:	4b19      	ldr	r3, [pc, #100]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 80020ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020b0:	4a17      	ldr	r2, [pc, #92]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ba:	f7ff f8d3 	bl	8001264 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c2:	f7ff f8cf 	bl	8001264 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e1e7      	b.n	80024a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 80020d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0ef      	beq.n	80020c2 <HAL_RCC_OscConfig+0x22e>
 80020e2:	e020      	b.n	8002126 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 80020e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020ea:	4a09      	ldr	r2, [pc, #36]	@ (8002110 <HAL_RCC_OscConfig+0x27c>)
 80020ec:	f023 0301 	bic.w	r3, r3, #1
 80020f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f4:	f7ff f8b6 	bl	8001264 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020fa:	e00d      	b.n	8002118 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020fc:	f7ff f8b2 	bl	8001264 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d906      	bls.n	8002118 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e1ca      	b.n	80024a4 <HAL_RCC_OscConfig+0x610>
 800210e:	bf00      	nop
 8002110:	40021000 	.word	0x40021000
 8002114:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002118:	4b8c      	ldr	r3, [pc, #560]	@ (800234c <HAL_RCC_OscConfig+0x4b8>)
 800211a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1ea      	bne.n	80020fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 80a6 	beq.w	8002280 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002134:	2300      	movs	r3, #0
 8002136:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002138:	4b84      	ldr	r3, [pc, #528]	@ (800234c <HAL_RCC_OscConfig+0x4b8>)
 800213a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_RCC_OscConfig+0x2b4>
 8002144:	2301      	movs	r3, #1
 8002146:	e000      	b.n	800214a <HAL_RCC_OscConfig+0x2b6>
 8002148:	2300      	movs	r3, #0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00d      	beq.n	800216a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800214e:	4b7f      	ldr	r3, [pc, #508]	@ (800234c <HAL_RCC_OscConfig+0x4b8>)
 8002150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002152:	4a7e      	ldr	r2, [pc, #504]	@ (800234c <HAL_RCC_OscConfig+0x4b8>)
 8002154:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002158:	6593      	str	r3, [r2, #88]	@ 0x58
 800215a:	4b7c      	ldr	r3, [pc, #496]	@ (800234c <HAL_RCC_OscConfig+0x4b8>)
 800215c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002166:	2301      	movs	r3, #1
 8002168:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800216a:	4b79      	ldr	r3, [pc, #484]	@ (8002350 <HAL_RCC_OscConfig+0x4bc>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d118      	bne.n	80021a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002176:	4b76      	ldr	r3, [pc, #472]	@ (8002350 <HAL_RCC_OscConfig+0x4bc>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a75      	ldr	r2, [pc, #468]	@ (8002350 <HAL_RCC_OscConfig+0x4bc>)
 800217c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002182:	f7ff f86f 	bl	8001264 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218a:	f7ff f86b 	bl	8001264 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e183      	b.n	80024a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800219c:	4b6c      	ldr	r3, [pc, #432]	@ (8002350 <HAL_RCC_OscConfig+0x4bc>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d108      	bne.n	80021c2 <HAL_RCC_OscConfig+0x32e>
 80021b0:	4b66      	ldr	r3, [pc, #408]	@ (800234c <HAL_RCC_OscConfig+0x4b8>)
 80021b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b6:	4a65      	ldr	r2, [pc, #404]	@ (800234c <HAL_RCC_OscConfig+0x4b8>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021c0:	e024      	b.n	800220c <HAL_RCC_OscConfig+0x378>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	2b05      	cmp	r3, #5
 80021c8:	d110      	bne.n	80021ec <HAL_RCC_OscConfig+0x358>
 80021ca:	4b60      	ldr	r3, [pc, #384]	@ (800234c <HAL_RCC_OscConfig+0x4b8>)
 80021cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d0:	4a5e      	ldr	r2, [pc, #376]	@ (800234c <HAL_RCC_OscConfig+0x4b8>)
 80021d2:	f043 0304 	orr.w	r3, r3, #4
 80021d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021da:	4b5c      	ldr	r3, [pc, #368]	@ (800234c <HAL_RCC_OscConfig+0x4b8>)
 80021dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e0:	4a5a      	ldr	r2, [pc, #360]	@ (800234c <HAL_RCC_OscConfig+0x4b8>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021ea:	e00f      	b.n	800220c <HAL_RCC_OscConfig+0x378>
 80021ec:	4b57      	ldr	r3, [pc, #348]	@ (800234c <HAL_RCC_OscConfig+0x4b8>)
 80021ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f2:	4a56      	ldr	r2, [pc, #344]	@ (800234c <HAL_RCC_OscConfig+0x4b8>)
 80021f4:	f023 0301 	bic.w	r3, r3, #1
 80021f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021fc:	4b53      	ldr	r3, [pc, #332]	@ (800234c <HAL_RCC_OscConfig+0x4b8>)
 80021fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002202:	4a52      	ldr	r2, [pc, #328]	@ (800234c <HAL_RCC_OscConfig+0x4b8>)
 8002204:	f023 0304 	bic.w	r3, r3, #4
 8002208:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d016      	beq.n	8002242 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002214:	f7ff f826 	bl	8001264 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800221a:	e00a      	b.n	8002232 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221c:	f7ff f822 	bl	8001264 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800222a:	4293      	cmp	r3, r2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e138      	b.n	80024a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002232:	4b46      	ldr	r3, [pc, #280]	@ (800234c <HAL_RCC_OscConfig+0x4b8>)
 8002234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0ed      	beq.n	800221c <HAL_RCC_OscConfig+0x388>
 8002240:	e015      	b.n	800226e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002242:	f7ff f80f 	bl	8001264 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002248:	e00a      	b.n	8002260 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224a:	f7ff f80b 	bl	8001264 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002258:	4293      	cmp	r3, r2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e121      	b.n	80024a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002260:	4b3a      	ldr	r3, [pc, #232]	@ (800234c <HAL_RCC_OscConfig+0x4b8>)
 8002262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1ed      	bne.n	800224a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800226e:	7ffb      	ldrb	r3, [r7, #31]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d105      	bne.n	8002280 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002274:	4b35      	ldr	r3, [pc, #212]	@ (800234c <HAL_RCC_OscConfig+0x4b8>)
 8002276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002278:	4a34      	ldr	r2, [pc, #208]	@ (800234c <HAL_RCC_OscConfig+0x4b8>)
 800227a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800227e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0320 	and.w	r3, r3, #32
 8002288:	2b00      	cmp	r3, #0
 800228a:	d03c      	beq.n	8002306 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01c      	beq.n	80022ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002294:	4b2d      	ldr	r3, [pc, #180]	@ (800234c <HAL_RCC_OscConfig+0x4b8>)
 8002296:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800229a:	4a2c      	ldr	r2, [pc, #176]	@ (800234c <HAL_RCC_OscConfig+0x4b8>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a4:	f7fe ffde 	bl	8001264 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022ac:	f7fe ffda 	bl	8001264 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e0f2      	b.n	80024a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022be:	4b23      	ldr	r3, [pc, #140]	@ (800234c <HAL_RCC_OscConfig+0x4b8>)
 80022c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0ef      	beq.n	80022ac <HAL_RCC_OscConfig+0x418>
 80022cc:	e01b      	b.n	8002306 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022ce:	4b1f      	ldr	r3, [pc, #124]	@ (800234c <HAL_RCC_OscConfig+0x4b8>)
 80022d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022d4:	4a1d      	ldr	r2, [pc, #116]	@ (800234c <HAL_RCC_OscConfig+0x4b8>)
 80022d6:	f023 0301 	bic.w	r3, r3, #1
 80022da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022de:	f7fe ffc1 	bl	8001264 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022e6:	f7fe ffbd 	bl	8001264 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e0d5      	b.n	80024a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022f8:	4b14      	ldr	r3, [pc, #80]	@ (800234c <HAL_RCC_OscConfig+0x4b8>)
 80022fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1ef      	bne.n	80022e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 80c9 	beq.w	80024a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002310:	4b0e      	ldr	r3, [pc, #56]	@ (800234c <HAL_RCC_OscConfig+0x4b8>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 030c 	and.w	r3, r3, #12
 8002318:	2b0c      	cmp	r3, #12
 800231a:	f000 8083 	beq.w	8002424 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d15e      	bne.n	80023e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002326:	4b09      	ldr	r3, [pc, #36]	@ (800234c <HAL_RCC_OscConfig+0x4b8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a08      	ldr	r2, [pc, #32]	@ (800234c <HAL_RCC_OscConfig+0x4b8>)
 800232c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002332:	f7fe ff97 	bl	8001264 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002338:	e00c      	b.n	8002354 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233a:	f7fe ff93 	bl	8001264 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d905      	bls.n	8002354 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e0ab      	b.n	80024a4 <HAL_RCC_OscConfig+0x610>
 800234c:	40021000 	.word	0x40021000
 8002350:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002354:	4b55      	ldr	r3, [pc, #340]	@ (80024ac <HAL_RCC_OscConfig+0x618>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1ec      	bne.n	800233a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002360:	4b52      	ldr	r3, [pc, #328]	@ (80024ac <HAL_RCC_OscConfig+0x618>)
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	4b52      	ldr	r3, [pc, #328]	@ (80024b0 <HAL_RCC_OscConfig+0x61c>)
 8002366:	4013      	ands	r3, r2
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6a11      	ldr	r1, [r2, #32]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002370:	3a01      	subs	r2, #1
 8002372:	0112      	lsls	r2, r2, #4
 8002374:	4311      	orrs	r1, r2
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800237a:	0212      	lsls	r2, r2, #8
 800237c:	4311      	orrs	r1, r2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002382:	0852      	lsrs	r2, r2, #1
 8002384:	3a01      	subs	r2, #1
 8002386:	0552      	lsls	r2, r2, #21
 8002388:	4311      	orrs	r1, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800238e:	0852      	lsrs	r2, r2, #1
 8002390:	3a01      	subs	r2, #1
 8002392:	0652      	lsls	r2, r2, #25
 8002394:	4311      	orrs	r1, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800239a:	06d2      	lsls	r2, r2, #27
 800239c:	430a      	orrs	r2, r1
 800239e:	4943      	ldr	r1, [pc, #268]	@ (80024ac <HAL_RCC_OscConfig+0x618>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023a4:	4b41      	ldr	r3, [pc, #260]	@ (80024ac <HAL_RCC_OscConfig+0x618>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a40      	ldr	r2, [pc, #256]	@ (80024ac <HAL_RCC_OscConfig+0x618>)
 80023aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023b0:	4b3e      	ldr	r3, [pc, #248]	@ (80024ac <HAL_RCC_OscConfig+0x618>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4a3d      	ldr	r2, [pc, #244]	@ (80024ac <HAL_RCC_OscConfig+0x618>)
 80023b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023bc:	f7fe ff52 	bl	8001264 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c4:	f7fe ff4e 	bl	8001264 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e066      	b.n	80024a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023d6:	4b35      	ldr	r3, [pc, #212]	@ (80024ac <HAL_RCC_OscConfig+0x618>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0f0      	beq.n	80023c4 <HAL_RCC_OscConfig+0x530>
 80023e2:	e05e      	b.n	80024a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e4:	4b31      	ldr	r3, [pc, #196]	@ (80024ac <HAL_RCC_OscConfig+0x618>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a30      	ldr	r2, [pc, #192]	@ (80024ac <HAL_RCC_OscConfig+0x618>)
 80023ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f0:	f7fe ff38 	bl	8001264 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f8:	f7fe ff34 	bl	8001264 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e04c      	b.n	80024a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800240a:	4b28      	ldr	r3, [pc, #160]	@ (80024ac <HAL_RCC_OscConfig+0x618>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f0      	bne.n	80023f8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002416:	4b25      	ldr	r3, [pc, #148]	@ (80024ac <HAL_RCC_OscConfig+0x618>)
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	4924      	ldr	r1, [pc, #144]	@ (80024ac <HAL_RCC_OscConfig+0x618>)
 800241c:	4b25      	ldr	r3, [pc, #148]	@ (80024b4 <HAL_RCC_OscConfig+0x620>)
 800241e:	4013      	ands	r3, r2
 8002420:	60cb      	str	r3, [r1, #12]
 8002422:	e03e      	b.n	80024a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e039      	b.n	80024a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002430:	4b1e      	ldr	r3, [pc, #120]	@ (80024ac <HAL_RCC_OscConfig+0x618>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f003 0203 	and.w	r2, r3, #3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	429a      	cmp	r2, r3
 8002442:	d12c      	bne.n	800249e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244e:	3b01      	subs	r3, #1
 8002450:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002452:	429a      	cmp	r2, r3
 8002454:	d123      	bne.n	800249e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002460:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002462:	429a      	cmp	r2, r3
 8002464:	d11b      	bne.n	800249e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002470:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002472:	429a      	cmp	r2, r3
 8002474:	d113      	bne.n	800249e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002480:	085b      	lsrs	r3, r3, #1
 8002482:	3b01      	subs	r3, #1
 8002484:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002486:	429a      	cmp	r2, r3
 8002488:	d109      	bne.n	800249e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002494:	085b      	lsrs	r3, r3, #1
 8002496:	3b01      	subs	r3, #1
 8002498:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800249a:	429a      	cmp	r2, r3
 800249c:	d001      	beq.n	80024a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3720      	adds	r7, #32
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40021000 	.word	0x40021000
 80024b0:	019f800c 	.word	0x019f800c
 80024b4:	feeefffc 	.word	0xfeeefffc

080024b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e11e      	b.n	800270e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024d0:	4b91      	ldr	r3, [pc, #580]	@ (8002718 <HAL_RCC_ClockConfig+0x260>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d910      	bls.n	8002500 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024de:	4b8e      	ldr	r3, [pc, #568]	@ (8002718 <HAL_RCC_ClockConfig+0x260>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 020f 	bic.w	r2, r3, #15
 80024e6:	498c      	ldr	r1, [pc, #560]	@ (8002718 <HAL_RCC_ClockConfig+0x260>)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ee:	4b8a      	ldr	r3, [pc, #552]	@ (8002718 <HAL_RCC_ClockConfig+0x260>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d001      	beq.n	8002500 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e106      	b.n	800270e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	d073      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d129      	bne.n	8002568 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002514:	4b81      	ldr	r3, [pc, #516]	@ (800271c <HAL_RCC_ClockConfig+0x264>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0f4      	b.n	800270e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002524:	f000 f99e 	bl	8002864 <RCC_GetSysClockFreqFromPLLSource>
 8002528:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4a7c      	ldr	r2, [pc, #496]	@ (8002720 <HAL_RCC_ClockConfig+0x268>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d93f      	bls.n	80025b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002532:	4b7a      	ldr	r3, [pc, #488]	@ (800271c <HAL_RCC_ClockConfig+0x264>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d009      	beq.n	8002552 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002546:	2b00      	cmp	r3, #0
 8002548:	d033      	beq.n	80025b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800254e:	2b00      	cmp	r3, #0
 8002550:	d12f      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002552:	4b72      	ldr	r3, [pc, #456]	@ (800271c <HAL_RCC_ClockConfig+0x264>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800255a:	4a70      	ldr	r2, [pc, #448]	@ (800271c <HAL_RCC_ClockConfig+0x264>)
 800255c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002560:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002562:	2380      	movs	r3, #128	@ 0x80
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	e024      	b.n	80025b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d107      	bne.n	8002580 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002570:	4b6a      	ldr	r3, [pc, #424]	@ (800271c <HAL_RCC_ClockConfig+0x264>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d109      	bne.n	8002590 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e0c6      	b.n	800270e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002580:	4b66      	ldr	r3, [pc, #408]	@ (800271c <HAL_RCC_ClockConfig+0x264>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e0be      	b.n	800270e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002590:	f000 f8ce 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 8002594:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4a61      	ldr	r2, [pc, #388]	@ (8002720 <HAL_RCC_ClockConfig+0x268>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d909      	bls.n	80025b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800259e:	4b5f      	ldr	r3, [pc, #380]	@ (800271c <HAL_RCC_ClockConfig+0x264>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025a6:	4a5d      	ldr	r2, [pc, #372]	@ (800271c <HAL_RCC_ClockConfig+0x264>)
 80025a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80025ae:	2380      	movs	r3, #128	@ 0x80
 80025b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025b2:	4b5a      	ldr	r3, [pc, #360]	@ (800271c <HAL_RCC_ClockConfig+0x264>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f023 0203 	bic.w	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	4957      	ldr	r1, [pc, #348]	@ (800271c <HAL_RCC_ClockConfig+0x264>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c4:	f7fe fe4e 	bl	8001264 <HAL_GetTick>
 80025c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ca:	e00a      	b.n	80025e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025cc:	f7fe fe4a 	bl	8001264 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025da:	4293      	cmp	r3, r2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e095      	b.n	800270e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e2:	4b4e      	ldr	r3, [pc, #312]	@ (800271c <HAL_RCC_ClockConfig+0x264>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 020c 	and.w	r2, r3, #12
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d1eb      	bne.n	80025cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d023      	beq.n	8002648 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800260c:	4b43      	ldr	r3, [pc, #268]	@ (800271c <HAL_RCC_ClockConfig+0x264>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	4a42      	ldr	r2, [pc, #264]	@ (800271c <HAL_RCC_ClockConfig+0x264>)
 8002612:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002616:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b00      	cmp	r3, #0
 8002622:	d007      	beq.n	8002634 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002624:	4b3d      	ldr	r3, [pc, #244]	@ (800271c <HAL_RCC_ClockConfig+0x264>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800262c:	4a3b      	ldr	r2, [pc, #236]	@ (800271c <HAL_RCC_ClockConfig+0x264>)
 800262e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002632:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002634:	4b39      	ldr	r3, [pc, #228]	@ (800271c <HAL_RCC_ClockConfig+0x264>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	4936      	ldr	r1, [pc, #216]	@ (800271c <HAL_RCC_ClockConfig+0x264>)
 8002642:	4313      	orrs	r3, r2
 8002644:	608b      	str	r3, [r1, #8]
 8002646:	e008      	b.n	800265a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	2b80      	cmp	r3, #128	@ 0x80
 800264c:	d105      	bne.n	800265a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800264e:	4b33      	ldr	r3, [pc, #204]	@ (800271c <HAL_RCC_ClockConfig+0x264>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	4a32      	ldr	r2, [pc, #200]	@ (800271c <HAL_RCC_ClockConfig+0x264>)
 8002654:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002658:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800265a:	4b2f      	ldr	r3, [pc, #188]	@ (8002718 <HAL_RCC_ClockConfig+0x260>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d21d      	bcs.n	80026a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002668:	4b2b      	ldr	r3, [pc, #172]	@ (8002718 <HAL_RCC_ClockConfig+0x260>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f023 020f 	bic.w	r2, r3, #15
 8002670:	4929      	ldr	r1, [pc, #164]	@ (8002718 <HAL_RCC_ClockConfig+0x260>)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	4313      	orrs	r3, r2
 8002676:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002678:	f7fe fdf4 	bl	8001264 <HAL_GetTick>
 800267c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267e:	e00a      	b.n	8002696 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002680:	f7fe fdf0 	bl	8001264 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800268e:	4293      	cmp	r3, r2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e03b      	b.n	800270e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002696:	4b20      	ldr	r3, [pc, #128]	@ (8002718 <HAL_RCC_ClockConfig+0x260>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d1ed      	bne.n	8002680 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b0:	4b1a      	ldr	r3, [pc, #104]	@ (800271c <HAL_RCC_ClockConfig+0x264>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	4917      	ldr	r1, [pc, #92]	@ (800271c <HAL_RCC_ClockConfig+0x264>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d009      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ce:	4b13      	ldr	r3, [pc, #76]	@ (800271c <HAL_RCC_ClockConfig+0x264>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	490f      	ldr	r1, [pc, #60]	@ (800271c <HAL_RCC_ClockConfig+0x264>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026e2:	f000 f825 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 80026e6:	4602      	mov	r2, r0
 80026e8:	4b0c      	ldr	r3, [pc, #48]	@ (800271c <HAL_RCC_ClockConfig+0x264>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	490c      	ldr	r1, [pc, #48]	@ (8002724 <HAL_RCC_ClockConfig+0x26c>)
 80026f4:	5ccb      	ldrb	r3, [r1, r3]
 80026f6:	f003 031f 	and.w	r3, r3, #31
 80026fa:	fa22 f303 	lsr.w	r3, r2, r3
 80026fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002728 <HAL_RCC_ClockConfig+0x270>)
 8002700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002702:	4b0a      	ldr	r3, [pc, #40]	@ (800272c <HAL_RCC_ClockConfig+0x274>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe fd60 	bl	80011cc <HAL_InitTick>
 800270c:	4603      	mov	r3, r0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40022000 	.word	0x40022000
 800271c:	40021000 	.word	0x40021000
 8002720:	04c4b400 	.word	0x04c4b400
 8002724:	08004ab4 	.word	0x08004ab4
 8002728:	20000000 	.word	0x20000000
 800272c:	20000004 	.word	0x20000004

08002730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002736:	4b2c      	ldr	r3, [pc, #176]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	2b04      	cmp	r3, #4
 8002740:	d102      	bne.n	8002748 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002742:	4b2a      	ldr	r3, [pc, #168]	@ (80027ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	e047      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002748:	4b27      	ldr	r3, [pc, #156]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 030c 	and.w	r3, r3, #12
 8002750:	2b08      	cmp	r3, #8
 8002752:	d102      	bne.n	800275a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002754:	4b26      	ldr	r3, [pc, #152]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	e03e      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800275a:	4b23      	ldr	r3, [pc, #140]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 030c 	and.w	r3, r3, #12
 8002762:	2b0c      	cmp	r3, #12
 8002764:	d136      	bne.n	80027d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002766:	4b20      	ldr	r3, [pc, #128]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002770:	4b1d      	ldr	r3, [pc, #116]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	091b      	lsrs	r3, r3, #4
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	3301      	adds	r3, #1
 800277c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2b03      	cmp	r3, #3
 8002782:	d10c      	bne.n	800279e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002784:	4a1a      	ldr	r2, [pc, #104]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	fbb2 f3f3 	udiv	r3, r2, r3
 800278c:	4a16      	ldr	r2, [pc, #88]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800278e:	68d2      	ldr	r2, [r2, #12]
 8002790:	0a12      	lsrs	r2, r2, #8
 8002792:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002796:	fb02 f303 	mul.w	r3, r2, r3
 800279a:	617b      	str	r3, [r7, #20]
      break;
 800279c:	e00c      	b.n	80027b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800279e:	4a13      	ldr	r2, [pc, #76]	@ (80027ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a6:	4a10      	ldr	r2, [pc, #64]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027a8:	68d2      	ldr	r2, [r2, #12]
 80027aa:	0a12      	lsrs	r2, r2, #8
 80027ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80027b0:	fb02 f303 	mul.w	r3, r2, r3
 80027b4:	617b      	str	r3, [r7, #20]
      break;
 80027b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027b8:	4b0b      	ldr	r3, [pc, #44]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	0e5b      	lsrs	r3, r3, #25
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	3301      	adds	r3, #1
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	e001      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80027d8:	693b      	ldr	r3, [r7, #16]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	371c      	adds	r7, #28
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40021000 	.word	0x40021000
 80027ec:	00f42400 	.word	0x00f42400
 80027f0:	007a1200 	.word	0x007a1200

080027f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027f8:	4b03      	ldr	r3, [pc, #12]	@ (8002808 <HAL_RCC_GetHCLKFreq+0x14>)
 80027fa:	681b      	ldr	r3, [r3, #0]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	20000000 	.word	0x20000000

0800280c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002810:	f7ff fff0 	bl	80027f4 <HAL_RCC_GetHCLKFreq>
 8002814:	4602      	mov	r2, r0
 8002816:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	0a1b      	lsrs	r3, r3, #8
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	4904      	ldr	r1, [pc, #16]	@ (8002834 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002822:	5ccb      	ldrb	r3, [r1, r3]
 8002824:	f003 031f 	and.w	r3, r3, #31
 8002828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800282c:	4618      	mov	r0, r3
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40021000 	.word	0x40021000
 8002834:	08004ac4 	.word	0x08004ac4

08002838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800283c:	f7ff ffda 	bl	80027f4 <HAL_RCC_GetHCLKFreq>
 8002840:	4602      	mov	r2, r0
 8002842:	4b06      	ldr	r3, [pc, #24]	@ (800285c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	0adb      	lsrs	r3, r3, #11
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	4904      	ldr	r1, [pc, #16]	@ (8002860 <HAL_RCC_GetPCLK2Freq+0x28>)
 800284e:	5ccb      	ldrb	r3, [r1, r3]
 8002850:	f003 031f 	and.w	r3, r3, #31
 8002854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000
 8002860:	08004ac4 	.word	0x08004ac4

08002864 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800286a:	4b1e      	ldr	r3, [pc, #120]	@ (80028e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002874:	4b1b      	ldr	r3, [pc, #108]	@ (80028e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	091b      	lsrs	r3, r3, #4
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	3301      	adds	r3, #1
 8002880:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	2b03      	cmp	r3, #3
 8002886:	d10c      	bne.n	80028a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002888:	4a17      	ldr	r2, [pc, #92]	@ (80028e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002890:	4a14      	ldr	r2, [pc, #80]	@ (80028e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002892:	68d2      	ldr	r2, [r2, #12]
 8002894:	0a12      	lsrs	r2, r2, #8
 8002896:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800289a:	fb02 f303 	mul.w	r3, r2, r3
 800289e:	617b      	str	r3, [r7, #20]
    break;
 80028a0:	e00c      	b.n	80028bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028a2:	4a12      	ldr	r2, [pc, #72]	@ (80028ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028aa:	4a0e      	ldr	r2, [pc, #56]	@ (80028e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028ac:	68d2      	ldr	r2, [r2, #12]
 80028ae:	0a12      	lsrs	r2, r2, #8
 80028b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028b4:	fb02 f303 	mul.w	r3, r2, r3
 80028b8:	617b      	str	r3, [r7, #20]
    break;
 80028ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028bc:	4b09      	ldr	r3, [pc, #36]	@ (80028e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	0e5b      	lsrs	r3, r3, #25
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	3301      	adds	r3, #1
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80028d6:	687b      	ldr	r3, [r7, #4]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	371c      	adds	r7, #28
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	40021000 	.word	0x40021000
 80028e8:	007a1200 	.word	0x007a1200
 80028ec:	00f42400 	.word	0x00f42400

080028f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028f8:	2300      	movs	r3, #0
 80028fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028fc:	2300      	movs	r3, #0
 80028fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 8098 	beq.w	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800290e:	2300      	movs	r3, #0
 8002910:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002912:	4b43      	ldr	r3, [pc, #268]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10d      	bne.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800291e:	4b40      	ldr	r3, [pc, #256]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002922:	4a3f      	ldr	r2, [pc, #252]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002928:	6593      	str	r3, [r2, #88]	@ 0x58
 800292a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800292c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800292e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002936:	2301      	movs	r3, #1
 8002938:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800293a:	4b3a      	ldr	r3, [pc, #232]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a39      	ldr	r2, [pc, #228]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002940:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002944:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002946:	f7fe fc8d 	bl	8001264 <HAL_GetTick>
 800294a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800294c:	e009      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800294e:	f7fe fc89 	bl	8001264 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d902      	bls.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	74fb      	strb	r3, [r7, #19]
        break;
 8002960:	e005      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002962:	4b30      	ldr	r3, [pc, #192]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0ef      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800296e:	7cfb      	ldrb	r3, [r7, #19]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d159      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002974:	4b2a      	ldr	r3, [pc, #168]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800297a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800297e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d01e      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	429a      	cmp	r2, r3
 800298e:	d019      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002990:	4b23      	ldr	r3, [pc, #140]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002996:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800299a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800299c:	4b20      	ldr	r3, [pc, #128]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b2:	4a1b      	ldr	r2, [pc, #108]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029bc:	4a18      	ldr	r2, [pc, #96]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d016      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ce:	f7fe fc49 	bl	8001264 <HAL_GetTick>
 80029d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029d4:	e00b      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d6:	f7fe fc45 	bl	8001264 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d902      	bls.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	74fb      	strb	r3, [r7, #19]
            break;
 80029ec:	e006      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0ec      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80029fc:	7cfb      	ldrb	r3, [r7, #19]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10b      	bne.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a02:	4b07      	ldr	r3, [pc, #28]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a10:	4903      	ldr	r1, [pc, #12]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002a18:	e008      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a1a:	7cfb      	ldrb	r3, [r7, #19]
 8002a1c:	74bb      	strb	r3, [r7, #18]
 8002a1e:	e005      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a28:	7cfb      	ldrb	r3, [r7, #19]
 8002a2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a2c:	7c7b      	ldrb	r3, [r7, #17]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d105      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a32:	4ba6      	ldr	r3, [pc, #664]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a36:	4aa5      	ldr	r2, [pc, #660]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a3c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a4a:	4ba0      	ldr	r3, [pc, #640]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a50:	f023 0203 	bic.w	r2, r3, #3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	499c      	ldr	r1, [pc, #624]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00a      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a6c:	4b97      	ldr	r3, [pc, #604]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a72:	f023 020c 	bic.w	r2, r3, #12
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	4994      	ldr	r1, [pc, #592]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00a      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a8e:	4b8f      	ldr	r3, [pc, #572]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a94:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	498b      	ldr	r1, [pc, #556]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00a      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ab0:	4b86      	ldr	r3, [pc, #536]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	4983      	ldr	r1, [pc, #524]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0320 	and.w	r3, r3, #32
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ad2:	4b7e      	ldr	r3, [pc, #504]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	497a      	ldr	r1, [pc, #488]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00a      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002af4:	4b75      	ldr	r3, [pc, #468]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	4972      	ldr	r1, [pc, #456]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b16:	4b6d      	ldr	r3, [pc, #436]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b1c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	4969      	ldr	r1, [pc, #420]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00a      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b38:	4b64      	ldr	r3, [pc, #400]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	4961      	ldr	r1, [pc, #388]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b5a:	4b5c      	ldr	r3, [pc, #368]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b68:	4958      	ldr	r1, [pc, #352]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d015      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b7c:	4b53      	ldr	r3, [pc, #332]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b8a:	4950      	ldr	r1, [pc, #320]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b9a:	d105      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b9c:	4b4b      	ldr	r3, [pc, #300]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	4a4a      	ldr	r2, [pc, #296]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ba2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ba6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d015      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bb4:	4b45      	ldr	r3, [pc, #276]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc2:	4942      	ldr	r1, [pc, #264]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bd2:	d105      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bd4:	4b3d      	ldr	r3, [pc, #244]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	4a3c      	ldr	r2, [pc, #240]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bde:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d015      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bec:	4b37      	ldr	r3, [pc, #220]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfa:	4934      	ldr	r1, [pc, #208]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c0a:	d105      	bne.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c0c:	4b2f      	ldr	r3, [pc, #188]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	4a2e      	ldr	r2, [pc, #184]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c16:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d015      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c24:	4b29      	ldr	r3, [pc, #164]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c32:	4926      	ldr	r1, [pc, #152]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c42:	d105      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c44:	4b21      	ldr	r3, [pc, #132]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4a20      	ldr	r2, [pc, #128]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c4e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d015      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c6a:	4918      	ldr	r1, [pc, #96]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c7a:	d105      	bne.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c7c:	4b13      	ldr	r3, [pc, #76]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	4a12      	ldr	r2, [pc, #72]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c86:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d015      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c94:	4b0d      	ldr	r3, [pc, #52]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c9a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca2:	490a      	ldr	r1, [pc, #40]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cb2:	d105      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002cb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	4a04      	ldr	r2, [pc, #16]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cbe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002cc0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40021000 	.word	0x40021000

08002cd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e042      	b.n	8002d68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d106      	bne.n	8002cfa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7fe f9a1 	bl	800103c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2224      	movs	r2, #36	@ 0x24
 8002cfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0201 	bic.w	r2, r2, #1
 8002d10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d002      	beq.n	8002d20 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fbf8 	bl	8003510 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f929 	bl	8002f78 <UART_SetConfig>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e01b      	b.n	8002d68 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0201 	orr.w	r2, r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 fc77 	bl	8003654 <UART_CheckIdleState>
 8002d66:	4603      	mov	r3, r0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08a      	sub	sp, #40	@ 0x28
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	603b      	str	r3, [r7, #0]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d86:	2b20      	cmp	r3, #32
 8002d88:	d17b      	bne.n	8002e82 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <HAL_UART_Transmit+0x26>
 8002d90:	88fb      	ldrh	r3, [r7, #6]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e074      	b.n	8002e84 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2221      	movs	r2, #33	@ 0x21
 8002da6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002daa:	f7fe fa5b 	bl	8001264 <HAL_GetTick>
 8002dae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	88fa      	ldrh	r2, [r7, #6]
 8002db4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	88fa      	ldrh	r2, [r7, #6]
 8002dbc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dc8:	d108      	bne.n	8002ddc <HAL_UART_Transmit+0x6c>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d104      	bne.n	8002ddc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	61bb      	str	r3, [r7, #24]
 8002dda:	e003      	b.n	8002de4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002de4:	e030      	b.n	8002e48 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2200      	movs	r2, #0
 8002dee:	2180      	movs	r1, #128	@ 0x80
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 fcd9 	bl	80037a8 <UART_WaitOnFlagUntilTimeout>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e03d      	b.n	8002e84 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10b      	bne.n	8002e26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e1c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	3302      	adds	r3, #2
 8002e22:	61bb      	str	r3, [r7, #24]
 8002e24:	e007      	b.n	8002e36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	781a      	ldrb	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	3301      	adds	r3, #1
 8002e34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1c8      	bne.n	8002de6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2140      	movs	r1, #64	@ 0x40
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 fca2 	bl	80037a8 <UART_WaitOnFlagUntilTimeout>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e006      	b.n	8002e84 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	e000      	b.n	8002e84 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002e82:	2302      	movs	r3, #2
  }
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3720      	adds	r7, #32
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	@ 0x28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	4613      	mov	r3, r2
 8002e98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	d137      	bne.n	8002f14 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <HAL_UART_Receive_DMA+0x24>
 8002eaa:	88fb      	ldrh	r3, [r7, #6]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e030      	b.n	8002f16 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a18      	ldr	r2, [pc, #96]	@ (8002f20 <HAL_UART_Receive_DMA+0x94>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d01f      	beq.n	8002f04 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d018      	beq.n	8002f04 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	e853 3f00 	ldrex	r3, [r3]
 8002ede:	613b      	str	r3, [r7, #16]
   return(result);
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	461a      	mov	r2, r3
 8002eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef0:	623b      	str	r3, [r7, #32]
 8002ef2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef4:	69f9      	ldr	r1, [r7, #28]
 8002ef6:	6a3a      	ldr	r2, [r7, #32]
 8002ef8:	e841 2300 	strex	r3, r2, [r1]
 8002efc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1e6      	bne.n	8002ed2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002f04:	88fb      	ldrh	r3, [r7, #6]
 8002f06:	461a      	mov	r2, r3
 8002f08:	68b9      	ldr	r1, [r7, #8]
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 fcba 	bl	8003884 <UART_Start_Receive_DMA>
 8002f10:	4603      	mov	r3, r0
 8002f12:	e000      	b.n	8002f16 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f14:	2302      	movs	r3, #2
  }
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3728      	adds	r7, #40	@ 0x28
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40008000 	.word	0x40008000

08002f24 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f7c:	b08c      	sub	sp, #48	@ 0x30
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	431a      	orrs	r2, r3
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	4bab      	ldr	r3, [pc, #684]	@ (8003254 <UART_SetConfig+0x2dc>)
 8002fa8:	4013      	ands	r3, r2
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fb0:	430b      	orrs	r3, r1
 8002fb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4aa0      	ldr	r2, [pc, #640]	@ (8003258 <UART_SetConfig+0x2e0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d004      	beq.n	8002fe4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002fee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	6812      	ldr	r2, [r2, #0]
 8002ff6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003002:	f023 010f 	bic.w	r1, r3, #15
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a91      	ldr	r2, [pc, #580]	@ (800325c <UART_SetConfig+0x2e4>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d125      	bne.n	8003068 <UART_SetConfig+0xf0>
 800301c:	4b90      	ldr	r3, [pc, #576]	@ (8003260 <UART_SetConfig+0x2e8>)
 800301e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	2b03      	cmp	r3, #3
 8003028:	d81a      	bhi.n	8003060 <UART_SetConfig+0xe8>
 800302a:	a201      	add	r2, pc, #4	@ (adr r2, 8003030 <UART_SetConfig+0xb8>)
 800302c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003030:	08003041 	.word	0x08003041
 8003034:	08003051 	.word	0x08003051
 8003038:	08003049 	.word	0x08003049
 800303c:	08003059 	.word	0x08003059
 8003040:	2301      	movs	r3, #1
 8003042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003046:	e0d6      	b.n	80031f6 <UART_SetConfig+0x27e>
 8003048:	2302      	movs	r3, #2
 800304a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800304e:	e0d2      	b.n	80031f6 <UART_SetConfig+0x27e>
 8003050:	2304      	movs	r3, #4
 8003052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003056:	e0ce      	b.n	80031f6 <UART_SetConfig+0x27e>
 8003058:	2308      	movs	r3, #8
 800305a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800305e:	e0ca      	b.n	80031f6 <UART_SetConfig+0x27e>
 8003060:	2310      	movs	r3, #16
 8003062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003066:	e0c6      	b.n	80031f6 <UART_SetConfig+0x27e>
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a7d      	ldr	r2, [pc, #500]	@ (8003264 <UART_SetConfig+0x2ec>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d138      	bne.n	80030e4 <UART_SetConfig+0x16c>
 8003072:	4b7b      	ldr	r3, [pc, #492]	@ (8003260 <UART_SetConfig+0x2e8>)
 8003074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003078:	f003 030c 	and.w	r3, r3, #12
 800307c:	2b0c      	cmp	r3, #12
 800307e:	d82d      	bhi.n	80030dc <UART_SetConfig+0x164>
 8003080:	a201      	add	r2, pc, #4	@ (adr r2, 8003088 <UART_SetConfig+0x110>)
 8003082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003086:	bf00      	nop
 8003088:	080030bd 	.word	0x080030bd
 800308c:	080030dd 	.word	0x080030dd
 8003090:	080030dd 	.word	0x080030dd
 8003094:	080030dd 	.word	0x080030dd
 8003098:	080030cd 	.word	0x080030cd
 800309c:	080030dd 	.word	0x080030dd
 80030a0:	080030dd 	.word	0x080030dd
 80030a4:	080030dd 	.word	0x080030dd
 80030a8:	080030c5 	.word	0x080030c5
 80030ac:	080030dd 	.word	0x080030dd
 80030b0:	080030dd 	.word	0x080030dd
 80030b4:	080030dd 	.word	0x080030dd
 80030b8:	080030d5 	.word	0x080030d5
 80030bc:	2300      	movs	r3, #0
 80030be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030c2:	e098      	b.n	80031f6 <UART_SetConfig+0x27e>
 80030c4:	2302      	movs	r3, #2
 80030c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030ca:	e094      	b.n	80031f6 <UART_SetConfig+0x27e>
 80030cc:	2304      	movs	r3, #4
 80030ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030d2:	e090      	b.n	80031f6 <UART_SetConfig+0x27e>
 80030d4:	2308      	movs	r3, #8
 80030d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030da:	e08c      	b.n	80031f6 <UART_SetConfig+0x27e>
 80030dc:	2310      	movs	r3, #16
 80030de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030e2:	e088      	b.n	80031f6 <UART_SetConfig+0x27e>
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a5f      	ldr	r2, [pc, #380]	@ (8003268 <UART_SetConfig+0x2f0>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d125      	bne.n	800313a <UART_SetConfig+0x1c2>
 80030ee:	4b5c      	ldr	r3, [pc, #368]	@ (8003260 <UART_SetConfig+0x2e8>)
 80030f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80030f8:	2b30      	cmp	r3, #48	@ 0x30
 80030fa:	d016      	beq.n	800312a <UART_SetConfig+0x1b2>
 80030fc:	2b30      	cmp	r3, #48	@ 0x30
 80030fe:	d818      	bhi.n	8003132 <UART_SetConfig+0x1ba>
 8003100:	2b20      	cmp	r3, #32
 8003102:	d00a      	beq.n	800311a <UART_SetConfig+0x1a2>
 8003104:	2b20      	cmp	r3, #32
 8003106:	d814      	bhi.n	8003132 <UART_SetConfig+0x1ba>
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <UART_SetConfig+0x19a>
 800310c:	2b10      	cmp	r3, #16
 800310e:	d008      	beq.n	8003122 <UART_SetConfig+0x1aa>
 8003110:	e00f      	b.n	8003132 <UART_SetConfig+0x1ba>
 8003112:	2300      	movs	r3, #0
 8003114:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003118:	e06d      	b.n	80031f6 <UART_SetConfig+0x27e>
 800311a:	2302      	movs	r3, #2
 800311c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003120:	e069      	b.n	80031f6 <UART_SetConfig+0x27e>
 8003122:	2304      	movs	r3, #4
 8003124:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003128:	e065      	b.n	80031f6 <UART_SetConfig+0x27e>
 800312a:	2308      	movs	r3, #8
 800312c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003130:	e061      	b.n	80031f6 <UART_SetConfig+0x27e>
 8003132:	2310      	movs	r3, #16
 8003134:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003138:	e05d      	b.n	80031f6 <UART_SetConfig+0x27e>
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a4b      	ldr	r2, [pc, #300]	@ (800326c <UART_SetConfig+0x2f4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d125      	bne.n	8003190 <UART_SetConfig+0x218>
 8003144:	4b46      	ldr	r3, [pc, #280]	@ (8003260 <UART_SetConfig+0x2e8>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800314a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800314e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003150:	d016      	beq.n	8003180 <UART_SetConfig+0x208>
 8003152:	2bc0      	cmp	r3, #192	@ 0xc0
 8003154:	d818      	bhi.n	8003188 <UART_SetConfig+0x210>
 8003156:	2b80      	cmp	r3, #128	@ 0x80
 8003158:	d00a      	beq.n	8003170 <UART_SetConfig+0x1f8>
 800315a:	2b80      	cmp	r3, #128	@ 0x80
 800315c:	d814      	bhi.n	8003188 <UART_SetConfig+0x210>
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <UART_SetConfig+0x1f0>
 8003162:	2b40      	cmp	r3, #64	@ 0x40
 8003164:	d008      	beq.n	8003178 <UART_SetConfig+0x200>
 8003166:	e00f      	b.n	8003188 <UART_SetConfig+0x210>
 8003168:	2300      	movs	r3, #0
 800316a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800316e:	e042      	b.n	80031f6 <UART_SetConfig+0x27e>
 8003170:	2302      	movs	r3, #2
 8003172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003176:	e03e      	b.n	80031f6 <UART_SetConfig+0x27e>
 8003178:	2304      	movs	r3, #4
 800317a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800317e:	e03a      	b.n	80031f6 <UART_SetConfig+0x27e>
 8003180:	2308      	movs	r3, #8
 8003182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003186:	e036      	b.n	80031f6 <UART_SetConfig+0x27e>
 8003188:	2310      	movs	r3, #16
 800318a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800318e:	e032      	b.n	80031f6 <UART_SetConfig+0x27e>
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a30      	ldr	r2, [pc, #192]	@ (8003258 <UART_SetConfig+0x2e0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d12a      	bne.n	80031f0 <UART_SetConfig+0x278>
 800319a:	4b31      	ldr	r3, [pc, #196]	@ (8003260 <UART_SetConfig+0x2e8>)
 800319c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80031a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031a8:	d01a      	beq.n	80031e0 <UART_SetConfig+0x268>
 80031aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031ae:	d81b      	bhi.n	80031e8 <UART_SetConfig+0x270>
 80031b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031b4:	d00c      	beq.n	80031d0 <UART_SetConfig+0x258>
 80031b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031ba:	d815      	bhi.n	80031e8 <UART_SetConfig+0x270>
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <UART_SetConfig+0x250>
 80031c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031c4:	d008      	beq.n	80031d8 <UART_SetConfig+0x260>
 80031c6:	e00f      	b.n	80031e8 <UART_SetConfig+0x270>
 80031c8:	2300      	movs	r3, #0
 80031ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ce:	e012      	b.n	80031f6 <UART_SetConfig+0x27e>
 80031d0:	2302      	movs	r3, #2
 80031d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031d6:	e00e      	b.n	80031f6 <UART_SetConfig+0x27e>
 80031d8:	2304      	movs	r3, #4
 80031da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031de:	e00a      	b.n	80031f6 <UART_SetConfig+0x27e>
 80031e0:	2308      	movs	r3, #8
 80031e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031e6:	e006      	b.n	80031f6 <UART_SetConfig+0x27e>
 80031e8:	2310      	movs	r3, #16
 80031ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ee:	e002      	b.n	80031f6 <UART_SetConfig+0x27e>
 80031f0:	2310      	movs	r3, #16
 80031f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a17      	ldr	r2, [pc, #92]	@ (8003258 <UART_SetConfig+0x2e0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	f040 80a8 	bne.w	8003352 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003202:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003206:	2b08      	cmp	r3, #8
 8003208:	d834      	bhi.n	8003274 <UART_SetConfig+0x2fc>
 800320a:	a201      	add	r2, pc, #4	@ (adr r2, 8003210 <UART_SetConfig+0x298>)
 800320c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003210:	08003235 	.word	0x08003235
 8003214:	08003275 	.word	0x08003275
 8003218:	0800323d 	.word	0x0800323d
 800321c:	08003275 	.word	0x08003275
 8003220:	08003243 	.word	0x08003243
 8003224:	08003275 	.word	0x08003275
 8003228:	08003275 	.word	0x08003275
 800322c:	08003275 	.word	0x08003275
 8003230:	0800324b 	.word	0x0800324b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003234:	f7ff faea 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8003238:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800323a:	e021      	b.n	8003280 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800323c:	4b0c      	ldr	r3, [pc, #48]	@ (8003270 <UART_SetConfig+0x2f8>)
 800323e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003240:	e01e      	b.n	8003280 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003242:	f7ff fa75 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 8003246:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003248:	e01a      	b.n	8003280 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800324a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800324e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003250:	e016      	b.n	8003280 <UART_SetConfig+0x308>
 8003252:	bf00      	nop
 8003254:	cfff69f3 	.word	0xcfff69f3
 8003258:	40008000 	.word	0x40008000
 800325c:	40013800 	.word	0x40013800
 8003260:	40021000 	.word	0x40021000
 8003264:	40004400 	.word	0x40004400
 8003268:	40004800 	.word	0x40004800
 800326c:	40004c00 	.word	0x40004c00
 8003270:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800327e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 812a 	beq.w	80034dc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328c:	4a9e      	ldr	r2, [pc, #632]	@ (8003508 <UART_SetConfig+0x590>)
 800328e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003292:	461a      	mov	r2, r3
 8003294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003296:	fbb3 f3f2 	udiv	r3, r3, r2
 800329a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	4613      	mov	r3, r2
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	4413      	add	r3, r2
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d305      	bcc.n	80032b8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d903      	bls.n	80032c0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80032be:	e10d      	b.n	80034dc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c2:	2200      	movs	r2, #0
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	60fa      	str	r2, [r7, #12]
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032cc:	4a8e      	ldr	r2, [pc, #568]	@ (8003508 <UART_SetConfig+0x590>)
 80032ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	2200      	movs	r2, #0
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	607a      	str	r2, [r7, #4]
 80032da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032e2:	f7fc fffd 	bl	80002e0 <__aeabi_uldivmod>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4610      	mov	r0, r2
 80032ec:	4619      	mov	r1, r3
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	020b      	lsls	r3, r1, #8
 80032f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80032fc:	0202      	lsls	r2, r0, #8
 80032fe:	6979      	ldr	r1, [r7, #20]
 8003300:	6849      	ldr	r1, [r1, #4]
 8003302:	0849      	lsrs	r1, r1, #1
 8003304:	2000      	movs	r0, #0
 8003306:	460c      	mov	r4, r1
 8003308:	4605      	mov	r5, r0
 800330a:	eb12 0804 	adds.w	r8, r2, r4
 800330e:	eb43 0905 	adc.w	r9, r3, r5
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	469a      	mov	sl, r3
 800331a:	4693      	mov	fp, r2
 800331c:	4652      	mov	r2, sl
 800331e:	465b      	mov	r3, fp
 8003320:	4640      	mov	r0, r8
 8003322:	4649      	mov	r1, r9
 8003324:	f7fc ffdc 	bl	80002e0 <__aeabi_uldivmod>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4613      	mov	r3, r2
 800332e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003336:	d308      	bcc.n	800334a <UART_SetConfig+0x3d2>
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800333e:	d204      	bcs.n	800334a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6a3a      	ldr	r2, [r7, #32]
 8003346:	60da      	str	r2, [r3, #12]
 8003348:	e0c8      	b.n	80034dc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003350:	e0c4      	b.n	80034dc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800335a:	d167      	bne.n	800342c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800335c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003360:	2b08      	cmp	r3, #8
 8003362:	d828      	bhi.n	80033b6 <UART_SetConfig+0x43e>
 8003364:	a201      	add	r2, pc, #4	@ (adr r2, 800336c <UART_SetConfig+0x3f4>)
 8003366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336a:	bf00      	nop
 800336c:	08003391 	.word	0x08003391
 8003370:	08003399 	.word	0x08003399
 8003374:	080033a1 	.word	0x080033a1
 8003378:	080033b7 	.word	0x080033b7
 800337c:	080033a7 	.word	0x080033a7
 8003380:	080033b7 	.word	0x080033b7
 8003384:	080033b7 	.word	0x080033b7
 8003388:	080033b7 	.word	0x080033b7
 800338c:	080033af 	.word	0x080033af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003390:	f7ff fa3c 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8003394:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003396:	e014      	b.n	80033c2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003398:	f7ff fa4e 	bl	8002838 <HAL_RCC_GetPCLK2Freq>
 800339c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800339e:	e010      	b.n	80033c2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033a0:	4b5a      	ldr	r3, [pc, #360]	@ (800350c <UART_SetConfig+0x594>)
 80033a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033a4:	e00d      	b.n	80033c2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033a6:	f7ff f9c3 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 80033aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033ac:	e009      	b.n	80033c2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033b4:	e005      	b.n	80033c2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80033c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 8089 	beq.w	80034dc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ce:	4a4e      	ldr	r2, [pc, #312]	@ (8003508 <UART_SetConfig+0x590>)
 80033d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033d4:	461a      	mov	r2, r3
 80033d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80033dc:	005a      	lsls	r2, r3, #1
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	085b      	lsrs	r3, r3, #1
 80033e4:	441a      	add	r2, r3
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	2b0f      	cmp	r3, #15
 80033f4:	d916      	bls.n	8003424 <UART_SetConfig+0x4ac>
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033fc:	d212      	bcs.n	8003424 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	b29b      	uxth	r3, r3
 8003402:	f023 030f 	bic.w	r3, r3, #15
 8003406:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	085b      	lsrs	r3, r3, #1
 800340c:	b29b      	uxth	r3, r3
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	b29a      	uxth	r2, r3
 8003414:	8bfb      	ldrh	r3, [r7, #30]
 8003416:	4313      	orrs	r3, r2
 8003418:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	8bfa      	ldrh	r2, [r7, #30]
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	e05b      	b.n	80034dc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800342a:	e057      	b.n	80034dc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800342c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003430:	2b08      	cmp	r3, #8
 8003432:	d828      	bhi.n	8003486 <UART_SetConfig+0x50e>
 8003434:	a201      	add	r2, pc, #4	@ (adr r2, 800343c <UART_SetConfig+0x4c4>)
 8003436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343a:	bf00      	nop
 800343c:	08003461 	.word	0x08003461
 8003440:	08003469 	.word	0x08003469
 8003444:	08003471 	.word	0x08003471
 8003448:	08003487 	.word	0x08003487
 800344c:	08003477 	.word	0x08003477
 8003450:	08003487 	.word	0x08003487
 8003454:	08003487 	.word	0x08003487
 8003458:	08003487 	.word	0x08003487
 800345c:	0800347f 	.word	0x0800347f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003460:	f7ff f9d4 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8003464:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003466:	e014      	b.n	8003492 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003468:	f7ff f9e6 	bl	8002838 <HAL_RCC_GetPCLK2Freq>
 800346c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800346e:	e010      	b.n	8003492 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003470:	4b26      	ldr	r3, [pc, #152]	@ (800350c <UART_SetConfig+0x594>)
 8003472:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003474:	e00d      	b.n	8003492 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003476:	f7ff f95b 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 800347a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800347c:	e009      	b.n	8003492 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800347e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003482:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003484:	e005      	b.n	8003492 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003486:	2300      	movs	r3, #0
 8003488:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003490:	bf00      	nop
    }

    if (pclk != 0U)
 8003492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003494:	2b00      	cmp	r3, #0
 8003496:	d021      	beq.n	80034dc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349c:	4a1a      	ldr	r2, [pc, #104]	@ (8003508 <UART_SetConfig+0x590>)
 800349e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034a2:	461a      	mov	r2, r3
 80034a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	085b      	lsrs	r3, r3, #1
 80034b0:	441a      	add	r2, r3
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	2b0f      	cmp	r3, #15
 80034c0:	d909      	bls.n	80034d6 <UART_SetConfig+0x55e>
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034c8:	d205      	bcs.n	80034d6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	60da      	str	r2, [r3, #12]
 80034d4:	e002      	b.n	80034dc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	2201      	movs	r2, #1
 80034e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2200      	movs	r2, #0
 80034f0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2200      	movs	r2, #0
 80034f6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80034f8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3730      	adds	r7, #48	@ 0x30
 8003500:	46bd      	mov	sp, r7
 8003502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003506:	bf00      	nop
 8003508:	08004acc 	.word	0x08004acc
 800350c:	00f42400 	.word	0x00f42400

08003510 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00a      	beq.n	800357e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a4:	f003 0310 	and.w	r3, r3, #16
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d01a      	beq.n	8003626 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800360a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800360e:	d10a      	bne.n	8003626 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	605a      	str	r2, [r3, #4]
  }
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b098      	sub	sp, #96	@ 0x60
 8003658:	af02      	add	r7, sp, #8
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003664:	f7fd fdfe 	bl	8001264 <HAL_GetTick>
 8003668:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b08      	cmp	r3, #8
 8003676:	d12f      	bne.n	80036d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003678:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003680:	2200      	movs	r2, #0
 8003682:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f88e 	bl	80037a8 <UART_WaitOnFlagUntilTimeout>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d022      	beq.n	80036d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800369a:	e853 3f00 	ldrex	r3, [r3]
 800369e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	461a      	mov	r2, r3
 80036ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80036b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036b8:	e841 2300 	strex	r3, r2, [r1]
 80036bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80036be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1e6      	bne.n	8003692 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e063      	b.n	80037a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d149      	bne.n	800377a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ee:	2200      	movs	r2, #0
 80036f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f857 	bl	80037a8 <UART_WaitOnFlagUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d03c      	beq.n	800377a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003708:	e853 3f00 	ldrex	r3, [r3]
 800370c:	623b      	str	r3, [r7, #32]
   return(result);
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003714:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	461a      	mov	r2, r3
 800371c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800371e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003720:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003722:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003724:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003726:	e841 2300 	strex	r3, r2, [r1]
 800372a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800372c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1e6      	bne.n	8003700 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	3308      	adds	r3, #8
 8003738:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	e853 3f00 	ldrex	r3, [r3]
 8003740:	60fb      	str	r3, [r7, #12]
   return(result);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f023 0301 	bic.w	r3, r3, #1
 8003748:	64bb      	str	r3, [r7, #72]	@ 0x48
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	3308      	adds	r3, #8
 8003750:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003752:	61fa      	str	r2, [r7, #28]
 8003754:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003756:	69b9      	ldr	r1, [r7, #24]
 8003758:	69fa      	ldr	r2, [r7, #28]
 800375a:	e841 2300 	strex	r3, r2, [r1]
 800375e:	617b      	str	r3, [r7, #20]
   return(result);
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1e5      	bne.n	8003732 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2220      	movs	r2, #32
 800376a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e012      	b.n	80037a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2220      	movs	r2, #32
 800377e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2220      	movs	r2, #32
 8003786:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3758      	adds	r7, #88	@ 0x58
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	603b      	str	r3, [r7, #0]
 80037b4:	4613      	mov	r3, r2
 80037b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037b8:	e04f      	b.n	800385a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c0:	d04b      	beq.n	800385a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c2:	f7fd fd4f 	bl	8001264 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d302      	bcc.n	80037d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e04e      	b.n	800387a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d037      	beq.n	800385a <UART_WaitOnFlagUntilTimeout+0xb2>
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b80      	cmp	r3, #128	@ 0x80
 80037ee:	d034      	beq.n	800385a <UART_WaitOnFlagUntilTimeout+0xb2>
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b40      	cmp	r3, #64	@ 0x40
 80037f4:	d031      	beq.n	800385a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b08      	cmp	r3, #8
 8003802:	d110      	bne.n	8003826 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2208      	movs	r2, #8
 800380a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f920 	bl	8003a52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2208      	movs	r2, #8
 8003816:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e029      	b.n	800387a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003830:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003834:	d111      	bne.n	800385a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800383e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f906 	bl	8003a52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2220      	movs	r2, #32
 800384a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e00f      	b.n	800387a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	69da      	ldr	r2, [r3, #28]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4013      	ands	r3, r2
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	429a      	cmp	r2, r3
 8003868:	bf0c      	ite	eq
 800386a:	2301      	moveq	r3, #1
 800386c:	2300      	movne	r3, #0
 800386e:	b2db      	uxtb	r3, r3
 8003870:	461a      	mov	r2, r3
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	429a      	cmp	r2, r3
 8003876:	d0a0      	beq.n	80037ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b096      	sub	sp, #88	@ 0x58
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	4613      	mov	r3, r2
 8003890:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	88fa      	ldrh	r2, [r7, #6]
 800389c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2222      	movs	r2, #34	@ 0x22
 80038ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d02d      	beq.n	8003916 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038c0:	4a40      	ldr	r2, [pc, #256]	@ (80039c4 <UART_Start_Receive_DMA+0x140>)
 80038c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038ca:	4a3f      	ldr	r2, [pc, #252]	@ (80039c8 <UART_Start_Receive_DMA+0x144>)
 80038cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038d4:	4a3d      	ldr	r2, [pc, #244]	@ (80039cc <UART_Start_Receive_DMA+0x148>)
 80038d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038de:	2200      	movs	r2, #0
 80038e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3324      	adds	r3, #36	@ 0x24
 80038ee:	4619      	mov	r1, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f4:	461a      	mov	r2, r3
 80038f6:	88fb      	ldrh	r3, [r7, #6]
 80038f8:	f7fd fe9a 	bl	8001630 <HAL_DMA_Start_IT>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d009      	beq.n	8003916 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2210      	movs	r2, #16
 8003906:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2220      	movs	r2, #32
 800390e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e051      	b.n	80039ba <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d018      	beq.n	8003950 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003926:	e853 3f00 	ldrex	r3, [r3]
 800392a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800392c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800392e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003932:	657b      	str	r3, [r7, #84]	@ 0x54
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	461a      	mov	r2, r3
 800393a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800393c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800393e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003940:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003942:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003944:	e841 2300 	strex	r3, r2, [r1]
 8003948:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800394a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1e6      	bne.n	800391e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3308      	adds	r3, #8
 8003956:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800395a:	e853 3f00 	ldrex	r3, [r3]
 800395e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003962:	f043 0301 	orr.w	r3, r3, #1
 8003966:	653b      	str	r3, [r7, #80]	@ 0x50
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	3308      	adds	r3, #8
 800396e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003970:	637a      	str	r2, [r7, #52]	@ 0x34
 8003972:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003974:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003976:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003978:	e841 2300 	strex	r3, r2, [r1]
 800397c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800397e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1e5      	bne.n	8003950 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	3308      	adds	r3, #8
 800398a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	e853 3f00 	ldrex	r3, [r3]
 8003992:	613b      	str	r3, [r7, #16]
   return(result);
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800399a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3308      	adds	r3, #8
 80039a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039a4:	623a      	str	r2, [r7, #32]
 80039a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a8:	69f9      	ldr	r1, [r7, #28]
 80039aa:	6a3a      	ldr	r2, [r7, #32]
 80039ac:	e841 2300 	strex	r3, r2, [r1]
 80039b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1e5      	bne.n	8003984 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3758      	adds	r7, #88	@ 0x58
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	08003b1f 	.word	0x08003b1f
 80039c8:	08003c4b 	.word	0x08003c4b
 80039cc:	08003c89 	.word	0x08003c89

080039d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b08f      	sub	sp, #60	@ 0x3c
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	e853 3f00 	ldrex	r3, [r3]
 80039e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80039ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	461a      	mov	r2, r3
 80039f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039f8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039fe:	e841 2300 	strex	r3, r2, [r1]
 8003a02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1e6      	bne.n	80039d8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3308      	adds	r3, #8
 8003a10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	e853 3f00 	ldrex	r3, [r3]
 8003a18:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003a20:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3308      	adds	r3, #8
 8003a28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a2a:	61ba      	str	r2, [r7, #24]
 8003a2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2e:	6979      	ldr	r1, [r7, #20]
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	e841 2300 	strex	r3, r2, [r1]
 8003a36:	613b      	str	r3, [r7, #16]
   return(result);
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1e5      	bne.n	8003a0a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2220      	movs	r2, #32
 8003a42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8003a46:	bf00      	nop
 8003a48:	373c      	adds	r7, #60	@ 0x3c
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b095      	sub	sp, #84	@ 0x54
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a62:	e853 3f00 	ldrex	r3, [r3]
 8003a66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	461a      	mov	r2, r3
 8003a76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a78:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a7a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a80:	e841 2300 	strex	r3, r2, [r1]
 8003a84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1e6      	bne.n	8003a5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3308      	adds	r3, #8
 8003a92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	e853 3f00 	ldrex	r3, [r3]
 8003a9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003aa2:	f023 0301 	bic.w	r3, r3, #1
 8003aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3308      	adds	r3, #8
 8003aae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ab0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ab8:	e841 2300 	strex	r3, r2, [r1]
 8003abc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1e3      	bne.n	8003a8c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d118      	bne.n	8003afe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f023 0310 	bic.w	r3, r3, #16
 8003ae0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003aea:	61bb      	str	r3, [r7, #24]
 8003aec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aee:	6979      	ldr	r1, [r7, #20]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	613b      	str	r3, [r7, #16]
   return(result);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1e6      	bne.n	8003acc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003b12:	bf00      	nop
 8003b14:	3754      	adds	r7, #84	@ 0x54
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b09c      	sub	sp, #112	@ 0x70
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d171      	bne.n	8003c1e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8003b3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b4a:	e853 3f00 	ldrex	r3, [r3]
 8003b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b62:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b68:	e841 2300 	strex	r3, r2, [r1]
 8003b6c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1e6      	bne.n	8003b42 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3308      	adds	r3, #8
 8003b7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b7e:	e853 3f00 	ldrex	r3, [r3]
 8003b82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b86:	f023 0301 	bic.w	r3, r3, #1
 8003b8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3308      	adds	r3, #8
 8003b92:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003b94:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b96:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b9c:	e841 2300 	strex	r3, r2, [r1]
 8003ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1e5      	bne.n	8003b74 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3308      	adds	r3, #8
 8003bae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb2:	e853 3f00 	ldrex	r3, [r3]
 8003bb6:	623b      	str	r3, [r7, #32]
   return(result);
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bbe:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3308      	adds	r3, #8
 8003bc6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003bc8:	633a      	str	r2, [r7, #48]	@ 0x30
 8003bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bd0:	e841 2300 	strex	r3, r2, [r1]
 8003bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1e5      	bne.n	8003ba8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003bdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bde:	2220      	movs	r2, #32
 8003be0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003be4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003be6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d118      	bne.n	8003c1e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	e853 3f00 	ldrex	r3, [r3]
 8003bf8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f023 0310 	bic.w	r3, r3, #16
 8003c00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	461a      	mov	r2, r3
 8003c08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c0a:	61fb      	str	r3, [r7, #28]
 8003c0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0e:	69b9      	ldr	r1, [r7, #24]
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	e841 2300 	strex	r3, r2, [r1]
 8003c16:	617b      	str	r3, [r7, #20]
   return(result);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1e6      	bne.n	8003bec <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c20:	2200      	movs	r2, #0
 8003c22:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d107      	bne.n	8003c3c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c2e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003c32:	4619      	mov	r1, r3
 8003c34:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003c36:	f7ff f993 	bl	8002f60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c3a:	e002      	b.n	8003c42 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003c3c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003c3e:	f7ff f971 	bl	8002f24 <HAL_UART_RxCpltCallback>
}
 8003c42:	bf00      	nop
 8003c44:	3770      	adds	r7, #112	@ 0x70
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d109      	bne.n	8003c7a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003c6c:	085b      	lsrs	r3, r3, #1
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	4619      	mov	r1, r3
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f7ff f974 	bl	8002f60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c78:	e002      	b.n	8003c80 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f7ff f95c 	bl	8002f38 <HAL_UART_RxHalfCpltCallback>
}
 8003c80:	bf00      	nop
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c94:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c9c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ca4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb0:	2b80      	cmp	r3, #128	@ 0x80
 8003cb2:	d109      	bne.n	8003cc8 <UART_DMAError+0x40>
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	2b21      	cmp	r3, #33	@ 0x21
 8003cb8:	d106      	bne.n	8003cc8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8003cc2:	6978      	ldr	r0, [r7, #20]
 8003cc4:	f7ff fe84 	bl	80039d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd2:	2b40      	cmp	r3, #64	@ 0x40
 8003cd4:	d109      	bne.n	8003cea <UART_DMAError+0x62>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2b22      	cmp	r3, #34	@ 0x22
 8003cda:	d106      	bne.n	8003cea <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8003ce4:	6978      	ldr	r0, [r7, #20]
 8003ce6:	f7ff feb4 	bl	8003a52 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf0:	f043 0210 	orr.w	r2, r3, #16
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cfa:	6978      	ldr	r0, [r7, #20]
 8003cfc:	f7ff f926 	bl	8002f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d00:	bf00      	nop
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d101      	bne.n	8003d1e <HAL_UARTEx_DisableFifoMode+0x16>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e027      	b.n	8003d6e <HAL_UARTEx_DisableFifoMode+0x66>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2224      	movs	r2, #36	@ 0x24
 8003d2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0201 	bic.w	r2, r2, #1
 8003d44:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003d4c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b084      	sub	sp, #16
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d101      	bne.n	8003d92 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	e02d      	b.n	8003dee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2224      	movs	r2, #36	@ 0x24
 8003d9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0201 	bic.w	r2, r2, #1
 8003db8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f850 	bl	8003e74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d101      	bne.n	8003e0e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e02d      	b.n	8003e6a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2224      	movs	r2, #36	@ 0x24
 8003e1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0201 	bic.w	r2, r2, #1
 8003e34:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f812 	bl	8003e74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d108      	bne.n	8003e96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003e94:	e031      	b.n	8003efa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003e96:	2308      	movs	r3, #8
 8003e98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003e9a:	2308      	movs	r3, #8
 8003e9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	0e5b      	lsrs	r3, r3, #25
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	0f5b      	lsrs	r3, r3, #29
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ebe:	7bbb      	ldrb	r3, [r7, #14]
 8003ec0:	7b3a      	ldrb	r2, [r7, #12]
 8003ec2:	4911      	ldr	r1, [pc, #68]	@ (8003f08 <UARTEx_SetNbDataToProcess+0x94>)
 8003ec4:	5c8a      	ldrb	r2, [r1, r2]
 8003ec6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003eca:	7b3a      	ldrb	r2, [r7, #12]
 8003ecc:	490f      	ldr	r1, [pc, #60]	@ (8003f0c <UARTEx_SetNbDataToProcess+0x98>)
 8003ece:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ed0:	fb93 f3f2 	sdiv	r3, r3, r2
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
 8003ede:	7b7a      	ldrb	r2, [r7, #13]
 8003ee0:	4909      	ldr	r1, [pc, #36]	@ (8003f08 <UARTEx_SetNbDataToProcess+0x94>)
 8003ee2:	5c8a      	ldrb	r2, [r1, r2]
 8003ee4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003ee8:	7b7a      	ldrb	r2, [r7, #13]
 8003eea:	4908      	ldr	r1, [pc, #32]	@ (8003f0c <UARTEx_SetNbDataToProcess+0x98>)
 8003eec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003eee:	fb93 f3f2 	sdiv	r3, r3, r2
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003efa:	bf00      	nop
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	08004ae4 	.word	0x08004ae4
 8003f0c:	08004aec 	.word	0x08004aec

08003f10 <_strtoul_l.constprop.0>:
 8003f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f14:	4e34      	ldr	r6, [pc, #208]	@ (8003fe8 <_strtoul_l.constprop.0+0xd8>)
 8003f16:	4686      	mov	lr, r0
 8003f18:	460d      	mov	r5, r1
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f20:	5d37      	ldrb	r7, [r6, r4]
 8003f22:	f017 0708 	ands.w	r7, r7, #8
 8003f26:	d1f8      	bne.n	8003f1a <_strtoul_l.constprop.0+0xa>
 8003f28:	2c2d      	cmp	r4, #45	@ 0x2d
 8003f2a:	d12f      	bne.n	8003f8c <_strtoul_l.constprop.0+0x7c>
 8003f2c:	782c      	ldrb	r4, [r5, #0]
 8003f2e:	2701      	movs	r7, #1
 8003f30:	1c85      	adds	r5, r0, #2
 8003f32:	f033 0010 	bics.w	r0, r3, #16
 8003f36:	d109      	bne.n	8003f4c <_strtoul_l.constprop.0+0x3c>
 8003f38:	2c30      	cmp	r4, #48	@ 0x30
 8003f3a:	d12c      	bne.n	8003f96 <_strtoul_l.constprop.0+0x86>
 8003f3c:	7828      	ldrb	r0, [r5, #0]
 8003f3e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8003f42:	2858      	cmp	r0, #88	@ 0x58
 8003f44:	d127      	bne.n	8003f96 <_strtoul_l.constprop.0+0x86>
 8003f46:	786c      	ldrb	r4, [r5, #1]
 8003f48:	2310      	movs	r3, #16
 8003f4a:	3502      	adds	r5, #2
 8003f4c:	f04f 38ff 	mov.w	r8, #4294967295
 8003f50:	2600      	movs	r6, #0
 8003f52:	fbb8 f8f3 	udiv	r8, r8, r3
 8003f56:	fb03 f908 	mul.w	r9, r3, r8
 8003f5a:	ea6f 0909 	mvn.w	r9, r9
 8003f5e:	4630      	mov	r0, r6
 8003f60:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8003f64:	f1bc 0f09 	cmp.w	ip, #9
 8003f68:	d81c      	bhi.n	8003fa4 <_strtoul_l.constprop.0+0x94>
 8003f6a:	4664      	mov	r4, ip
 8003f6c:	42a3      	cmp	r3, r4
 8003f6e:	dd2a      	ble.n	8003fc6 <_strtoul_l.constprop.0+0xb6>
 8003f70:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003f74:	d007      	beq.n	8003f86 <_strtoul_l.constprop.0+0x76>
 8003f76:	4580      	cmp	r8, r0
 8003f78:	d322      	bcc.n	8003fc0 <_strtoul_l.constprop.0+0xb0>
 8003f7a:	d101      	bne.n	8003f80 <_strtoul_l.constprop.0+0x70>
 8003f7c:	45a1      	cmp	r9, r4
 8003f7e:	db1f      	blt.n	8003fc0 <_strtoul_l.constprop.0+0xb0>
 8003f80:	fb00 4003 	mla	r0, r0, r3, r4
 8003f84:	2601      	movs	r6, #1
 8003f86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f8a:	e7e9      	b.n	8003f60 <_strtoul_l.constprop.0+0x50>
 8003f8c:	2c2b      	cmp	r4, #43	@ 0x2b
 8003f8e:	bf04      	itt	eq
 8003f90:	782c      	ldrbeq	r4, [r5, #0]
 8003f92:	1c85      	addeq	r5, r0, #2
 8003f94:	e7cd      	b.n	8003f32 <_strtoul_l.constprop.0+0x22>
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1d8      	bne.n	8003f4c <_strtoul_l.constprop.0+0x3c>
 8003f9a:	2c30      	cmp	r4, #48	@ 0x30
 8003f9c:	bf0c      	ite	eq
 8003f9e:	2308      	moveq	r3, #8
 8003fa0:	230a      	movne	r3, #10
 8003fa2:	e7d3      	b.n	8003f4c <_strtoul_l.constprop.0+0x3c>
 8003fa4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8003fa8:	f1bc 0f19 	cmp.w	ip, #25
 8003fac:	d801      	bhi.n	8003fb2 <_strtoul_l.constprop.0+0xa2>
 8003fae:	3c37      	subs	r4, #55	@ 0x37
 8003fb0:	e7dc      	b.n	8003f6c <_strtoul_l.constprop.0+0x5c>
 8003fb2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8003fb6:	f1bc 0f19 	cmp.w	ip, #25
 8003fba:	d804      	bhi.n	8003fc6 <_strtoul_l.constprop.0+0xb6>
 8003fbc:	3c57      	subs	r4, #87	@ 0x57
 8003fbe:	e7d5      	b.n	8003f6c <_strtoul_l.constprop.0+0x5c>
 8003fc0:	f04f 36ff 	mov.w	r6, #4294967295
 8003fc4:	e7df      	b.n	8003f86 <_strtoul_l.constprop.0+0x76>
 8003fc6:	1c73      	adds	r3, r6, #1
 8003fc8:	d106      	bne.n	8003fd8 <_strtoul_l.constprop.0+0xc8>
 8003fca:	2322      	movs	r3, #34	@ 0x22
 8003fcc:	f8ce 3000 	str.w	r3, [lr]
 8003fd0:	4630      	mov	r0, r6
 8003fd2:	b932      	cbnz	r2, 8003fe2 <_strtoul_l.constprop.0+0xd2>
 8003fd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003fd8:	b107      	cbz	r7, 8003fdc <_strtoul_l.constprop.0+0xcc>
 8003fda:	4240      	negs	r0, r0
 8003fdc:	2a00      	cmp	r2, #0
 8003fde:	d0f9      	beq.n	8003fd4 <_strtoul_l.constprop.0+0xc4>
 8003fe0:	b106      	cbz	r6, 8003fe4 <_strtoul_l.constprop.0+0xd4>
 8003fe2:	1e69      	subs	r1, r5, #1
 8003fe4:	6011      	str	r1, [r2, #0]
 8003fe6:	e7f5      	b.n	8003fd4 <_strtoul_l.constprop.0+0xc4>
 8003fe8:	08004af5 	.word	0x08004af5

08003fec <strtoul>:
 8003fec:	4613      	mov	r3, r2
 8003fee:	460a      	mov	r2, r1
 8003ff0:	4601      	mov	r1, r0
 8003ff2:	4802      	ldr	r0, [pc, #8]	@ (8003ffc <strtoul+0x10>)
 8003ff4:	6800      	ldr	r0, [r0, #0]
 8003ff6:	f7ff bf8b 	b.w	8003f10 <_strtoul_l.constprop.0>
 8003ffa:	bf00      	nop
 8003ffc:	2000000c 	.word	0x2000000c

08004000 <_vsniprintf_r>:
 8004000:	b530      	push	{r4, r5, lr}
 8004002:	4614      	mov	r4, r2
 8004004:	2c00      	cmp	r4, #0
 8004006:	b09b      	sub	sp, #108	@ 0x6c
 8004008:	4605      	mov	r5, r0
 800400a:	461a      	mov	r2, r3
 800400c:	da05      	bge.n	800401a <_vsniprintf_r+0x1a>
 800400e:	238b      	movs	r3, #139	@ 0x8b
 8004010:	6003      	str	r3, [r0, #0]
 8004012:	f04f 30ff 	mov.w	r0, #4294967295
 8004016:	b01b      	add	sp, #108	@ 0x6c
 8004018:	bd30      	pop	{r4, r5, pc}
 800401a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800401e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004022:	bf14      	ite	ne
 8004024:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004028:	4623      	moveq	r3, r4
 800402a:	9302      	str	r3, [sp, #8]
 800402c:	9305      	str	r3, [sp, #20]
 800402e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004032:	9100      	str	r1, [sp, #0]
 8004034:	9104      	str	r1, [sp, #16]
 8004036:	f8ad 300e 	strh.w	r3, [sp, #14]
 800403a:	4669      	mov	r1, sp
 800403c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800403e:	f000 f9df 	bl	8004400 <_svfiprintf_r>
 8004042:	1c43      	adds	r3, r0, #1
 8004044:	bfbc      	itt	lt
 8004046:	238b      	movlt	r3, #139	@ 0x8b
 8004048:	602b      	strlt	r3, [r5, #0]
 800404a:	2c00      	cmp	r4, #0
 800404c:	d0e3      	beq.n	8004016 <_vsniprintf_r+0x16>
 800404e:	9b00      	ldr	r3, [sp, #0]
 8004050:	2200      	movs	r2, #0
 8004052:	701a      	strb	r2, [r3, #0]
 8004054:	e7df      	b.n	8004016 <_vsniprintf_r+0x16>
	...

08004058 <vsniprintf>:
 8004058:	b507      	push	{r0, r1, r2, lr}
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	4613      	mov	r3, r2
 800405e:	460a      	mov	r2, r1
 8004060:	4601      	mov	r1, r0
 8004062:	4803      	ldr	r0, [pc, #12]	@ (8004070 <vsniprintf+0x18>)
 8004064:	6800      	ldr	r0, [r0, #0]
 8004066:	f7ff ffcb 	bl	8004000 <_vsniprintf_r>
 800406a:	b003      	add	sp, #12
 800406c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004070:	2000000c 	.word	0x2000000c

08004074 <memset>:
 8004074:	4402      	add	r2, r0
 8004076:	4603      	mov	r3, r0
 8004078:	4293      	cmp	r3, r2
 800407a:	d100      	bne.n	800407e <memset+0xa>
 800407c:	4770      	bx	lr
 800407e:	f803 1b01 	strb.w	r1, [r3], #1
 8004082:	e7f9      	b.n	8004078 <memset+0x4>

08004084 <strncpy>:
 8004084:	b510      	push	{r4, lr}
 8004086:	3901      	subs	r1, #1
 8004088:	4603      	mov	r3, r0
 800408a:	b132      	cbz	r2, 800409a <strncpy+0x16>
 800408c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004090:	f803 4b01 	strb.w	r4, [r3], #1
 8004094:	3a01      	subs	r2, #1
 8004096:	2c00      	cmp	r4, #0
 8004098:	d1f7      	bne.n	800408a <strncpy+0x6>
 800409a:	441a      	add	r2, r3
 800409c:	2100      	movs	r1, #0
 800409e:	4293      	cmp	r3, r2
 80040a0:	d100      	bne.n	80040a4 <strncpy+0x20>
 80040a2:	bd10      	pop	{r4, pc}
 80040a4:	f803 1b01 	strb.w	r1, [r3], #1
 80040a8:	e7f9      	b.n	800409e <strncpy+0x1a>

080040aa <__strtok_r>:
 80040aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ac:	4604      	mov	r4, r0
 80040ae:	b908      	cbnz	r0, 80040b4 <__strtok_r+0xa>
 80040b0:	6814      	ldr	r4, [r2, #0]
 80040b2:	b144      	cbz	r4, 80040c6 <__strtok_r+0x1c>
 80040b4:	4620      	mov	r0, r4
 80040b6:	f814 5b01 	ldrb.w	r5, [r4], #1
 80040ba:	460f      	mov	r7, r1
 80040bc:	f817 6b01 	ldrb.w	r6, [r7], #1
 80040c0:	b91e      	cbnz	r6, 80040ca <__strtok_r+0x20>
 80040c2:	b965      	cbnz	r5, 80040de <__strtok_r+0x34>
 80040c4:	6015      	str	r5, [r2, #0]
 80040c6:	2000      	movs	r0, #0
 80040c8:	e005      	b.n	80040d6 <__strtok_r+0x2c>
 80040ca:	42b5      	cmp	r5, r6
 80040cc:	d1f6      	bne.n	80040bc <__strtok_r+0x12>
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f0      	bne.n	80040b4 <__strtok_r+0xa>
 80040d2:	6014      	str	r4, [r2, #0]
 80040d4:	7003      	strb	r3, [r0, #0]
 80040d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040d8:	461c      	mov	r4, r3
 80040da:	e00c      	b.n	80040f6 <__strtok_r+0x4c>
 80040dc:	b915      	cbnz	r5, 80040e4 <__strtok_r+0x3a>
 80040de:	f814 3b01 	ldrb.w	r3, [r4], #1
 80040e2:	460e      	mov	r6, r1
 80040e4:	f816 5b01 	ldrb.w	r5, [r6], #1
 80040e8:	42ab      	cmp	r3, r5
 80040ea:	d1f7      	bne.n	80040dc <__strtok_r+0x32>
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0f3      	beq.n	80040d8 <__strtok_r+0x2e>
 80040f0:	2300      	movs	r3, #0
 80040f2:	f804 3c01 	strb.w	r3, [r4, #-1]
 80040f6:	6014      	str	r4, [r2, #0]
 80040f8:	e7ed      	b.n	80040d6 <__strtok_r+0x2c>

080040fa <strtok_r>:
 80040fa:	2301      	movs	r3, #1
 80040fc:	f7ff bfd5 	b.w	80040aa <__strtok_r>

08004100 <__errno>:
 8004100:	4b01      	ldr	r3, [pc, #4]	@ (8004108 <__errno+0x8>)
 8004102:	6818      	ldr	r0, [r3, #0]
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	2000000c 	.word	0x2000000c

0800410c <__libc_init_array>:
 800410c:	b570      	push	{r4, r5, r6, lr}
 800410e:	4d0d      	ldr	r5, [pc, #52]	@ (8004144 <__libc_init_array+0x38>)
 8004110:	4c0d      	ldr	r4, [pc, #52]	@ (8004148 <__libc_init_array+0x3c>)
 8004112:	1b64      	subs	r4, r4, r5
 8004114:	10a4      	asrs	r4, r4, #2
 8004116:	2600      	movs	r6, #0
 8004118:	42a6      	cmp	r6, r4
 800411a:	d109      	bne.n	8004130 <__libc_init_array+0x24>
 800411c:	4d0b      	ldr	r5, [pc, #44]	@ (800414c <__libc_init_array+0x40>)
 800411e:	4c0c      	ldr	r4, [pc, #48]	@ (8004150 <__libc_init_array+0x44>)
 8004120:	f000 fc66 	bl	80049f0 <_init>
 8004124:	1b64      	subs	r4, r4, r5
 8004126:	10a4      	asrs	r4, r4, #2
 8004128:	2600      	movs	r6, #0
 800412a:	42a6      	cmp	r6, r4
 800412c:	d105      	bne.n	800413a <__libc_init_array+0x2e>
 800412e:	bd70      	pop	{r4, r5, r6, pc}
 8004130:	f855 3b04 	ldr.w	r3, [r5], #4
 8004134:	4798      	blx	r3
 8004136:	3601      	adds	r6, #1
 8004138:	e7ee      	b.n	8004118 <__libc_init_array+0xc>
 800413a:	f855 3b04 	ldr.w	r3, [r5], #4
 800413e:	4798      	blx	r3
 8004140:	3601      	adds	r6, #1
 8004142:	e7f2      	b.n	800412a <__libc_init_array+0x1e>
 8004144:	08004c30 	.word	0x08004c30
 8004148:	08004c30 	.word	0x08004c30
 800414c:	08004c30 	.word	0x08004c30
 8004150:	08004c34 	.word	0x08004c34

08004154 <__retarget_lock_acquire_recursive>:
 8004154:	4770      	bx	lr

08004156 <__retarget_lock_release_recursive>:
 8004156:	4770      	bx	lr

08004158 <_free_r>:
 8004158:	b538      	push	{r3, r4, r5, lr}
 800415a:	4605      	mov	r5, r0
 800415c:	2900      	cmp	r1, #0
 800415e:	d041      	beq.n	80041e4 <_free_r+0x8c>
 8004160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004164:	1f0c      	subs	r4, r1, #4
 8004166:	2b00      	cmp	r3, #0
 8004168:	bfb8      	it	lt
 800416a:	18e4      	addlt	r4, r4, r3
 800416c:	f000 f8e0 	bl	8004330 <__malloc_lock>
 8004170:	4a1d      	ldr	r2, [pc, #116]	@ (80041e8 <_free_r+0x90>)
 8004172:	6813      	ldr	r3, [r2, #0]
 8004174:	b933      	cbnz	r3, 8004184 <_free_r+0x2c>
 8004176:	6063      	str	r3, [r4, #4]
 8004178:	6014      	str	r4, [r2, #0]
 800417a:	4628      	mov	r0, r5
 800417c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004180:	f000 b8dc 	b.w	800433c <__malloc_unlock>
 8004184:	42a3      	cmp	r3, r4
 8004186:	d908      	bls.n	800419a <_free_r+0x42>
 8004188:	6820      	ldr	r0, [r4, #0]
 800418a:	1821      	adds	r1, r4, r0
 800418c:	428b      	cmp	r3, r1
 800418e:	bf01      	itttt	eq
 8004190:	6819      	ldreq	r1, [r3, #0]
 8004192:	685b      	ldreq	r3, [r3, #4]
 8004194:	1809      	addeq	r1, r1, r0
 8004196:	6021      	streq	r1, [r4, #0]
 8004198:	e7ed      	b.n	8004176 <_free_r+0x1e>
 800419a:	461a      	mov	r2, r3
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	b10b      	cbz	r3, 80041a4 <_free_r+0x4c>
 80041a0:	42a3      	cmp	r3, r4
 80041a2:	d9fa      	bls.n	800419a <_free_r+0x42>
 80041a4:	6811      	ldr	r1, [r2, #0]
 80041a6:	1850      	adds	r0, r2, r1
 80041a8:	42a0      	cmp	r0, r4
 80041aa:	d10b      	bne.n	80041c4 <_free_r+0x6c>
 80041ac:	6820      	ldr	r0, [r4, #0]
 80041ae:	4401      	add	r1, r0
 80041b0:	1850      	adds	r0, r2, r1
 80041b2:	4283      	cmp	r3, r0
 80041b4:	6011      	str	r1, [r2, #0]
 80041b6:	d1e0      	bne.n	800417a <_free_r+0x22>
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	6053      	str	r3, [r2, #4]
 80041be:	4408      	add	r0, r1
 80041c0:	6010      	str	r0, [r2, #0]
 80041c2:	e7da      	b.n	800417a <_free_r+0x22>
 80041c4:	d902      	bls.n	80041cc <_free_r+0x74>
 80041c6:	230c      	movs	r3, #12
 80041c8:	602b      	str	r3, [r5, #0]
 80041ca:	e7d6      	b.n	800417a <_free_r+0x22>
 80041cc:	6820      	ldr	r0, [r4, #0]
 80041ce:	1821      	adds	r1, r4, r0
 80041d0:	428b      	cmp	r3, r1
 80041d2:	bf04      	itt	eq
 80041d4:	6819      	ldreq	r1, [r3, #0]
 80041d6:	685b      	ldreq	r3, [r3, #4]
 80041d8:	6063      	str	r3, [r4, #4]
 80041da:	bf04      	itt	eq
 80041dc:	1809      	addeq	r1, r1, r0
 80041de:	6021      	streq	r1, [r4, #0]
 80041e0:	6054      	str	r4, [r2, #4]
 80041e2:	e7ca      	b.n	800417a <_free_r+0x22>
 80041e4:	bd38      	pop	{r3, r4, r5, pc}
 80041e6:	bf00      	nop
 80041e8:	200004c4 	.word	0x200004c4

080041ec <sbrk_aligned>:
 80041ec:	b570      	push	{r4, r5, r6, lr}
 80041ee:	4e0f      	ldr	r6, [pc, #60]	@ (800422c <sbrk_aligned+0x40>)
 80041f0:	460c      	mov	r4, r1
 80041f2:	6831      	ldr	r1, [r6, #0]
 80041f4:	4605      	mov	r5, r0
 80041f6:	b911      	cbnz	r1, 80041fe <sbrk_aligned+0x12>
 80041f8:	f000 fba6 	bl	8004948 <_sbrk_r>
 80041fc:	6030      	str	r0, [r6, #0]
 80041fe:	4621      	mov	r1, r4
 8004200:	4628      	mov	r0, r5
 8004202:	f000 fba1 	bl	8004948 <_sbrk_r>
 8004206:	1c43      	adds	r3, r0, #1
 8004208:	d103      	bne.n	8004212 <sbrk_aligned+0x26>
 800420a:	f04f 34ff 	mov.w	r4, #4294967295
 800420e:	4620      	mov	r0, r4
 8004210:	bd70      	pop	{r4, r5, r6, pc}
 8004212:	1cc4      	adds	r4, r0, #3
 8004214:	f024 0403 	bic.w	r4, r4, #3
 8004218:	42a0      	cmp	r0, r4
 800421a:	d0f8      	beq.n	800420e <sbrk_aligned+0x22>
 800421c:	1a21      	subs	r1, r4, r0
 800421e:	4628      	mov	r0, r5
 8004220:	f000 fb92 	bl	8004948 <_sbrk_r>
 8004224:	3001      	adds	r0, #1
 8004226:	d1f2      	bne.n	800420e <sbrk_aligned+0x22>
 8004228:	e7ef      	b.n	800420a <sbrk_aligned+0x1e>
 800422a:	bf00      	nop
 800422c:	200004c0 	.word	0x200004c0

08004230 <_malloc_r>:
 8004230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004234:	1ccd      	adds	r5, r1, #3
 8004236:	f025 0503 	bic.w	r5, r5, #3
 800423a:	3508      	adds	r5, #8
 800423c:	2d0c      	cmp	r5, #12
 800423e:	bf38      	it	cc
 8004240:	250c      	movcc	r5, #12
 8004242:	2d00      	cmp	r5, #0
 8004244:	4606      	mov	r6, r0
 8004246:	db01      	blt.n	800424c <_malloc_r+0x1c>
 8004248:	42a9      	cmp	r1, r5
 800424a:	d904      	bls.n	8004256 <_malloc_r+0x26>
 800424c:	230c      	movs	r3, #12
 800424e:	6033      	str	r3, [r6, #0]
 8004250:	2000      	movs	r0, #0
 8004252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004256:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800432c <_malloc_r+0xfc>
 800425a:	f000 f869 	bl	8004330 <__malloc_lock>
 800425e:	f8d8 3000 	ldr.w	r3, [r8]
 8004262:	461c      	mov	r4, r3
 8004264:	bb44      	cbnz	r4, 80042b8 <_malloc_r+0x88>
 8004266:	4629      	mov	r1, r5
 8004268:	4630      	mov	r0, r6
 800426a:	f7ff ffbf 	bl	80041ec <sbrk_aligned>
 800426e:	1c43      	adds	r3, r0, #1
 8004270:	4604      	mov	r4, r0
 8004272:	d158      	bne.n	8004326 <_malloc_r+0xf6>
 8004274:	f8d8 4000 	ldr.w	r4, [r8]
 8004278:	4627      	mov	r7, r4
 800427a:	2f00      	cmp	r7, #0
 800427c:	d143      	bne.n	8004306 <_malloc_r+0xd6>
 800427e:	2c00      	cmp	r4, #0
 8004280:	d04b      	beq.n	800431a <_malloc_r+0xea>
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	4639      	mov	r1, r7
 8004286:	4630      	mov	r0, r6
 8004288:	eb04 0903 	add.w	r9, r4, r3
 800428c:	f000 fb5c 	bl	8004948 <_sbrk_r>
 8004290:	4581      	cmp	r9, r0
 8004292:	d142      	bne.n	800431a <_malloc_r+0xea>
 8004294:	6821      	ldr	r1, [r4, #0]
 8004296:	1a6d      	subs	r5, r5, r1
 8004298:	4629      	mov	r1, r5
 800429a:	4630      	mov	r0, r6
 800429c:	f7ff ffa6 	bl	80041ec <sbrk_aligned>
 80042a0:	3001      	adds	r0, #1
 80042a2:	d03a      	beq.n	800431a <_malloc_r+0xea>
 80042a4:	6823      	ldr	r3, [r4, #0]
 80042a6:	442b      	add	r3, r5
 80042a8:	6023      	str	r3, [r4, #0]
 80042aa:	f8d8 3000 	ldr.w	r3, [r8]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	bb62      	cbnz	r2, 800430c <_malloc_r+0xdc>
 80042b2:	f8c8 7000 	str.w	r7, [r8]
 80042b6:	e00f      	b.n	80042d8 <_malloc_r+0xa8>
 80042b8:	6822      	ldr	r2, [r4, #0]
 80042ba:	1b52      	subs	r2, r2, r5
 80042bc:	d420      	bmi.n	8004300 <_malloc_r+0xd0>
 80042be:	2a0b      	cmp	r2, #11
 80042c0:	d917      	bls.n	80042f2 <_malloc_r+0xc2>
 80042c2:	1961      	adds	r1, r4, r5
 80042c4:	42a3      	cmp	r3, r4
 80042c6:	6025      	str	r5, [r4, #0]
 80042c8:	bf18      	it	ne
 80042ca:	6059      	strne	r1, [r3, #4]
 80042cc:	6863      	ldr	r3, [r4, #4]
 80042ce:	bf08      	it	eq
 80042d0:	f8c8 1000 	streq.w	r1, [r8]
 80042d4:	5162      	str	r2, [r4, r5]
 80042d6:	604b      	str	r3, [r1, #4]
 80042d8:	4630      	mov	r0, r6
 80042da:	f000 f82f 	bl	800433c <__malloc_unlock>
 80042de:	f104 000b 	add.w	r0, r4, #11
 80042e2:	1d23      	adds	r3, r4, #4
 80042e4:	f020 0007 	bic.w	r0, r0, #7
 80042e8:	1ac2      	subs	r2, r0, r3
 80042ea:	bf1c      	itt	ne
 80042ec:	1a1b      	subne	r3, r3, r0
 80042ee:	50a3      	strne	r3, [r4, r2]
 80042f0:	e7af      	b.n	8004252 <_malloc_r+0x22>
 80042f2:	6862      	ldr	r2, [r4, #4]
 80042f4:	42a3      	cmp	r3, r4
 80042f6:	bf0c      	ite	eq
 80042f8:	f8c8 2000 	streq.w	r2, [r8]
 80042fc:	605a      	strne	r2, [r3, #4]
 80042fe:	e7eb      	b.n	80042d8 <_malloc_r+0xa8>
 8004300:	4623      	mov	r3, r4
 8004302:	6864      	ldr	r4, [r4, #4]
 8004304:	e7ae      	b.n	8004264 <_malloc_r+0x34>
 8004306:	463c      	mov	r4, r7
 8004308:	687f      	ldr	r7, [r7, #4]
 800430a:	e7b6      	b.n	800427a <_malloc_r+0x4a>
 800430c:	461a      	mov	r2, r3
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	42a3      	cmp	r3, r4
 8004312:	d1fb      	bne.n	800430c <_malloc_r+0xdc>
 8004314:	2300      	movs	r3, #0
 8004316:	6053      	str	r3, [r2, #4]
 8004318:	e7de      	b.n	80042d8 <_malloc_r+0xa8>
 800431a:	230c      	movs	r3, #12
 800431c:	6033      	str	r3, [r6, #0]
 800431e:	4630      	mov	r0, r6
 8004320:	f000 f80c 	bl	800433c <__malloc_unlock>
 8004324:	e794      	b.n	8004250 <_malloc_r+0x20>
 8004326:	6005      	str	r5, [r0, #0]
 8004328:	e7d6      	b.n	80042d8 <_malloc_r+0xa8>
 800432a:	bf00      	nop
 800432c:	200004c4 	.word	0x200004c4

08004330 <__malloc_lock>:
 8004330:	4801      	ldr	r0, [pc, #4]	@ (8004338 <__malloc_lock+0x8>)
 8004332:	f7ff bf0f 	b.w	8004154 <__retarget_lock_acquire_recursive>
 8004336:	bf00      	nop
 8004338:	200004bc 	.word	0x200004bc

0800433c <__malloc_unlock>:
 800433c:	4801      	ldr	r0, [pc, #4]	@ (8004344 <__malloc_unlock+0x8>)
 800433e:	f7ff bf0a 	b.w	8004156 <__retarget_lock_release_recursive>
 8004342:	bf00      	nop
 8004344:	200004bc 	.word	0x200004bc

08004348 <__ssputs_r>:
 8004348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800434c:	688e      	ldr	r6, [r1, #8]
 800434e:	461f      	mov	r7, r3
 8004350:	42be      	cmp	r6, r7
 8004352:	680b      	ldr	r3, [r1, #0]
 8004354:	4682      	mov	sl, r0
 8004356:	460c      	mov	r4, r1
 8004358:	4690      	mov	r8, r2
 800435a:	d82d      	bhi.n	80043b8 <__ssputs_r+0x70>
 800435c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004360:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004364:	d026      	beq.n	80043b4 <__ssputs_r+0x6c>
 8004366:	6965      	ldr	r5, [r4, #20]
 8004368:	6909      	ldr	r1, [r1, #16]
 800436a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800436e:	eba3 0901 	sub.w	r9, r3, r1
 8004372:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004376:	1c7b      	adds	r3, r7, #1
 8004378:	444b      	add	r3, r9
 800437a:	106d      	asrs	r5, r5, #1
 800437c:	429d      	cmp	r5, r3
 800437e:	bf38      	it	cc
 8004380:	461d      	movcc	r5, r3
 8004382:	0553      	lsls	r3, r2, #21
 8004384:	d527      	bpl.n	80043d6 <__ssputs_r+0x8e>
 8004386:	4629      	mov	r1, r5
 8004388:	f7ff ff52 	bl	8004230 <_malloc_r>
 800438c:	4606      	mov	r6, r0
 800438e:	b360      	cbz	r0, 80043ea <__ssputs_r+0xa2>
 8004390:	6921      	ldr	r1, [r4, #16]
 8004392:	464a      	mov	r2, r9
 8004394:	f000 fae8 	bl	8004968 <memcpy>
 8004398:	89a3      	ldrh	r3, [r4, #12]
 800439a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800439e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043a2:	81a3      	strh	r3, [r4, #12]
 80043a4:	6126      	str	r6, [r4, #16]
 80043a6:	6165      	str	r5, [r4, #20]
 80043a8:	444e      	add	r6, r9
 80043aa:	eba5 0509 	sub.w	r5, r5, r9
 80043ae:	6026      	str	r6, [r4, #0]
 80043b0:	60a5      	str	r5, [r4, #8]
 80043b2:	463e      	mov	r6, r7
 80043b4:	42be      	cmp	r6, r7
 80043b6:	d900      	bls.n	80043ba <__ssputs_r+0x72>
 80043b8:	463e      	mov	r6, r7
 80043ba:	6820      	ldr	r0, [r4, #0]
 80043bc:	4632      	mov	r2, r6
 80043be:	4641      	mov	r1, r8
 80043c0:	f000 faa8 	bl	8004914 <memmove>
 80043c4:	68a3      	ldr	r3, [r4, #8]
 80043c6:	1b9b      	subs	r3, r3, r6
 80043c8:	60a3      	str	r3, [r4, #8]
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	4433      	add	r3, r6
 80043ce:	6023      	str	r3, [r4, #0]
 80043d0:	2000      	movs	r0, #0
 80043d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d6:	462a      	mov	r2, r5
 80043d8:	f000 fad4 	bl	8004984 <_realloc_r>
 80043dc:	4606      	mov	r6, r0
 80043de:	2800      	cmp	r0, #0
 80043e0:	d1e0      	bne.n	80043a4 <__ssputs_r+0x5c>
 80043e2:	6921      	ldr	r1, [r4, #16]
 80043e4:	4650      	mov	r0, sl
 80043e6:	f7ff feb7 	bl	8004158 <_free_r>
 80043ea:	230c      	movs	r3, #12
 80043ec:	f8ca 3000 	str.w	r3, [sl]
 80043f0:	89a3      	ldrh	r3, [r4, #12]
 80043f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043f6:	81a3      	strh	r3, [r4, #12]
 80043f8:	f04f 30ff 	mov.w	r0, #4294967295
 80043fc:	e7e9      	b.n	80043d2 <__ssputs_r+0x8a>
	...

08004400 <_svfiprintf_r>:
 8004400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004404:	4698      	mov	r8, r3
 8004406:	898b      	ldrh	r3, [r1, #12]
 8004408:	061b      	lsls	r3, r3, #24
 800440a:	b09d      	sub	sp, #116	@ 0x74
 800440c:	4607      	mov	r7, r0
 800440e:	460d      	mov	r5, r1
 8004410:	4614      	mov	r4, r2
 8004412:	d510      	bpl.n	8004436 <_svfiprintf_r+0x36>
 8004414:	690b      	ldr	r3, [r1, #16]
 8004416:	b973      	cbnz	r3, 8004436 <_svfiprintf_r+0x36>
 8004418:	2140      	movs	r1, #64	@ 0x40
 800441a:	f7ff ff09 	bl	8004230 <_malloc_r>
 800441e:	6028      	str	r0, [r5, #0]
 8004420:	6128      	str	r0, [r5, #16]
 8004422:	b930      	cbnz	r0, 8004432 <_svfiprintf_r+0x32>
 8004424:	230c      	movs	r3, #12
 8004426:	603b      	str	r3, [r7, #0]
 8004428:	f04f 30ff 	mov.w	r0, #4294967295
 800442c:	b01d      	add	sp, #116	@ 0x74
 800442e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004432:	2340      	movs	r3, #64	@ 0x40
 8004434:	616b      	str	r3, [r5, #20]
 8004436:	2300      	movs	r3, #0
 8004438:	9309      	str	r3, [sp, #36]	@ 0x24
 800443a:	2320      	movs	r3, #32
 800443c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004440:	f8cd 800c 	str.w	r8, [sp, #12]
 8004444:	2330      	movs	r3, #48	@ 0x30
 8004446:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80045e4 <_svfiprintf_r+0x1e4>
 800444a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800444e:	f04f 0901 	mov.w	r9, #1
 8004452:	4623      	mov	r3, r4
 8004454:	469a      	mov	sl, r3
 8004456:	f813 2b01 	ldrb.w	r2, [r3], #1
 800445a:	b10a      	cbz	r2, 8004460 <_svfiprintf_r+0x60>
 800445c:	2a25      	cmp	r2, #37	@ 0x25
 800445e:	d1f9      	bne.n	8004454 <_svfiprintf_r+0x54>
 8004460:	ebba 0b04 	subs.w	fp, sl, r4
 8004464:	d00b      	beq.n	800447e <_svfiprintf_r+0x7e>
 8004466:	465b      	mov	r3, fp
 8004468:	4622      	mov	r2, r4
 800446a:	4629      	mov	r1, r5
 800446c:	4638      	mov	r0, r7
 800446e:	f7ff ff6b 	bl	8004348 <__ssputs_r>
 8004472:	3001      	adds	r0, #1
 8004474:	f000 80a7 	beq.w	80045c6 <_svfiprintf_r+0x1c6>
 8004478:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800447a:	445a      	add	r2, fp
 800447c:	9209      	str	r2, [sp, #36]	@ 0x24
 800447e:	f89a 3000 	ldrb.w	r3, [sl]
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 809f 	beq.w	80045c6 <_svfiprintf_r+0x1c6>
 8004488:	2300      	movs	r3, #0
 800448a:	f04f 32ff 	mov.w	r2, #4294967295
 800448e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004492:	f10a 0a01 	add.w	sl, sl, #1
 8004496:	9304      	str	r3, [sp, #16]
 8004498:	9307      	str	r3, [sp, #28]
 800449a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800449e:	931a      	str	r3, [sp, #104]	@ 0x68
 80044a0:	4654      	mov	r4, sl
 80044a2:	2205      	movs	r2, #5
 80044a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044a8:	484e      	ldr	r0, [pc, #312]	@ (80045e4 <_svfiprintf_r+0x1e4>)
 80044aa:	f7fb fec9 	bl	8000240 <memchr>
 80044ae:	9a04      	ldr	r2, [sp, #16]
 80044b0:	b9d8      	cbnz	r0, 80044ea <_svfiprintf_r+0xea>
 80044b2:	06d0      	lsls	r0, r2, #27
 80044b4:	bf44      	itt	mi
 80044b6:	2320      	movmi	r3, #32
 80044b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044bc:	0711      	lsls	r1, r2, #28
 80044be:	bf44      	itt	mi
 80044c0:	232b      	movmi	r3, #43	@ 0x2b
 80044c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044c6:	f89a 3000 	ldrb.w	r3, [sl]
 80044ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80044cc:	d015      	beq.n	80044fa <_svfiprintf_r+0xfa>
 80044ce:	9a07      	ldr	r2, [sp, #28]
 80044d0:	4654      	mov	r4, sl
 80044d2:	2000      	movs	r0, #0
 80044d4:	f04f 0c0a 	mov.w	ip, #10
 80044d8:	4621      	mov	r1, r4
 80044da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044de:	3b30      	subs	r3, #48	@ 0x30
 80044e0:	2b09      	cmp	r3, #9
 80044e2:	d94b      	bls.n	800457c <_svfiprintf_r+0x17c>
 80044e4:	b1b0      	cbz	r0, 8004514 <_svfiprintf_r+0x114>
 80044e6:	9207      	str	r2, [sp, #28]
 80044e8:	e014      	b.n	8004514 <_svfiprintf_r+0x114>
 80044ea:	eba0 0308 	sub.w	r3, r0, r8
 80044ee:	fa09 f303 	lsl.w	r3, r9, r3
 80044f2:	4313      	orrs	r3, r2
 80044f4:	9304      	str	r3, [sp, #16]
 80044f6:	46a2      	mov	sl, r4
 80044f8:	e7d2      	b.n	80044a0 <_svfiprintf_r+0xa0>
 80044fa:	9b03      	ldr	r3, [sp, #12]
 80044fc:	1d19      	adds	r1, r3, #4
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	9103      	str	r1, [sp, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	bfbb      	ittet	lt
 8004506:	425b      	neglt	r3, r3
 8004508:	f042 0202 	orrlt.w	r2, r2, #2
 800450c:	9307      	strge	r3, [sp, #28]
 800450e:	9307      	strlt	r3, [sp, #28]
 8004510:	bfb8      	it	lt
 8004512:	9204      	strlt	r2, [sp, #16]
 8004514:	7823      	ldrb	r3, [r4, #0]
 8004516:	2b2e      	cmp	r3, #46	@ 0x2e
 8004518:	d10a      	bne.n	8004530 <_svfiprintf_r+0x130>
 800451a:	7863      	ldrb	r3, [r4, #1]
 800451c:	2b2a      	cmp	r3, #42	@ 0x2a
 800451e:	d132      	bne.n	8004586 <_svfiprintf_r+0x186>
 8004520:	9b03      	ldr	r3, [sp, #12]
 8004522:	1d1a      	adds	r2, r3, #4
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	9203      	str	r2, [sp, #12]
 8004528:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800452c:	3402      	adds	r4, #2
 800452e:	9305      	str	r3, [sp, #20]
 8004530:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80045f4 <_svfiprintf_r+0x1f4>
 8004534:	7821      	ldrb	r1, [r4, #0]
 8004536:	2203      	movs	r2, #3
 8004538:	4650      	mov	r0, sl
 800453a:	f7fb fe81 	bl	8000240 <memchr>
 800453e:	b138      	cbz	r0, 8004550 <_svfiprintf_r+0x150>
 8004540:	9b04      	ldr	r3, [sp, #16]
 8004542:	eba0 000a 	sub.w	r0, r0, sl
 8004546:	2240      	movs	r2, #64	@ 0x40
 8004548:	4082      	lsls	r2, r0
 800454a:	4313      	orrs	r3, r2
 800454c:	3401      	adds	r4, #1
 800454e:	9304      	str	r3, [sp, #16]
 8004550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004554:	4824      	ldr	r0, [pc, #144]	@ (80045e8 <_svfiprintf_r+0x1e8>)
 8004556:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800455a:	2206      	movs	r2, #6
 800455c:	f7fb fe70 	bl	8000240 <memchr>
 8004560:	2800      	cmp	r0, #0
 8004562:	d036      	beq.n	80045d2 <_svfiprintf_r+0x1d2>
 8004564:	4b21      	ldr	r3, [pc, #132]	@ (80045ec <_svfiprintf_r+0x1ec>)
 8004566:	bb1b      	cbnz	r3, 80045b0 <_svfiprintf_r+0x1b0>
 8004568:	9b03      	ldr	r3, [sp, #12]
 800456a:	3307      	adds	r3, #7
 800456c:	f023 0307 	bic.w	r3, r3, #7
 8004570:	3308      	adds	r3, #8
 8004572:	9303      	str	r3, [sp, #12]
 8004574:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004576:	4433      	add	r3, r6
 8004578:	9309      	str	r3, [sp, #36]	@ 0x24
 800457a:	e76a      	b.n	8004452 <_svfiprintf_r+0x52>
 800457c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004580:	460c      	mov	r4, r1
 8004582:	2001      	movs	r0, #1
 8004584:	e7a8      	b.n	80044d8 <_svfiprintf_r+0xd8>
 8004586:	2300      	movs	r3, #0
 8004588:	3401      	adds	r4, #1
 800458a:	9305      	str	r3, [sp, #20]
 800458c:	4619      	mov	r1, r3
 800458e:	f04f 0c0a 	mov.w	ip, #10
 8004592:	4620      	mov	r0, r4
 8004594:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004598:	3a30      	subs	r2, #48	@ 0x30
 800459a:	2a09      	cmp	r2, #9
 800459c:	d903      	bls.n	80045a6 <_svfiprintf_r+0x1a6>
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0c6      	beq.n	8004530 <_svfiprintf_r+0x130>
 80045a2:	9105      	str	r1, [sp, #20]
 80045a4:	e7c4      	b.n	8004530 <_svfiprintf_r+0x130>
 80045a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80045aa:	4604      	mov	r4, r0
 80045ac:	2301      	movs	r3, #1
 80045ae:	e7f0      	b.n	8004592 <_svfiprintf_r+0x192>
 80045b0:	ab03      	add	r3, sp, #12
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	462a      	mov	r2, r5
 80045b6:	4b0e      	ldr	r3, [pc, #56]	@ (80045f0 <_svfiprintf_r+0x1f0>)
 80045b8:	a904      	add	r1, sp, #16
 80045ba:	4638      	mov	r0, r7
 80045bc:	f3af 8000 	nop.w
 80045c0:	1c42      	adds	r2, r0, #1
 80045c2:	4606      	mov	r6, r0
 80045c4:	d1d6      	bne.n	8004574 <_svfiprintf_r+0x174>
 80045c6:	89ab      	ldrh	r3, [r5, #12]
 80045c8:	065b      	lsls	r3, r3, #25
 80045ca:	f53f af2d 	bmi.w	8004428 <_svfiprintf_r+0x28>
 80045ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045d0:	e72c      	b.n	800442c <_svfiprintf_r+0x2c>
 80045d2:	ab03      	add	r3, sp, #12
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	462a      	mov	r2, r5
 80045d8:	4b05      	ldr	r3, [pc, #20]	@ (80045f0 <_svfiprintf_r+0x1f0>)
 80045da:	a904      	add	r1, sp, #16
 80045dc:	4638      	mov	r0, r7
 80045de:	f000 f879 	bl	80046d4 <_printf_i>
 80045e2:	e7ed      	b.n	80045c0 <_svfiprintf_r+0x1c0>
 80045e4:	08004bf5 	.word	0x08004bf5
 80045e8:	08004bff 	.word	0x08004bff
 80045ec:	00000000 	.word	0x00000000
 80045f0:	08004349 	.word	0x08004349
 80045f4:	08004bfb 	.word	0x08004bfb

080045f8 <_printf_common>:
 80045f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045fc:	4616      	mov	r6, r2
 80045fe:	4698      	mov	r8, r3
 8004600:	688a      	ldr	r2, [r1, #8]
 8004602:	690b      	ldr	r3, [r1, #16]
 8004604:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004608:	4293      	cmp	r3, r2
 800460a:	bfb8      	it	lt
 800460c:	4613      	movlt	r3, r2
 800460e:	6033      	str	r3, [r6, #0]
 8004610:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004614:	4607      	mov	r7, r0
 8004616:	460c      	mov	r4, r1
 8004618:	b10a      	cbz	r2, 800461e <_printf_common+0x26>
 800461a:	3301      	adds	r3, #1
 800461c:	6033      	str	r3, [r6, #0]
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	0699      	lsls	r1, r3, #26
 8004622:	bf42      	ittt	mi
 8004624:	6833      	ldrmi	r3, [r6, #0]
 8004626:	3302      	addmi	r3, #2
 8004628:	6033      	strmi	r3, [r6, #0]
 800462a:	6825      	ldr	r5, [r4, #0]
 800462c:	f015 0506 	ands.w	r5, r5, #6
 8004630:	d106      	bne.n	8004640 <_printf_common+0x48>
 8004632:	f104 0a19 	add.w	sl, r4, #25
 8004636:	68e3      	ldr	r3, [r4, #12]
 8004638:	6832      	ldr	r2, [r6, #0]
 800463a:	1a9b      	subs	r3, r3, r2
 800463c:	42ab      	cmp	r3, r5
 800463e:	dc26      	bgt.n	800468e <_printf_common+0x96>
 8004640:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004644:	6822      	ldr	r2, [r4, #0]
 8004646:	3b00      	subs	r3, #0
 8004648:	bf18      	it	ne
 800464a:	2301      	movne	r3, #1
 800464c:	0692      	lsls	r2, r2, #26
 800464e:	d42b      	bmi.n	80046a8 <_printf_common+0xb0>
 8004650:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004654:	4641      	mov	r1, r8
 8004656:	4638      	mov	r0, r7
 8004658:	47c8      	blx	r9
 800465a:	3001      	adds	r0, #1
 800465c:	d01e      	beq.n	800469c <_printf_common+0xa4>
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	6922      	ldr	r2, [r4, #16]
 8004662:	f003 0306 	and.w	r3, r3, #6
 8004666:	2b04      	cmp	r3, #4
 8004668:	bf02      	ittt	eq
 800466a:	68e5      	ldreq	r5, [r4, #12]
 800466c:	6833      	ldreq	r3, [r6, #0]
 800466e:	1aed      	subeq	r5, r5, r3
 8004670:	68a3      	ldr	r3, [r4, #8]
 8004672:	bf0c      	ite	eq
 8004674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004678:	2500      	movne	r5, #0
 800467a:	4293      	cmp	r3, r2
 800467c:	bfc4      	itt	gt
 800467e:	1a9b      	subgt	r3, r3, r2
 8004680:	18ed      	addgt	r5, r5, r3
 8004682:	2600      	movs	r6, #0
 8004684:	341a      	adds	r4, #26
 8004686:	42b5      	cmp	r5, r6
 8004688:	d11a      	bne.n	80046c0 <_printf_common+0xc8>
 800468a:	2000      	movs	r0, #0
 800468c:	e008      	b.n	80046a0 <_printf_common+0xa8>
 800468e:	2301      	movs	r3, #1
 8004690:	4652      	mov	r2, sl
 8004692:	4641      	mov	r1, r8
 8004694:	4638      	mov	r0, r7
 8004696:	47c8      	blx	r9
 8004698:	3001      	adds	r0, #1
 800469a:	d103      	bne.n	80046a4 <_printf_common+0xac>
 800469c:	f04f 30ff 	mov.w	r0, #4294967295
 80046a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046a4:	3501      	adds	r5, #1
 80046a6:	e7c6      	b.n	8004636 <_printf_common+0x3e>
 80046a8:	18e1      	adds	r1, r4, r3
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	2030      	movs	r0, #48	@ 0x30
 80046ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046b2:	4422      	add	r2, r4
 80046b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046bc:	3302      	adds	r3, #2
 80046be:	e7c7      	b.n	8004650 <_printf_common+0x58>
 80046c0:	2301      	movs	r3, #1
 80046c2:	4622      	mov	r2, r4
 80046c4:	4641      	mov	r1, r8
 80046c6:	4638      	mov	r0, r7
 80046c8:	47c8      	blx	r9
 80046ca:	3001      	adds	r0, #1
 80046cc:	d0e6      	beq.n	800469c <_printf_common+0xa4>
 80046ce:	3601      	adds	r6, #1
 80046d0:	e7d9      	b.n	8004686 <_printf_common+0x8e>
	...

080046d4 <_printf_i>:
 80046d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046d8:	7e0f      	ldrb	r7, [r1, #24]
 80046da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046dc:	2f78      	cmp	r7, #120	@ 0x78
 80046de:	4691      	mov	r9, r2
 80046e0:	4680      	mov	r8, r0
 80046e2:	460c      	mov	r4, r1
 80046e4:	469a      	mov	sl, r3
 80046e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046ea:	d807      	bhi.n	80046fc <_printf_i+0x28>
 80046ec:	2f62      	cmp	r7, #98	@ 0x62
 80046ee:	d80a      	bhi.n	8004706 <_printf_i+0x32>
 80046f0:	2f00      	cmp	r7, #0
 80046f2:	f000 80d2 	beq.w	800489a <_printf_i+0x1c6>
 80046f6:	2f58      	cmp	r7, #88	@ 0x58
 80046f8:	f000 80b9 	beq.w	800486e <_printf_i+0x19a>
 80046fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004700:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004704:	e03a      	b.n	800477c <_printf_i+0xa8>
 8004706:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800470a:	2b15      	cmp	r3, #21
 800470c:	d8f6      	bhi.n	80046fc <_printf_i+0x28>
 800470e:	a101      	add	r1, pc, #4	@ (adr r1, 8004714 <_printf_i+0x40>)
 8004710:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004714:	0800476d 	.word	0x0800476d
 8004718:	08004781 	.word	0x08004781
 800471c:	080046fd 	.word	0x080046fd
 8004720:	080046fd 	.word	0x080046fd
 8004724:	080046fd 	.word	0x080046fd
 8004728:	080046fd 	.word	0x080046fd
 800472c:	08004781 	.word	0x08004781
 8004730:	080046fd 	.word	0x080046fd
 8004734:	080046fd 	.word	0x080046fd
 8004738:	080046fd 	.word	0x080046fd
 800473c:	080046fd 	.word	0x080046fd
 8004740:	08004881 	.word	0x08004881
 8004744:	080047ab 	.word	0x080047ab
 8004748:	0800483b 	.word	0x0800483b
 800474c:	080046fd 	.word	0x080046fd
 8004750:	080046fd 	.word	0x080046fd
 8004754:	080048a3 	.word	0x080048a3
 8004758:	080046fd 	.word	0x080046fd
 800475c:	080047ab 	.word	0x080047ab
 8004760:	080046fd 	.word	0x080046fd
 8004764:	080046fd 	.word	0x080046fd
 8004768:	08004843 	.word	0x08004843
 800476c:	6833      	ldr	r3, [r6, #0]
 800476e:	1d1a      	adds	r2, r3, #4
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6032      	str	r2, [r6, #0]
 8004774:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004778:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800477c:	2301      	movs	r3, #1
 800477e:	e09d      	b.n	80048bc <_printf_i+0x1e8>
 8004780:	6833      	ldr	r3, [r6, #0]
 8004782:	6820      	ldr	r0, [r4, #0]
 8004784:	1d19      	adds	r1, r3, #4
 8004786:	6031      	str	r1, [r6, #0]
 8004788:	0606      	lsls	r6, r0, #24
 800478a:	d501      	bpl.n	8004790 <_printf_i+0xbc>
 800478c:	681d      	ldr	r5, [r3, #0]
 800478e:	e003      	b.n	8004798 <_printf_i+0xc4>
 8004790:	0645      	lsls	r5, r0, #25
 8004792:	d5fb      	bpl.n	800478c <_printf_i+0xb8>
 8004794:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004798:	2d00      	cmp	r5, #0
 800479a:	da03      	bge.n	80047a4 <_printf_i+0xd0>
 800479c:	232d      	movs	r3, #45	@ 0x2d
 800479e:	426d      	negs	r5, r5
 80047a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047a4:	4859      	ldr	r0, [pc, #356]	@ (800490c <_printf_i+0x238>)
 80047a6:	230a      	movs	r3, #10
 80047a8:	e011      	b.n	80047ce <_printf_i+0xfa>
 80047aa:	6821      	ldr	r1, [r4, #0]
 80047ac:	6833      	ldr	r3, [r6, #0]
 80047ae:	0608      	lsls	r0, r1, #24
 80047b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80047b4:	d402      	bmi.n	80047bc <_printf_i+0xe8>
 80047b6:	0649      	lsls	r1, r1, #25
 80047b8:	bf48      	it	mi
 80047ba:	b2ad      	uxthmi	r5, r5
 80047bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80047be:	4853      	ldr	r0, [pc, #332]	@ (800490c <_printf_i+0x238>)
 80047c0:	6033      	str	r3, [r6, #0]
 80047c2:	bf14      	ite	ne
 80047c4:	230a      	movne	r3, #10
 80047c6:	2308      	moveq	r3, #8
 80047c8:	2100      	movs	r1, #0
 80047ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047ce:	6866      	ldr	r6, [r4, #4]
 80047d0:	60a6      	str	r6, [r4, #8]
 80047d2:	2e00      	cmp	r6, #0
 80047d4:	bfa2      	ittt	ge
 80047d6:	6821      	ldrge	r1, [r4, #0]
 80047d8:	f021 0104 	bicge.w	r1, r1, #4
 80047dc:	6021      	strge	r1, [r4, #0]
 80047de:	b90d      	cbnz	r5, 80047e4 <_printf_i+0x110>
 80047e0:	2e00      	cmp	r6, #0
 80047e2:	d04b      	beq.n	800487c <_printf_i+0x1a8>
 80047e4:	4616      	mov	r6, r2
 80047e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80047ea:	fb03 5711 	mls	r7, r3, r1, r5
 80047ee:	5dc7      	ldrb	r7, [r0, r7]
 80047f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047f4:	462f      	mov	r7, r5
 80047f6:	42bb      	cmp	r3, r7
 80047f8:	460d      	mov	r5, r1
 80047fa:	d9f4      	bls.n	80047e6 <_printf_i+0x112>
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d10b      	bne.n	8004818 <_printf_i+0x144>
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	07df      	lsls	r7, r3, #31
 8004804:	d508      	bpl.n	8004818 <_printf_i+0x144>
 8004806:	6923      	ldr	r3, [r4, #16]
 8004808:	6861      	ldr	r1, [r4, #4]
 800480a:	4299      	cmp	r1, r3
 800480c:	bfde      	ittt	le
 800480e:	2330      	movle	r3, #48	@ 0x30
 8004810:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004814:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004818:	1b92      	subs	r2, r2, r6
 800481a:	6122      	str	r2, [r4, #16]
 800481c:	f8cd a000 	str.w	sl, [sp]
 8004820:	464b      	mov	r3, r9
 8004822:	aa03      	add	r2, sp, #12
 8004824:	4621      	mov	r1, r4
 8004826:	4640      	mov	r0, r8
 8004828:	f7ff fee6 	bl	80045f8 <_printf_common>
 800482c:	3001      	adds	r0, #1
 800482e:	d14a      	bne.n	80048c6 <_printf_i+0x1f2>
 8004830:	f04f 30ff 	mov.w	r0, #4294967295
 8004834:	b004      	add	sp, #16
 8004836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	f043 0320 	orr.w	r3, r3, #32
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	4833      	ldr	r0, [pc, #204]	@ (8004910 <_printf_i+0x23c>)
 8004844:	2778      	movs	r7, #120	@ 0x78
 8004846:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	6831      	ldr	r1, [r6, #0]
 800484e:	061f      	lsls	r7, r3, #24
 8004850:	f851 5b04 	ldr.w	r5, [r1], #4
 8004854:	d402      	bmi.n	800485c <_printf_i+0x188>
 8004856:	065f      	lsls	r7, r3, #25
 8004858:	bf48      	it	mi
 800485a:	b2ad      	uxthmi	r5, r5
 800485c:	6031      	str	r1, [r6, #0]
 800485e:	07d9      	lsls	r1, r3, #31
 8004860:	bf44      	itt	mi
 8004862:	f043 0320 	orrmi.w	r3, r3, #32
 8004866:	6023      	strmi	r3, [r4, #0]
 8004868:	b11d      	cbz	r5, 8004872 <_printf_i+0x19e>
 800486a:	2310      	movs	r3, #16
 800486c:	e7ac      	b.n	80047c8 <_printf_i+0xf4>
 800486e:	4827      	ldr	r0, [pc, #156]	@ (800490c <_printf_i+0x238>)
 8004870:	e7e9      	b.n	8004846 <_printf_i+0x172>
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	f023 0320 	bic.w	r3, r3, #32
 8004878:	6023      	str	r3, [r4, #0]
 800487a:	e7f6      	b.n	800486a <_printf_i+0x196>
 800487c:	4616      	mov	r6, r2
 800487e:	e7bd      	b.n	80047fc <_printf_i+0x128>
 8004880:	6833      	ldr	r3, [r6, #0]
 8004882:	6825      	ldr	r5, [r4, #0]
 8004884:	6961      	ldr	r1, [r4, #20]
 8004886:	1d18      	adds	r0, r3, #4
 8004888:	6030      	str	r0, [r6, #0]
 800488a:	062e      	lsls	r6, r5, #24
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	d501      	bpl.n	8004894 <_printf_i+0x1c0>
 8004890:	6019      	str	r1, [r3, #0]
 8004892:	e002      	b.n	800489a <_printf_i+0x1c6>
 8004894:	0668      	lsls	r0, r5, #25
 8004896:	d5fb      	bpl.n	8004890 <_printf_i+0x1bc>
 8004898:	8019      	strh	r1, [r3, #0]
 800489a:	2300      	movs	r3, #0
 800489c:	6123      	str	r3, [r4, #16]
 800489e:	4616      	mov	r6, r2
 80048a0:	e7bc      	b.n	800481c <_printf_i+0x148>
 80048a2:	6833      	ldr	r3, [r6, #0]
 80048a4:	1d1a      	adds	r2, r3, #4
 80048a6:	6032      	str	r2, [r6, #0]
 80048a8:	681e      	ldr	r6, [r3, #0]
 80048aa:	6862      	ldr	r2, [r4, #4]
 80048ac:	2100      	movs	r1, #0
 80048ae:	4630      	mov	r0, r6
 80048b0:	f7fb fcc6 	bl	8000240 <memchr>
 80048b4:	b108      	cbz	r0, 80048ba <_printf_i+0x1e6>
 80048b6:	1b80      	subs	r0, r0, r6
 80048b8:	6060      	str	r0, [r4, #4]
 80048ba:	6863      	ldr	r3, [r4, #4]
 80048bc:	6123      	str	r3, [r4, #16]
 80048be:	2300      	movs	r3, #0
 80048c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048c4:	e7aa      	b.n	800481c <_printf_i+0x148>
 80048c6:	6923      	ldr	r3, [r4, #16]
 80048c8:	4632      	mov	r2, r6
 80048ca:	4649      	mov	r1, r9
 80048cc:	4640      	mov	r0, r8
 80048ce:	47d0      	blx	sl
 80048d0:	3001      	adds	r0, #1
 80048d2:	d0ad      	beq.n	8004830 <_printf_i+0x15c>
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	079b      	lsls	r3, r3, #30
 80048d8:	d413      	bmi.n	8004902 <_printf_i+0x22e>
 80048da:	68e0      	ldr	r0, [r4, #12]
 80048dc:	9b03      	ldr	r3, [sp, #12]
 80048de:	4298      	cmp	r0, r3
 80048e0:	bfb8      	it	lt
 80048e2:	4618      	movlt	r0, r3
 80048e4:	e7a6      	b.n	8004834 <_printf_i+0x160>
 80048e6:	2301      	movs	r3, #1
 80048e8:	4632      	mov	r2, r6
 80048ea:	4649      	mov	r1, r9
 80048ec:	4640      	mov	r0, r8
 80048ee:	47d0      	blx	sl
 80048f0:	3001      	adds	r0, #1
 80048f2:	d09d      	beq.n	8004830 <_printf_i+0x15c>
 80048f4:	3501      	adds	r5, #1
 80048f6:	68e3      	ldr	r3, [r4, #12]
 80048f8:	9903      	ldr	r1, [sp, #12]
 80048fa:	1a5b      	subs	r3, r3, r1
 80048fc:	42ab      	cmp	r3, r5
 80048fe:	dcf2      	bgt.n	80048e6 <_printf_i+0x212>
 8004900:	e7eb      	b.n	80048da <_printf_i+0x206>
 8004902:	2500      	movs	r5, #0
 8004904:	f104 0619 	add.w	r6, r4, #25
 8004908:	e7f5      	b.n	80048f6 <_printf_i+0x222>
 800490a:	bf00      	nop
 800490c:	08004c06 	.word	0x08004c06
 8004910:	08004c17 	.word	0x08004c17

08004914 <memmove>:
 8004914:	4288      	cmp	r0, r1
 8004916:	b510      	push	{r4, lr}
 8004918:	eb01 0402 	add.w	r4, r1, r2
 800491c:	d902      	bls.n	8004924 <memmove+0x10>
 800491e:	4284      	cmp	r4, r0
 8004920:	4623      	mov	r3, r4
 8004922:	d807      	bhi.n	8004934 <memmove+0x20>
 8004924:	1e43      	subs	r3, r0, #1
 8004926:	42a1      	cmp	r1, r4
 8004928:	d008      	beq.n	800493c <memmove+0x28>
 800492a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800492e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004932:	e7f8      	b.n	8004926 <memmove+0x12>
 8004934:	4402      	add	r2, r0
 8004936:	4601      	mov	r1, r0
 8004938:	428a      	cmp	r2, r1
 800493a:	d100      	bne.n	800493e <memmove+0x2a>
 800493c:	bd10      	pop	{r4, pc}
 800493e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004942:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004946:	e7f7      	b.n	8004938 <memmove+0x24>

08004948 <_sbrk_r>:
 8004948:	b538      	push	{r3, r4, r5, lr}
 800494a:	4d06      	ldr	r5, [pc, #24]	@ (8004964 <_sbrk_r+0x1c>)
 800494c:	2300      	movs	r3, #0
 800494e:	4604      	mov	r4, r0
 8004950:	4608      	mov	r0, r1
 8004952:	602b      	str	r3, [r5, #0]
 8004954:	f7fc fade 	bl	8000f14 <_sbrk>
 8004958:	1c43      	adds	r3, r0, #1
 800495a:	d102      	bne.n	8004962 <_sbrk_r+0x1a>
 800495c:	682b      	ldr	r3, [r5, #0]
 800495e:	b103      	cbz	r3, 8004962 <_sbrk_r+0x1a>
 8004960:	6023      	str	r3, [r4, #0]
 8004962:	bd38      	pop	{r3, r4, r5, pc}
 8004964:	200004b8 	.word	0x200004b8

08004968 <memcpy>:
 8004968:	440a      	add	r2, r1
 800496a:	4291      	cmp	r1, r2
 800496c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004970:	d100      	bne.n	8004974 <memcpy+0xc>
 8004972:	4770      	bx	lr
 8004974:	b510      	push	{r4, lr}
 8004976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800497a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800497e:	4291      	cmp	r1, r2
 8004980:	d1f9      	bne.n	8004976 <memcpy+0xe>
 8004982:	bd10      	pop	{r4, pc}

08004984 <_realloc_r>:
 8004984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004988:	4680      	mov	r8, r0
 800498a:	4615      	mov	r5, r2
 800498c:	460c      	mov	r4, r1
 800498e:	b921      	cbnz	r1, 800499a <_realloc_r+0x16>
 8004990:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004994:	4611      	mov	r1, r2
 8004996:	f7ff bc4b 	b.w	8004230 <_malloc_r>
 800499a:	b92a      	cbnz	r2, 80049a8 <_realloc_r+0x24>
 800499c:	f7ff fbdc 	bl	8004158 <_free_r>
 80049a0:	2400      	movs	r4, #0
 80049a2:	4620      	mov	r0, r4
 80049a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049a8:	f000 f81a 	bl	80049e0 <_malloc_usable_size_r>
 80049ac:	4285      	cmp	r5, r0
 80049ae:	4606      	mov	r6, r0
 80049b0:	d802      	bhi.n	80049b8 <_realloc_r+0x34>
 80049b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80049b6:	d8f4      	bhi.n	80049a2 <_realloc_r+0x1e>
 80049b8:	4629      	mov	r1, r5
 80049ba:	4640      	mov	r0, r8
 80049bc:	f7ff fc38 	bl	8004230 <_malloc_r>
 80049c0:	4607      	mov	r7, r0
 80049c2:	2800      	cmp	r0, #0
 80049c4:	d0ec      	beq.n	80049a0 <_realloc_r+0x1c>
 80049c6:	42b5      	cmp	r5, r6
 80049c8:	462a      	mov	r2, r5
 80049ca:	4621      	mov	r1, r4
 80049cc:	bf28      	it	cs
 80049ce:	4632      	movcs	r2, r6
 80049d0:	f7ff ffca 	bl	8004968 <memcpy>
 80049d4:	4621      	mov	r1, r4
 80049d6:	4640      	mov	r0, r8
 80049d8:	f7ff fbbe 	bl	8004158 <_free_r>
 80049dc:	463c      	mov	r4, r7
 80049de:	e7e0      	b.n	80049a2 <_realloc_r+0x1e>

080049e0 <_malloc_usable_size_r>:
 80049e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049e4:	1f18      	subs	r0, r3, #4
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	bfbc      	itt	lt
 80049ea:	580b      	ldrlt	r3, [r1, r0]
 80049ec:	18c0      	addlt	r0, r0, r3
 80049ee:	4770      	bx	lr

080049f0 <_init>:
 80049f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f2:	bf00      	nop
 80049f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049f6:	bc08      	pop	{r3}
 80049f8:	469e      	mov	lr, r3
 80049fa:	4770      	bx	lr

080049fc <_fini>:
 80049fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fe:	bf00      	nop
 8004a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a02:	bc08      	pop	{r3}
 8004a04:	469e      	mov	lr, r3
 8004a06:	4770      	bx	lr
