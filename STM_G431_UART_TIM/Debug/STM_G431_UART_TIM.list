
STM_G431_UART_TIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004114  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080042f4  080042f4  000052f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004374  08004374  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004374  08004374  00005374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800437c  0800437c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800437c  0800437c  0000537c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004380  08004380  00005380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004384  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  2000005c  080043e0  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  080043e0  000063bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d8aa  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a7  00000000  00000000  00013936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  00015ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000868  00000000  00000000  00016a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e3fb  00000000  00000000  00017270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b6b  00000000  00000000  0003566b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6b73  00000000  00000000  000461d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fcd49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f84  00000000  00000000  000fcd8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000ffd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080042dc 	.word	0x080042dc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	080042dc 	.word	0x080042dc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <apInit>:
#include "stm32g4xx.h"

#include "ap.h"

void apInit(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	uartInit();
 80005b4:	f000 f830 	bl	8000618 <uartInit>
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}

080005bc <apMain>:

void apMain(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
	uint32_t pre_time;

	pre_time = millis();
 80005c2:	f000 f896 	bl	80006f2 <millis>
 80005c6:	6078      	str	r0, [r7, #4]

	while(1)
	{
		if(millis() - pre_time >= 1000)
 80005c8:	f000 f893 	bl	80006f2 <millis>
 80005cc:	4602      	mov	r2, r0
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80005d6:	d3f7      	bcc.n	80005c8 <apMain+0xc>
		{
			pre_time = millis();
 80005d8:	f000 f88b 	bl	80006f2 <millis>
 80005dc:	6078      	str	r0, [r7, #4]
			ledToggle(_DEF_CH1);
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 f808 	bl	80005f4 <ledToggle>
			uartPrintf(_DEF_CH1, "test %f\n", 5);
 80005e4:	2205      	movs	r2, #5
 80005e6:	4902      	ldr	r1, [pc, #8]	@ (80005f0 <apMain+0x34>)
 80005e8:	2000      	movs	r0, #0
 80005ea:	f000 f849 	bl	8000680 <uartPrintf>
		if(millis() - pre_time >= 1000)
 80005ee:	e7eb      	b.n	80005c8 <apMain+0xc>
 80005f0:	080042f4 	.word	0x080042f4

080005f4 <ledToggle>:
			break;
	}
}

void ledToggle(uint8_t ch)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	switch(ch)
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d105      	bne.n	8000610 <ledToggle+0x1c>
	{
		case _DEF_CH1:
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000604:	2120      	movs	r1, #32
 8000606:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800060a:	f001 f8a1 	bl	8001750 <HAL_GPIO_TogglePin>
			break;
 800060e:	bf00      	nop
	}
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <uartInit>:




bool uartInit(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart1, &q_buf[0], UART_Q_BUF_MAX);
 800061c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000620:	4903      	ldr	r1, [pc, #12]	@ (8000630 <uartInit+0x18>)
 8000622:	4804      	ldr	r0, [pc, #16]	@ (8000634 <uartInit+0x1c>)
 8000624:	f002 f95e 	bl	80028e4 <HAL_UART_Receive_DMA>
	//HAL_UART_Receive_DMA(&hlpuart1, &q_buf[0], UART_Q_BUF_MAX);
	return true;
 8000628:	2301      	movs	r3, #1
}
 800062a:	4618      	mov	r0, r3
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000078 	.word	0x20000078
 8000634:	2000017c 	.word	0x2000017c

08000638 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
 8000644:	73fb      	strb	r3, [r7, #15]
	uint32_t ret = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef hal_ret;

	switch(ch)
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <uartWrite+0x1c>
 8000650:	2b01      	cmp	r3, #1
			/*hal_ret = HAL_UART_Transmit(&hlpuart1, p_data, length, 100);
			if(hal_ret == HAL_OK)
			{
				ret = length;
			}*/
			break;
 8000652:	e00e      	b.n	8000672 <uartWrite+0x3a>
			hal_ret = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	b29a      	uxth	r2, r3
 8000658:	2364      	movs	r3, #100	@ 0x64
 800065a:	68b9      	ldr	r1, [r7, #8]
 800065c:	4807      	ldr	r0, [pc, #28]	@ (800067c <uartWrite+0x44>)
 800065e:	f002 f8b3 	bl	80027c8 <HAL_UART_Transmit>
 8000662:	4603      	mov	r3, r0
 8000664:	74fb      	strb	r3, [r7, #19]
			if(hal_ret == HAL_OK)
 8000666:	7cfb      	ldrb	r3, [r7, #19]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d101      	bne.n	8000670 <uartWrite+0x38>
				ret = length;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	617b      	str	r3, [r7, #20]
			break;
 8000670:	bf00      	nop
	}

	return ret;
 8000672:	697b      	ldr	r3, [r7, #20]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3718      	adds	r7, #24
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	2000017c 	.word	0x2000017c

08000680 <uartPrintf>:

	return ret;
}

uint32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 8000680:	b40e      	push	{r1, r2, r3}
 8000682:	b580      	push	{r7, lr}
 8000684:	b0c7      	sub	sp, #284	@ 0x11c
 8000686:	af00      	add	r7, sp, #0
 8000688:	4602      	mov	r2, r0
 800068a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800068e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8000692:	701a      	strb	r2, [r3, #0]
	uint32_t ret = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	va_list arg;
	char print_buf[256];

	va_start(arg, fmt);
 800069a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800069e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	int len;
	len = vsnprintf(print_buf, 256, fmt, arg);
 80006a2:	f107 000c 	add.w	r0, r7, #12
 80006a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80006aa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80006ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006b2:	f003 f985 	bl	80039c0 <vsniprintf>
 80006b6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

	va_end(arg);

	if(len > 0)
 80006ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80006be:	2b00      	cmp	r3, #0
 80006c0:	dd0d      	ble.n	80006de <uartPrintf+0x5e>
	{
		ret = uartWrite(ch, (uint8_t *)print_buf, len);
 80006c2:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80006c6:	f107 010c 	add.w	r1, r7, #12
 80006ca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80006ce:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ffaf 	bl	8000638 <uartWrite>
 80006da:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
	}

	return ret;
 80006de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80006e8:	46bd      	mov	sp, r7
 80006ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006ee:	b003      	add	sp, #12
 80006f0:	4770      	bx	lr

080006f2 <millis>:
{
	HAL_Delay(time_ms);
}

uint32_t millis(void)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80006f6:	f000 fae1 	bl	8000cbc <HAL_GetTick>
 80006fa:	4603      	mov	r3, r0
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	bd80      	pop	{r7, pc}

08000700 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000706:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <MX_DMA_Init+0x50>)
 8000708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800070a:	4a11      	ldr	r2, [pc, #68]	@ (8000750 <MX_DMA_Init+0x50>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6493      	str	r3, [r2, #72]	@ 0x48
 8000712:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <MX_DMA_Init+0x50>)
 8000714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800071e:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_DMA_Init+0x50>)
 8000720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000722:	4a0b      	ldr	r2, [pc, #44]	@ (8000750 <MX_DMA_Init+0x50>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6493      	str	r3, [r2, #72]	@ 0x48
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_DMA_Init+0x50>)
 800072c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2100      	movs	r1, #0
 800073a:	200b      	movs	r0, #11
 800073c:	f000 fbc7 	bl	8000ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000740:	200b      	movs	r0, #11
 8000742:	f000 fbde 	bl	8000f02 <HAL_NVIC_EnableIRQ>

}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000

08000754 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b19      	ldr	r3, [pc, #100]	@ (80007d0 <MX_GPIO_Init+0x7c>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076e:	4a18      	ldr	r2, [pc, #96]	@ (80007d0 <MX_GPIO_Init+0x7c>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000776:	4b16      	ldr	r3, [pc, #88]	@ (80007d0 <MX_GPIO_Init+0x7c>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <MX_GPIO_Init+0x7c>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000786:	4a12      	ldr	r2, [pc, #72]	@ (80007d0 <MX_GPIO_Init+0x7c>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800078e:	4b10      	ldr	r3, [pc, #64]	@ (80007d0 <MX_GPIO_Init+0x7c>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80007a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a4:	f000 ffbc 	bl	8001720 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Pin|SPI1_CS_Pin;
 80007a8:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 80007ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	4619      	mov	r1, r3
 80007c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c4:	f000 fe2a 	bl	800141c <HAL_GPIO_Init>

}
 80007c8:	bf00      	nop
 80007ca:	3720      	adds	r7, #32
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40021000 	.word	0x40021000

080007d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d8:	f000 fa0b 	bl	8000bf2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007dc:	f000 f815 	bl	800080a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e0:	f7ff ffb8 	bl	8000754 <MX_GPIO_Init>
  MX_DMA_Init();
 80007e4:	f7ff ff8c 	bl	8000700 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80007e8:	f000 f908 	bl	80009fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  apInit();
 80007ec:	f7ff fee0 	bl	80005b0 <apInit>
  apMain();
 80007f0:	f7ff fee4 	bl	80005bc <apMain>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80007f4:	2120      	movs	r1, #32
 80007f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007fa:	f000 ffa9 	bl	8001750 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80007fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000802:	f000 fa67 	bl	8000cd4 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000806:	bf00      	nop
 8000808:	e7f4      	b.n	80007f4 <main+0x20>

0800080a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b094      	sub	sp, #80	@ 0x50
 800080e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000810:	f107 0318 	add.w	r3, r7, #24
 8000814:	2238      	movs	r2, #56	@ 0x38
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f003 f8df 	bl	80039dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800082c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000830:	f000 ffa8 	bl	8001784 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000834:	2302      	movs	r3, #2
 8000836:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000838:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800083c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083e:	2340      	movs	r3, #64	@ 0x40
 8000840:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000842:	2302      	movs	r3, #2
 8000844:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000846:	2302      	movs	r3, #2
 8000848:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800084a:	2301      	movs	r3, #1
 800084c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 9;
 800084e:	2309      	movs	r3, #9
 8000850:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000852:	2302      	movs	r3, #2
 8000854:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000856:	2302      	movs	r3, #2
 8000858:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800085a:	2302      	movs	r3, #2
 800085c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085e:	f107 0318 	add.w	r3, r7, #24
 8000862:	4618      	mov	r0, r3
 8000864:	f001 f842 	bl	80018ec <HAL_RCC_OscConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800086e:	f000 f818 	bl	80008a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000872:	230f      	movs	r3, #15
 8000874:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000876:	2303      	movs	r3, #3
 8000878:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2102      	movs	r1, #2
 800088a:	4618      	mov	r0, r3
 800088c:	f001 fb40 	bl	8001f10 <HAL_RCC_ClockConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000896:	f000 f804 	bl	80008a2 <Error_Handler>
  }
}
 800089a:	bf00      	nop
 800089c:	3750      	adds	r7, #80	@ 0x50
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a6:	b672      	cpsid	i
}
 80008a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008aa:	bf00      	nop
 80008ac:	e7fd      	b.n	80008aa <Error_Handler+0x8>
	...

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <HAL_MspInit+0x44>)
 80008b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ba:	4a0e      	ldr	r2, [pc, #56]	@ (80008f4 <HAL_MspInit+0x44>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <HAL_MspInit+0x44>)
 80008c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <HAL_MspInit+0x44>)
 80008d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d2:	4a08      	ldr	r2, [pc, #32]	@ (80008f4 <HAL_MspInit+0x44>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <HAL_MspInit+0x44>)
 80008dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008e6:	f000 fff1 	bl	80018cc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40021000 	.word	0x40021000

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <NMI_Handler+0x4>

08000900 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <MemManage_Handler+0x4>

08000910 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <UsageFault_Handler+0x4>

08000920 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094e:	f000 f9a3 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800095c:	4802      	ldr	r0, [pc, #8]	@ (8000968 <DMA1_Channel1_IRQHandler+0x10>)
 800095e:	f000 fc0e 	bl	800117e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000210 	.word	0x20000210

0800096c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000974:	4a14      	ldr	r2, [pc, #80]	@ (80009c8 <_sbrk+0x5c>)
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <_sbrk+0x60>)
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000980:	4b13      	ldr	r3, [pc, #76]	@ (80009d0 <_sbrk+0x64>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d102      	bne.n	800098e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <_sbrk+0x64>)
 800098a:	4a12      	ldr	r2, [pc, #72]	@ (80009d4 <_sbrk+0x68>)
 800098c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800098e:	4b10      	ldr	r3, [pc, #64]	@ (80009d0 <_sbrk+0x64>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	429a      	cmp	r2, r3
 800099a:	d207      	bcs.n	80009ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800099c:	f003 f826 	bl	80039ec <__errno>
 80009a0:	4603      	mov	r3, r0
 80009a2:	220c      	movs	r2, #12
 80009a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
 80009aa:	e009      	b.n	80009c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009ac:	4b08      	ldr	r3, [pc, #32]	@ (80009d0 <_sbrk+0x64>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009b2:	4b07      	ldr	r3, [pc, #28]	@ (80009d0 <_sbrk+0x64>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4413      	add	r3, r2
 80009ba:	4a05      	ldr	r2, [pc, #20]	@ (80009d0 <_sbrk+0x64>)
 80009bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009be:	68fb      	ldr	r3, [r7, #12]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3718      	adds	r7, #24
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20008000 	.word	0x20008000
 80009cc:	00000400 	.word	0x00000400
 80009d0:	20000178 	.word	0x20000178
 80009d4:	200003c0 	.word	0x200003c0

080009d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009dc:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <SystemInit+0x20>)
 80009de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009e2:	4a05      	ldr	r2, [pc, #20]	@ (80009f8 <SystemInit+0x20>)
 80009e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a00:	4b22      	ldr	r3, [pc, #136]	@ (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a02:	4a23      	ldr	r2, [pc, #140]	@ (8000a90 <MX_USART1_UART_Init+0x94>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a06:	4b21      	ldr	r3, [pc, #132]	@ (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a14:	4b1d      	ldr	r3, [pc, #116]	@ (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a20:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	4b19      	ldr	r3, [pc, #100]	@ (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2c:	4b17      	ldr	r3, [pc, #92]	@ (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a32:	4b16      	ldr	r3, [pc, #88]	@ (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a38:	4b14      	ldr	r3, [pc, #80]	@ (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a3e:	4b13      	ldr	r3, [pc, #76]	@ (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a44:	4811      	ldr	r0, [pc, #68]	@ (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a46:	f001 fe6f 	bl	8002728 <HAL_UART_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a50:	f7ff ff27 	bl	80008a2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a54:	2100      	movs	r1, #0
 8000a56:	480d      	ldr	r0, [pc, #52]	@ (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a58:	f002 febb 	bl	80037d2 <HAL_UARTEx_SetTxFifoThreshold>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a62:	f7ff ff1e 	bl	80008a2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a66:	2100      	movs	r1, #0
 8000a68:	4808      	ldr	r0, [pc, #32]	@ (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a6a:	f002 fef0 	bl	800384e <HAL_UARTEx_SetRxFifoThreshold>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a74:	f7ff ff15 	bl	80008a2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a78:	4804      	ldr	r0, [pc, #16]	@ (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a7a:	f002 fe71 	bl	8003760 <HAL_UARTEx_DisableFifoMode>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a84:	f7ff ff0d 	bl	80008a2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	2000017c 	.word	0x2000017c
 8000a90:	40013800 	.word	0x40013800

08000a94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b09a      	sub	sp, #104	@ 0x68
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aac:	f107 0310 	add.w	r3, r7, #16
 8000ab0:	2244      	movs	r2, #68	@ 0x44
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f002 ff91 	bl	80039dc <memset>
  if(uartHandle->Instance==USART1)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a33      	ldr	r2, [pc, #204]	@ (8000b8c <HAL_UART_MspInit+0xf8>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d15f      	bne.n	8000b84 <HAL_UART_MspInit+0xf0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f001 fc39 	bl	8002348 <HAL_RCCEx_PeriphCLKConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000adc:	f7ff fee1 	bl	80008a2 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ae0:	4b2b      	ldr	r3, [pc, #172]	@ (8000b90 <HAL_UART_MspInit+0xfc>)
 8000ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ae4:	4a2a      	ldr	r2, [pc, #168]	@ (8000b90 <HAL_UART_MspInit+0xfc>)
 8000ae6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aea:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aec:	4b28      	ldr	r3, [pc, #160]	@ (8000b90 <HAL_UART_MspInit+0xfc>)
 8000aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000af0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af8:	4b25      	ldr	r3, [pc, #148]	@ (8000b90 <HAL_UART_MspInit+0xfc>)
 8000afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afc:	4a24      	ldr	r2, [pc, #144]	@ (8000b90 <HAL_UART_MspInit+0xfc>)
 8000afe:	f043 0304 	orr.w	r3, r3, #4
 8000b02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b04:	4b22      	ldr	r3, [pc, #136]	@ (8000b90 <HAL_UART_MspInit+0xfc>)
 8000b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b10:	2330      	movs	r3, #48	@ 0x30
 8000b12:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b20:	2307      	movs	r3, #7
 8000b22:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b24:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b28:	4619      	mov	r1, r3
 8000b2a:	481a      	ldr	r0, [pc, #104]	@ (8000b94 <HAL_UART_MspInit+0x100>)
 8000b2c:	f000 fc76 	bl	800141c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000b30:	4b19      	ldr	r3, [pc, #100]	@ (8000b98 <HAL_UART_MspInit+0x104>)
 8000b32:	4a1a      	ldr	r2, [pc, #104]	@ (8000b9c <HAL_UART_MspInit+0x108>)
 8000b34:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000b36:	4b18      	ldr	r3, [pc, #96]	@ (8000b98 <HAL_UART_MspInit+0x104>)
 8000b38:	2218      	movs	r2, #24
 8000b3a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b3c:	4b16      	ldr	r3, [pc, #88]	@ (8000b98 <HAL_UART_MspInit+0x104>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b42:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <HAL_UART_MspInit+0x104>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b48:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <HAL_UART_MspInit+0x104>)
 8000b4a:	2280      	movs	r2, #128	@ 0x80
 8000b4c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b4e:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <HAL_UART_MspInit+0x104>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b54:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <HAL_UART_MspInit+0x104>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b98 <HAL_UART_MspInit+0x104>)
 8000b5c:	2220      	movs	r2, #32
 8000b5e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b60:	4b0d      	ldr	r3, [pc, #52]	@ (8000b98 <HAL_UART_MspInit+0x104>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b66:	480c      	ldr	r0, [pc, #48]	@ (8000b98 <HAL_UART_MspInit+0x104>)
 8000b68:	f000 f9e6 	bl	8000f38 <HAL_DMA_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8000b72:	f7ff fe96 	bl	80008a2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a07      	ldr	r2, [pc, #28]	@ (8000b98 <HAL_UART_MspInit+0x104>)
 8000b7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000b7e:	4a06      	ldr	r2, [pc, #24]	@ (8000b98 <HAL_UART_MspInit+0x104>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b84:	bf00      	nop
 8000b86:	3768      	adds	r7, #104	@ 0x68
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40013800 	.word	0x40013800
 8000b90:	40021000 	.word	0x40021000
 8000b94:	48000800 	.word	0x48000800
 8000b98:	20000210 	.word	0x20000210
 8000b9c:	40020008 	.word	0x40020008

08000ba0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ba0:	480d      	ldr	r0, [pc, #52]	@ (8000bd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ba2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ba4:	f7ff ff18 	bl	80009d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba8:	480c      	ldr	r0, [pc, #48]	@ (8000bdc <LoopForever+0x6>)
  ldr r1, =_edata
 8000baa:	490d      	ldr	r1, [pc, #52]	@ (8000be0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bac:	4a0d      	ldr	r2, [pc, #52]	@ (8000be4 <LoopForever+0xe>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000bb0:	e002      	b.n	8000bb8 <LoopCopyDataInit>

08000bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb6:	3304      	adds	r3, #4

08000bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bbc:	d3f9      	bcc.n	8000bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000be8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bec <LoopForever+0x16>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc4:	e001      	b.n	8000bca <LoopFillZerobss>

08000bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc8:	3204      	adds	r2, #4

08000bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bcc:	d3fb      	bcc.n	8000bc6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000bce:	f002 ff13 	bl	80039f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bd2:	f7ff fdff 	bl	80007d4 <main>

08000bd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bd6:	e7fe      	b.n	8000bd6 <LoopForever>
  ldr   r0, =_estack
 8000bd8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000be4:	08004384 	.word	0x08004384
  ldr r2, =_sbss
 8000be8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bec:	200003bc 	.word	0x200003bc

08000bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC1_2_IRQHandler>

08000bf2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfc:	2003      	movs	r0, #3
 8000bfe:	f000 f95b 	bl	8000eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c02:	200f      	movs	r0, #15
 8000c04:	f000 f80e 	bl	8000c24 <HAL_InitTick>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d002      	beq.n	8000c14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	71fb      	strb	r3, [r7, #7]
 8000c12:	e001      	b.n	8000c18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c14:	f7ff fe4c 	bl	80008b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c18:	79fb      	ldrb	r3, [r7, #7]

}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c30:	4b16      	ldr	r3, [pc, #88]	@ (8000c8c <HAL_InitTick+0x68>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d022      	beq.n	8000c7e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c38:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <HAL_InitTick+0x6c>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b13      	ldr	r3, [pc, #76]	@ (8000c8c <HAL_InitTick+0x68>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c44:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 f966 	bl	8000f1e <HAL_SYSTICK_Config>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d10f      	bne.n	8000c78 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b0f      	cmp	r3, #15
 8000c5c:	d809      	bhi.n	8000c72 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	6879      	ldr	r1, [r7, #4]
 8000c62:	f04f 30ff 	mov.w	r0, #4294967295
 8000c66:	f000 f932 	bl	8000ece <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c94 <HAL_InitTick+0x70>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6013      	str	r3, [r2, #0]
 8000c70:	e007      	b.n	8000c82 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	73fb      	strb	r3, [r7, #15]
 8000c76:	e004      	b.n	8000c82 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	73fb      	strb	r3, [r7, #15]
 8000c7c:	e001      	b.n	8000c82 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000008 	.word	0x20000008
 8000c90:	20000000 	.word	0x20000000
 8000c94:	20000004 	.word	0x20000004

08000c98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b05      	ldr	r3, [pc, #20]	@ (8000cb4 <HAL_IncTick+0x1c>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b05      	ldr	r3, [pc, #20]	@ (8000cb8 <HAL_IncTick+0x20>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	4a03      	ldr	r2, [pc, #12]	@ (8000cb4 <HAL_IncTick+0x1c>)
 8000ca8:	6013      	str	r3, [r2, #0]
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	20000270 	.word	0x20000270
 8000cb8:	20000008 	.word	0x20000008

08000cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	@ (8000cd0 <HAL_GetTick+0x14>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000270 	.word	0x20000270

08000cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cdc:	f7ff ffee 	bl	8000cbc <HAL_GetTick>
 8000ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cec:	d004      	beq.n	8000cf8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cee:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <HAL_Delay+0x40>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cf8:	bf00      	nop
 8000cfa:	f7ff ffdf 	bl	8000cbc <HAL_GetTick>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d8f7      	bhi.n	8000cfa <HAL_Delay+0x26>
  {
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	bf00      	nop
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000008 	.word	0x20000008

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	@ (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db0b      	blt.n	8000da6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f003 021f 	and.w	r2, r3, #31
 8000d94:	4907      	ldr	r1, [pc, #28]	@ (8000db4 <__NVIC_EnableIRQ+0x38>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	095b      	lsrs	r3, r3, #5
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000e100 	.word	0xe000e100

08000db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	6039      	str	r1, [r7, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	db0a      	blt.n	8000de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	490c      	ldr	r1, [pc, #48]	@ (8000e04 <__NVIC_SetPriority+0x4c>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	0112      	lsls	r2, r2, #4
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	440b      	add	r3, r1
 8000ddc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de0:	e00a      	b.n	8000df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4908      	ldr	r1, [pc, #32]	@ (8000e08 <__NVIC_SetPriority+0x50>)
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	f003 030f 	and.w	r3, r3, #15
 8000dee:	3b04      	subs	r3, #4
 8000df0:	0112      	lsls	r2, r2, #4
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	440b      	add	r3, r1
 8000df6:	761a      	strb	r2, [r3, #24]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	@ 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f1c3 0307 	rsb	r3, r3, #7
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	bf28      	it	cs
 8000e2a:	2304      	movcs	r3, #4
 8000e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3304      	adds	r3, #4
 8000e32:	2b06      	cmp	r3, #6
 8000e34:	d902      	bls.n	8000e3c <NVIC_EncodePriority+0x30>
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3b03      	subs	r3, #3
 8000e3a:	e000      	b.n	8000e3e <NVIC_EncodePriority+0x32>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	f04f 32ff 	mov.w	r2, #4294967295
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	401a      	ands	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e54:	f04f 31ff 	mov.w	r1, #4294967295
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	43d9      	mvns	r1, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	4313      	orrs	r3, r2
         );
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3724      	adds	r7, #36	@ 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e84:	d301      	bcc.n	8000e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e86:	2301      	movs	r3, #1
 8000e88:	e00f      	b.n	8000eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb4 <SysTick_Config+0x40>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e92:	210f      	movs	r1, #15
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f7ff ff8e 	bl	8000db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e9c:	4b05      	ldr	r3, [pc, #20]	@ (8000eb4 <SysTick_Config+0x40>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea2:	4b04      	ldr	r3, [pc, #16]	@ (8000eb4 <SysTick_Config+0x40>)
 8000ea4:	2207      	movs	r2, #7
 8000ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	e000e010 	.word	0xe000e010

08000eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff ff29 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b086      	sub	sp, #24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000edc:	f7ff ff40 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000ee0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	68b9      	ldr	r1, [r7, #8]
 8000ee6:	6978      	ldr	r0, [r7, #20]
 8000ee8:	f7ff ff90 	bl	8000e0c <NVIC_EncodePriority>
 8000eec:	4602      	mov	r2, r0
 8000eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff5f 	bl	8000db8 <__NVIC_SetPriority>
}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff33 	bl	8000d7c <__NVIC_EnableIRQ>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ffa4 	bl	8000e74 <SysTick_Config>
 8000f2c:	4603      	mov	r3, r0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e08d      	b.n	8001066 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b47      	ldr	r3, [pc, #284]	@ (8001070 <HAL_DMA_Init+0x138>)
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d80f      	bhi.n	8000f76 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4b45      	ldr	r3, [pc, #276]	@ (8001074 <HAL_DMA_Init+0x13c>)
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a45      	ldr	r2, [pc, #276]	@ (8001078 <HAL_DMA_Init+0x140>)
 8000f62:	fba2 2303 	umull	r2, r3, r2, r3
 8000f66:	091b      	lsrs	r3, r3, #4
 8000f68:	009a      	lsls	r2, r3, #2
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a42      	ldr	r2, [pc, #264]	@ (800107c <HAL_DMA_Init+0x144>)
 8000f72:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f74:	e00e      	b.n	8000f94 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4b40      	ldr	r3, [pc, #256]	@ (8001080 <HAL_DMA_Init+0x148>)
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a3d      	ldr	r2, [pc, #244]	@ (8001078 <HAL_DMA_Init+0x140>)
 8000f82:	fba2 2303 	umull	r2, r3, r2, r3
 8000f86:	091b      	lsrs	r3, r3, #4
 8000f88:	009a      	lsls	r2, r3, #2
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a3c      	ldr	r2, [pc, #240]	@ (8001084 <HAL_DMA_Init+0x14c>)
 8000f92:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2202      	movs	r2, #2
 8000f98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000fae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a1b      	ldr	r3, [r3, #32]
 8000fd6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f000 f9b6 	bl	8001358 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000ff4:	d102      	bne.n	8000ffc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001010:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d010      	beq.n	800103c <HAL_DMA_Init+0x104>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b04      	cmp	r3, #4
 8001020:	d80c      	bhi.n	800103c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 f9d6 	bl	80013d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	e008      	b.n	800104e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2201      	movs	r2, #1
 8001058:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40020407 	.word	0x40020407
 8001074:	bffdfff8 	.word	0xbffdfff8
 8001078:	cccccccd 	.word	0xcccccccd
 800107c:	40020000 	.word	0x40020000
 8001080:	bffdfbf8 	.word	0xbffdfbf8
 8001084:	40020400 	.word	0x40020400

08001088 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
 8001094:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d101      	bne.n	80010a8 <HAL_DMA_Start_IT+0x20>
 80010a4:	2302      	movs	r3, #2
 80010a6:	e066      	b.n	8001176 <HAL_DMA_Start_IT+0xee>
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2201      	movs	r2, #1
 80010ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d155      	bne.n	8001168 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2202      	movs	r2, #2
 80010c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2200      	movs	r2, #0
 80010c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 0201 	bic.w	r2, r2, #1
 80010d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	68b9      	ldr	r1, [r7, #8]
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f000 f8fb 	bl	80012dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d008      	beq.n	8001100 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f042 020e 	orr.w	r2, r2, #14
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	e00f      	b.n	8001120 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0204 	bic.w	r2, r2, #4
 800110e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 020a 	orr.w	r2, r2, #10
 800111e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d007      	beq.n	800113e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001138:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800113c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001142:	2b00      	cmp	r3, #0
 8001144:	d007      	beq.n	8001156 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001150:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001154:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f042 0201 	orr.w	r2, r2, #1
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	e005      	b.n	8001174 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001170:	2302      	movs	r3, #2
 8001172:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001174:	7dfb      	ldrb	r3, [r7, #23]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b084      	sub	sp, #16
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119a:	f003 031f 	and.w	r3, r3, #31
 800119e:	2204      	movs	r2, #4
 80011a0:	409a      	lsls	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4013      	ands	r3, r2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d026      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x7a>
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d021      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0320 	and.w	r3, r3, #32
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d107      	bne.n	80011d2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0204 	bic.w	r2, r2, #4
 80011d0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d6:	f003 021f 	and.w	r2, r3, #31
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011de:	2104      	movs	r1, #4
 80011e0:	fa01 f202 	lsl.w	r2, r1, r2
 80011e4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d071      	beq.n	80012d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80011f6:	e06c      	b.n	80012d2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	2202      	movs	r2, #2
 8001202:	409a      	lsls	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4013      	ands	r3, r2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d02e      	beq.n	800126a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d029      	beq.n	800126a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0320 	and.w	r3, r3, #32
 8001220:	2b00      	cmp	r3, #0
 8001222:	d10b      	bne.n	800123c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 020a 	bic.w	r2, r2, #10
 8001232:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2201      	movs	r2, #1
 8001238:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001240:	f003 021f 	and.w	r2, r3, #31
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001248:	2102      	movs	r1, #2
 800124a:	fa01 f202 	lsl.w	r2, r1, r2
 800124e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800125c:	2b00      	cmp	r3, #0
 800125e:	d038      	beq.n	80012d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001268:	e033      	b.n	80012d2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126e:	f003 031f 	and.w	r3, r3, #31
 8001272:	2208      	movs	r2, #8
 8001274:	409a      	lsls	r2, r3
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4013      	ands	r3, r2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d02a      	beq.n	80012d4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	f003 0308 	and.w	r3, r3, #8
 8001284:	2b00      	cmp	r3, #0
 8001286:	d025      	beq.n	80012d4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 020e 	bic.w	r2, r2, #14
 8001296:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129c:	f003 021f 	and.w	r2, r3, #31
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a4:	2101      	movs	r1, #1
 80012a6:	fa01 f202 	lsl.w	r2, r1, r2
 80012aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2201      	movs	r2, #1
 80012b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2201      	movs	r2, #1
 80012b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d004      	beq.n	80012d4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80012d2:	bf00      	nop
 80012d4:	bf00      	nop
}
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80012f2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d004      	beq.n	8001306 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001300:	68fa      	ldr	r2, [r7, #12]
 8001302:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001304:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	f003 021f 	and.w	r2, r3, #31
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2b10      	cmp	r3, #16
 8001328:	d108      	bne.n	800133c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800133a:	e007      	b.n	800134c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	68ba      	ldr	r2, [r7, #8]
 8001342:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	60da      	str	r2, [r3, #12]
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001358:	b480      	push	{r7}
 800135a:	b087      	sub	sp, #28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001368:	429a      	cmp	r2, r3
 800136a:	d802      	bhi.n	8001372 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800136c:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	e001      	b.n	8001376 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001372:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001374:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	3b08      	subs	r3, #8
 8001382:	4a12      	ldr	r2, [pc, #72]	@ (80013cc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001384:	fba2 2303 	umull	r2, r3, r2, r3
 8001388:	091b      	lsrs	r3, r3, #4
 800138a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	009a      	lsls	r2, r3, #2
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4413      	add	r3, r2
 8001398:	461a      	mov	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a0b      	ldr	r2, [pc, #44]	@ (80013d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80013a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 031f 	and.w	r3, r3, #31
 80013aa:	2201      	movs	r2, #1
 80013ac:	409a      	lsls	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80013b2:	bf00      	nop
 80013b4:	371c      	adds	r7, #28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40020407 	.word	0x40020407
 80013c4:	40020800 	.word	0x40020800
 80013c8:	40020820 	.word	0x40020820
 80013cc:	cccccccd 	.word	0xcccccccd
 80013d0:	40020880 	.word	0x40020880

080013d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80013e8:	4413      	add	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	461a      	mov	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a08      	ldr	r2, [pc, #32]	@ (8001418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80013f6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	f003 031f 	and.w	r3, r3, #31
 8001400:	2201      	movs	r2, #1
 8001402:	409a      	lsls	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	1000823f 	.word	0x1000823f
 8001418:	40020940 	.word	0x40020940

0800141c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800141c:	b480      	push	{r7}
 800141e:	b087      	sub	sp, #28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800142a:	e15a      	b.n	80016e2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	2101      	movs	r1, #1
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	fa01 f303 	lsl.w	r3, r1, r3
 8001438:	4013      	ands	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 814c 	beq.w	80016dc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	2b01      	cmp	r3, #1
 800144e:	d005      	beq.n	800145c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001458:	2b02      	cmp	r3, #2
 800145a:	d130      	bne.n	80014be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	2203      	movs	r2, #3
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	68da      	ldr	r2, [r3, #12]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001492:	2201      	movs	r2, #1
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	091b      	lsrs	r3, r3, #4
 80014a8:	f003 0201 	and.w	r2, r3, #1
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	d017      	beq.n	80014fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	2203      	movs	r2, #3
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d123      	bne.n	800154e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	08da      	lsrs	r2, r3, #3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3208      	adds	r2, #8
 800150e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001512:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	220f      	movs	r2, #15
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	691a      	ldr	r2, [r3, #16]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	08da      	lsrs	r2, r3, #3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3208      	adds	r2, #8
 8001548:	6939      	ldr	r1, [r7, #16]
 800154a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	2203      	movs	r2, #3
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 0203 	and.w	r2, r3, #3
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 80a6 	beq.w	80016dc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001590:	4b5b      	ldr	r3, [pc, #364]	@ (8001700 <HAL_GPIO_Init+0x2e4>)
 8001592:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001594:	4a5a      	ldr	r2, [pc, #360]	@ (8001700 <HAL_GPIO_Init+0x2e4>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6613      	str	r3, [r2, #96]	@ 0x60
 800159c:	4b58      	ldr	r3, [pc, #352]	@ (8001700 <HAL_GPIO_Init+0x2e4>)
 800159e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015a8:	4a56      	ldr	r2, [pc, #344]	@ (8001704 <HAL_GPIO_Init+0x2e8>)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	3302      	adds	r3, #2
 80015b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	220f      	movs	r2, #15
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015d2:	d01f      	beq.n	8001614 <HAL_GPIO_Init+0x1f8>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a4c      	ldr	r2, [pc, #304]	@ (8001708 <HAL_GPIO_Init+0x2ec>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d019      	beq.n	8001610 <HAL_GPIO_Init+0x1f4>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a4b      	ldr	r2, [pc, #300]	@ (800170c <HAL_GPIO_Init+0x2f0>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d013      	beq.n	800160c <HAL_GPIO_Init+0x1f0>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a4a      	ldr	r2, [pc, #296]	@ (8001710 <HAL_GPIO_Init+0x2f4>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d00d      	beq.n	8001608 <HAL_GPIO_Init+0x1ec>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a49      	ldr	r2, [pc, #292]	@ (8001714 <HAL_GPIO_Init+0x2f8>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d007      	beq.n	8001604 <HAL_GPIO_Init+0x1e8>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a48      	ldr	r2, [pc, #288]	@ (8001718 <HAL_GPIO_Init+0x2fc>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d101      	bne.n	8001600 <HAL_GPIO_Init+0x1e4>
 80015fc:	2305      	movs	r3, #5
 80015fe:	e00a      	b.n	8001616 <HAL_GPIO_Init+0x1fa>
 8001600:	2306      	movs	r3, #6
 8001602:	e008      	b.n	8001616 <HAL_GPIO_Init+0x1fa>
 8001604:	2304      	movs	r3, #4
 8001606:	e006      	b.n	8001616 <HAL_GPIO_Init+0x1fa>
 8001608:	2303      	movs	r3, #3
 800160a:	e004      	b.n	8001616 <HAL_GPIO_Init+0x1fa>
 800160c:	2302      	movs	r3, #2
 800160e:	e002      	b.n	8001616 <HAL_GPIO_Init+0x1fa>
 8001610:	2301      	movs	r3, #1
 8001612:	e000      	b.n	8001616 <HAL_GPIO_Init+0x1fa>
 8001614:	2300      	movs	r3, #0
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	f002 0203 	and.w	r2, r2, #3
 800161c:	0092      	lsls	r2, r2, #2
 800161e:	4093      	lsls	r3, r2
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001626:	4937      	ldr	r1, [pc, #220]	@ (8001704 <HAL_GPIO_Init+0x2e8>)
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	089b      	lsrs	r3, r3, #2
 800162c:	3302      	adds	r3, #2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001634:	4b39      	ldr	r3, [pc, #228]	@ (800171c <HAL_GPIO_Init+0x300>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	43db      	mvns	r3, r3
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4013      	ands	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001658:	4a30      	ldr	r2, [pc, #192]	@ (800171c <HAL_GPIO_Init+0x300>)
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800165e:	4b2f      	ldr	r3, [pc, #188]	@ (800171c <HAL_GPIO_Init+0x300>)
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	43db      	mvns	r3, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4313      	orrs	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001682:	4a26      	ldr	r2, [pc, #152]	@ (800171c <HAL_GPIO_Init+0x300>)
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001688:	4b24      	ldr	r3, [pc, #144]	@ (800171c <HAL_GPIO_Init+0x300>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	43db      	mvns	r3, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016ac:	4a1b      	ldr	r2, [pc, #108]	@ (800171c <HAL_GPIO_Init+0x300>)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016b2:	4b1a      	ldr	r3, [pc, #104]	@ (800171c <HAL_GPIO_Init+0x300>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4013      	ands	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016d6:	4a11      	ldr	r2, [pc, #68]	@ (800171c <HAL_GPIO_Init+0x300>)
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	3301      	adds	r3, #1
 80016e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	fa22 f303 	lsr.w	r3, r2, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f47f ae9d 	bne.w	800142c <HAL_GPIO_Init+0x10>
  }
}
 80016f2:	bf00      	nop
 80016f4:	bf00      	nop
 80016f6:	371c      	adds	r7, #28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	40021000 	.word	0x40021000
 8001704:	40010000 	.word	0x40010000
 8001708:	48000400 	.word	0x48000400
 800170c:	48000800 	.word	0x48000800
 8001710:	48000c00 	.word	0x48000c00
 8001714:	48001000 	.word	0x48001000
 8001718:	48001400 	.word	0x48001400
 800171c:	40010400 	.word	0x40010400

08001720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	807b      	strh	r3, [r7, #2]
 800172c:	4613      	mov	r3, r2
 800172e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001730:	787b      	ldrb	r3, [r7, #1]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001736:	887a      	ldrh	r2, [r7, #2]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800173c:	e002      	b.n	8001744 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800173e:	887a      	ldrh	r2, [r7, #2]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001762:	887a      	ldrh	r2, [r7, #2]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4013      	ands	r3, r2
 8001768:	041a      	lsls	r2, r3, #16
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	43d9      	mvns	r1, r3
 800176e:	887b      	ldrh	r3, [r7, #2]
 8001770:	400b      	ands	r3, r1
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	619a      	str	r2, [r3, #24]
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d141      	bne.n	8001816 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001792:	4b4b      	ldr	r3, [pc, #300]	@ (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800179a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800179e:	d131      	bne.n	8001804 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017a0:	4b47      	ldr	r3, [pc, #284]	@ (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017a6:	4a46      	ldr	r2, [pc, #280]	@ (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017b0:	4b43      	ldr	r3, [pc, #268]	@ (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017b8:	4a41      	ldr	r2, [pc, #260]	@ (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017c0:	4b40      	ldr	r3, [pc, #256]	@ (80018c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2232      	movs	r2, #50	@ 0x32
 80017c6:	fb02 f303 	mul.w	r3, r2, r3
 80017ca:	4a3f      	ldr	r2, [pc, #252]	@ (80018c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017cc:	fba2 2303 	umull	r2, r3, r2, r3
 80017d0:	0c9b      	lsrs	r3, r3, #18
 80017d2:	3301      	adds	r3, #1
 80017d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017d6:	e002      	b.n	80017de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	3b01      	subs	r3, #1
 80017dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017de:	4b38      	ldr	r3, [pc, #224]	@ (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017ea:	d102      	bne.n	80017f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f2      	bne.n	80017d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017f2:	4b33      	ldr	r3, [pc, #204]	@ (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017fe:	d158      	bne.n	80018b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e057      	b.n	80018b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001804:	4b2e      	ldr	r3, [pc, #184]	@ (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800180a:	4a2d      	ldr	r2, [pc, #180]	@ (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800180c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001810:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001814:	e04d      	b.n	80018b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800181c:	d141      	bne.n	80018a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800181e:	4b28      	ldr	r3, [pc, #160]	@ (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800182a:	d131      	bne.n	8001890 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800182c:	4b24      	ldr	r3, [pc, #144]	@ (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800182e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001832:	4a23      	ldr	r2, [pc, #140]	@ (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001834:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001838:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800183c:	4b20      	ldr	r3, [pc, #128]	@ (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001844:	4a1e      	ldr	r2, [pc, #120]	@ (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001846:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800184a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800184c:	4b1d      	ldr	r3, [pc, #116]	@ (80018c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2232      	movs	r2, #50	@ 0x32
 8001852:	fb02 f303 	mul.w	r3, r2, r3
 8001856:	4a1c      	ldr	r2, [pc, #112]	@ (80018c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001858:	fba2 2303 	umull	r2, r3, r2, r3
 800185c:	0c9b      	lsrs	r3, r3, #18
 800185e:	3301      	adds	r3, #1
 8001860:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001862:	e002      	b.n	800186a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	3b01      	subs	r3, #1
 8001868:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800186a:	4b15      	ldr	r3, [pc, #84]	@ (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001876:	d102      	bne.n	800187e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f2      	bne.n	8001864 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800187e:	4b10      	ldr	r3, [pc, #64]	@ (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800188a:	d112      	bne.n	80018b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e011      	b.n	80018b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001890:	4b0b      	ldr	r3, [pc, #44]	@ (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001892:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001896:	4a0a      	ldr	r2, [pc, #40]	@ (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001898:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800189c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80018a0:	e007      	b.n	80018b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018a2:	4b07      	ldr	r3, [pc, #28]	@ (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018aa:	4a05      	ldr	r2, [pc, #20]	@ (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018b0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	40007000 	.word	0x40007000
 80018c4:	20000000 	.word	0x20000000
 80018c8:	431bde83 	.word	0x431bde83

080018cc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80018d0:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	4a04      	ldr	r2, [pc, #16]	@ (80018e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018da:	6093      	str	r3, [r2, #8]
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40007000 	.word	0x40007000

080018ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e2fe      	b.n	8001efc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d075      	beq.n	80019f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800190a:	4b97      	ldr	r3, [pc, #604]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001914:	4b94      	ldr	r3, [pc, #592]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	2b0c      	cmp	r3, #12
 8001922:	d102      	bne.n	800192a <HAL_RCC_OscConfig+0x3e>
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	2b03      	cmp	r3, #3
 8001928:	d002      	beq.n	8001930 <HAL_RCC_OscConfig+0x44>
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	2b08      	cmp	r3, #8
 800192e:	d10b      	bne.n	8001948 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001930:	4b8d      	ldr	r3, [pc, #564]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d05b      	beq.n	80019f4 <HAL_RCC_OscConfig+0x108>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d157      	bne.n	80019f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e2d9      	b.n	8001efc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001950:	d106      	bne.n	8001960 <HAL_RCC_OscConfig+0x74>
 8001952:	4b85      	ldr	r3, [pc, #532]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a84      	ldr	r2, [pc, #528]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	e01d      	b.n	800199c <HAL_RCC_OscConfig+0xb0>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001968:	d10c      	bne.n	8001984 <HAL_RCC_OscConfig+0x98>
 800196a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a7e      	ldr	r2, [pc, #504]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001970:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	4b7c      	ldr	r3, [pc, #496]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a7b      	ldr	r2, [pc, #492]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 800197c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	e00b      	b.n	800199c <HAL_RCC_OscConfig+0xb0>
 8001984:	4b78      	ldr	r3, [pc, #480]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a77      	ldr	r2, [pc, #476]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 800198a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	4b75      	ldr	r3, [pc, #468]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a74      	ldr	r2, [pc, #464]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001996:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800199a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d013      	beq.n	80019cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a4:	f7ff f98a 	bl	8000cbc <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ac:	f7ff f986 	bl	8000cbc <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b64      	cmp	r3, #100	@ 0x64
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e29e      	b.n	8001efc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019be:	4b6a      	ldr	r3, [pc, #424]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0f0      	beq.n	80019ac <HAL_RCC_OscConfig+0xc0>
 80019ca:	e014      	b.n	80019f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019cc:	f7ff f976 	bl	8000cbc <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d4:	f7ff f972 	bl	8000cbc <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b64      	cmp	r3, #100	@ 0x64
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e28a      	b.n	8001efc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019e6:	4b60      	ldr	r3, [pc, #384]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0xe8>
 80019f2:	e000      	b.n	80019f6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d075      	beq.n	8001aee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a02:	4b59      	ldr	r3, [pc, #356]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 030c 	and.w	r3, r3, #12
 8001a0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a0c:	4b56      	ldr	r3, [pc, #344]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	2b0c      	cmp	r3, #12
 8001a1a:	d102      	bne.n	8001a22 <HAL_RCC_OscConfig+0x136>
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d002      	beq.n	8001a28 <HAL_RCC_OscConfig+0x13c>
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	2b04      	cmp	r3, #4
 8001a26:	d11f      	bne.n	8001a68 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a28:	4b4f      	ldr	r3, [pc, #316]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d005      	beq.n	8001a40 <HAL_RCC_OscConfig+0x154>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e25d      	b.n	8001efc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a40:	4b49      	ldr	r3, [pc, #292]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	061b      	lsls	r3, r3, #24
 8001a4e:	4946      	ldr	r1, [pc, #280]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a54:	4b45      	ldr	r3, [pc, #276]	@ (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff f8e3 	bl	8000c24 <HAL_InitTick>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d043      	beq.n	8001aec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e249      	b.n	8001efc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d023      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a70:	4b3d      	ldr	r3, [pc, #244]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a3c      	ldr	r2, [pc, #240]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001a76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7c:	f7ff f91e 	bl	8000cbc <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a84:	f7ff f91a 	bl	8000cbc <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e232      	b.n	8001efc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a96:	4b34      	ldr	r3, [pc, #208]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa2:	4b31      	ldr	r3, [pc, #196]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	061b      	lsls	r3, r3, #24
 8001ab0:	492d      	ldr	r1, [pc, #180]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	604b      	str	r3, [r1, #4]
 8001ab6:	e01a      	b.n	8001aee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ab8:	4b2b      	ldr	r3, [pc, #172]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a2a      	ldr	r2, [pc, #168]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001abe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac4:	f7ff f8fa 	bl	8000cbc <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001acc:	f7ff f8f6 	bl	8000cbc <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e20e      	b.n	8001efc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ade:	4b22      	ldr	r3, [pc, #136]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x1e0>
 8001aea:	e000      	b.n	8001aee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d041      	beq.n	8001b7e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d01c      	beq.n	8001b3c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b02:	4b19      	ldr	r3, [pc, #100]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b08:	4a17      	ldr	r2, [pc, #92]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b12:	f7ff f8d3 	bl	8000cbc <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b1a:	f7ff f8cf 	bl	8000cbc <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e1e7      	b.n	8001efc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0ef      	beq.n	8001b1a <HAL_RCC_OscConfig+0x22e>
 8001b3a:	e020      	b.n	8001b7e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b42:	4a09      	ldr	r2, [pc, #36]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001b44:	f023 0301 	bic.w	r3, r3, #1
 8001b48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4c:	f7ff f8b6 	bl	8000cbc <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b52:	e00d      	b.n	8001b70 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b54:	f7ff f8b2 	bl	8000cbc <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d906      	bls.n	8001b70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e1ca      	b.n	8001efc <HAL_RCC_OscConfig+0x610>
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b70:	4b8c      	ldr	r3, [pc, #560]	@ (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1ea      	bne.n	8001b54 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0304 	and.w	r3, r3, #4
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 80a6 	beq.w	8001cd8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b90:	4b84      	ldr	r3, [pc, #528]	@ (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x2b4>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <HAL_RCC_OscConfig+0x2b6>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00d      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	4b7f      	ldr	r3, [pc, #508]	@ (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001baa:	4a7e      	ldr	r2, [pc, #504]	@ (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bb2:	4b7c      	ldr	r3, [pc, #496]	@ (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bc2:	4b79      	ldr	r3, [pc, #484]	@ (8001da8 <HAL_RCC_OscConfig+0x4bc>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d118      	bne.n	8001c00 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bce:	4b76      	ldr	r3, [pc, #472]	@ (8001da8 <HAL_RCC_OscConfig+0x4bc>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a75      	ldr	r2, [pc, #468]	@ (8001da8 <HAL_RCC_OscConfig+0x4bc>)
 8001bd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bda:	f7ff f86f 	bl	8000cbc <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be2:	f7ff f86b 	bl	8000cbc <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e183      	b.n	8001efc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bf4:	4b6c      	ldr	r3, [pc, #432]	@ (8001da8 <HAL_RCC_OscConfig+0x4bc>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f0      	beq.n	8001be2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d108      	bne.n	8001c1a <HAL_RCC_OscConfig+0x32e>
 8001c08:	4b66      	ldr	r3, [pc, #408]	@ (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c0e:	4a65      	ldr	r2, [pc, #404]	@ (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c18:	e024      	b.n	8001c64 <HAL_RCC_OscConfig+0x378>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b05      	cmp	r3, #5
 8001c20:	d110      	bne.n	8001c44 <HAL_RCC_OscConfig+0x358>
 8001c22:	4b60      	ldr	r3, [pc, #384]	@ (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c28:	4a5e      	ldr	r2, [pc, #376]	@ (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001c2a:	f043 0304 	orr.w	r3, r3, #4
 8001c2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c32:	4b5c      	ldr	r3, [pc, #368]	@ (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c38:	4a5a      	ldr	r2, [pc, #360]	@ (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c42:	e00f      	b.n	8001c64 <HAL_RCC_OscConfig+0x378>
 8001c44:	4b57      	ldr	r3, [pc, #348]	@ (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c4a:	4a56      	ldr	r2, [pc, #344]	@ (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001c4c:	f023 0301 	bic.w	r3, r3, #1
 8001c50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c54:	4b53      	ldr	r3, [pc, #332]	@ (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c5a:	4a52      	ldr	r2, [pc, #328]	@ (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001c5c:	f023 0304 	bic.w	r3, r3, #4
 8001c60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d016      	beq.n	8001c9a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6c:	f7ff f826 	bl	8000cbc <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c72:	e00a      	b.n	8001c8a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c74:	f7ff f822 	bl	8000cbc <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e138      	b.n	8001efc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c8a:	4b46      	ldr	r3, [pc, #280]	@ (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0ed      	beq.n	8001c74 <HAL_RCC_OscConfig+0x388>
 8001c98:	e015      	b.n	8001cc6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9a:	f7ff f80f 	bl	8000cbc <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ca0:	e00a      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca2:	f7ff f80b 	bl	8000cbc <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e121      	b.n	8001efc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb8:	4b3a      	ldr	r3, [pc, #232]	@ (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1ed      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cc6:	7ffb      	ldrb	r3, [r7, #31]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d105      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ccc:	4b35      	ldr	r3, [pc, #212]	@ (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd0:	4a34      	ldr	r2, [pc, #208]	@ (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001cd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cd6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0320 	and.w	r3, r3, #32
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d03c      	beq.n	8001d5e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d01c      	beq.n	8001d26 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cec:	4b2d      	ldr	r3, [pc, #180]	@ (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001cee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001cf2:	4a2c      	ldr	r2, [pc, #176]	@ (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfc:	f7fe ffde 	bl	8000cbc <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d04:	f7fe ffda 	bl	8000cbc <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e0f2      	b.n	8001efc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d16:	4b23      	ldr	r3, [pc, #140]	@ (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001d18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0ef      	beq.n	8001d04 <HAL_RCC_OscConfig+0x418>
 8001d24:	e01b      	b.n	8001d5e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d26:	4b1f      	ldr	r3, [pc, #124]	@ (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001d28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001d2e:	f023 0301 	bic.w	r3, r3, #1
 8001d32:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d36:	f7fe ffc1 	bl	8000cbc <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d3e:	f7fe ffbd 	bl	8000cbc <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e0d5      	b.n	8001efc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d50:	4b14      	ldr	r3, [pc, #80]	@ (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1ef      	bne.n	8001d3e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 80c9 	beq.w	8001efa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d68:	4b0e      	ldr	r3, [pc, #56]	@ (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 030c 	and.w	r3, r3, #12
 8001d70:	2b0c      	cmp	r3, #12
 8001d72:	f000 8083 	beq.w	8001e7c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d15e      	bne.n	8001e3c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7e:	4b09      	ldr	r3, [pc, #36]	@ (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a08      	ldr	r2, [pc, #32]	@ (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001d84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8a:	f7fe ff97 	bl	8000cbc <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d90:	e00c      	b.n	8001dac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d92:	f7fe ff93 	bl	8000cbc <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d905      	bls.n	8001dac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e0ab      	b.n	8001efc <HAL_RCC_OscConfig+0x610>
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dac:	4b55      	ldr	r3, [pc, #340]	@ (8001f04 <HAL_RCC_OscConfig+0x618>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1ec      	bne.n	8001d92 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001db8:	4b52      	ldr	r3, [pc, #328]	@ (8001f04 <HAL_RCC_OscConfig+0x618>)
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	4b52      	ldr	r3, [pc, #328]	@ (8001f08 <HAL_RCC_OscConfig+0x61c>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6a11      	ldr	r1, [r2, #32]
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001dc8:	3a01      	subs	r2, #1
 8001dca:	0112      	lsls	r2, r2, #4
 8001dcc:	4311      	orrs	r1, r2
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001dd2:	0212      	lsls	r2, r2, #8
 8001dd4:	4311      	orrs	r1, r2
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001dda:	0852      	lsrs	r2, r2, #1
 8001ddc:	3a01      	subs	r2, #1
 8001dde:	0552      	lsls	r2, r2, #21
 8001de0:	4311      	orrs	r1, r2
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001de6:	0852      	lsrs	r2, r2, #1
 8001de8:	3a01      	subs	r2, #1
 8001dea:	0652      	lsls	r2, r2, #25
 8001dec:	4311      	orrs	r1, r2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001df2:	06d2      	lsls	r2, r2, #27
 8001df4:	430a      	orrs	r2, r1
 8001df6:	4943      	ldr	r1, [pc, #268]	@ (8001f04 <HAL_RCC_OscConfig+0x618>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dfc:	4b41      	ldr	r3, [pc, #260]	@ (8001f04 <HAL_RCC_OscConfig+0x618>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a40      	ldr	r2, [pc, #256]	@ (8001f04 <HAL_RCC_OscConfig+0x618>)
 8001e02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e06:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e08:	4b3e      	ldr	r3, [pc, #248]	@ (8001f04 <HAL_RCC_OscConfig+0x618>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4a3d      	ldr	r2, [pc, #244]	@ (8001f04 <HAL_RCC_OscConfig+0x618>)
 8001e0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7fe ff52 	bl	8000cbc <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1c:	f7fe ff4e 	bl	8000cbc <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e066      	b.n	8001efc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e2e:	4b35      	ldr	r3, [pc, #212]	@ (8001f04 <HAL_RCC_OscConfig+0x618>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0x530>
 8001e3a:	e05e      	b.n	8001efa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3c:	4b31      	ldr	r3, [pc, #196]	@ (8001f04 <HAL_RCC_OscConfig+0x618>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a30      	ldr	r2, [pc, #192]	@ (8001f04 <HAL_RCC_OscConfig+0x618>)
 8001e42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7fe ff38 	bl	8000cbc <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e50:	f7fe ff34 	bl	8000cbc <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e04c      	b.n	8001efc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e62:	4b28      	ldr	r3, [pc, #160]	@ (8001f04 <HAL_RCC_OscConfig+0x618>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001e6e:	4b25      	ldr	r3, [pc, #148]	@ (8001f04 <HAL_RCC_OscConfig+0x618>)
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	4924      	ldr	r1, [pc, #144]	@ (8001f04 <HAL_RCC_OscConfig+0x618>)
 8001e74:	4b25      	ldr	r3, [pc, #148]	@ (8001f0c <HAL_RCC_OscConfig+0x620>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	60cb      	str	r3, [r1, #12]
 8001e7a:	e03e      	b.n	8001efa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e039      	b.n	8001efc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001e88:	4b1e      	ldr	r3, [pc, #120]	@ (8001f04 <HAL_RCC_OscConfig+0x618>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f003 0203 	and.w	r2, r3, #3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d12c      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d123      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d11b      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d113      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed8:	085b      	lsrs	r3, r3, #1
 8001eda:	3b01      	subs	r3, #1
 8001edc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d109      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eec:	085b      	lsrs	r3, r3, #1
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d001      	beq.n	8001efa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3720      	adds	r7, #32
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40021000 	.word	0x40021000
 8001f08:	019f800c 	.word	0x019f800c
 8001f0c:	feeefffc 	.word	0xfeeefffc

08001f10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e11e      	b.n	8002166 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f28:	4b91      	ldr	r3, [pc, #580]	@ (8002170 <HAL_RCC_ClockConfig+0x260>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 030f 	and.w	r3, r3, #15
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d910      	bls.n	8001f58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f36:	4b8e      	ldr	r3, [pc, #568]	@ (8002170 <HAL_RCC_ClockConfig+0x260>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 020f 	bic.w	r2, r3, #15
 8001f3e:	498c      	ldr	r1, [pc, #560]	@ (8002170 <HAL_RCC_ClockConfig+0x260>)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f46:	4b8a      	ldr	r3, [pc, #552]	@ (8002170 <HAL_RCC_ClockConfig+0x260>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d001      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e106      	b.n	8002166 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d073      	beq.n	800204c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d129      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f6c:	4b81      	ldr	r3, [pc, #516]	@ (8002174 <HAL_RCC_ClockConfig+0x264>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0f4      	b.n	8002166 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001f7c:	f000 f99e 	bl	80022bc <RCC_GetSysClockFreqFromPLLSource>
 8001f80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4a7c      	ldr	r2, [pc, #496]	@ (8002178 <HAL_RCC_ClockConfig+0x268>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d93f      	bls.n	800200a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f8a:	4b7a      	ldr	r3, [pc, #488]	@ (8002174 <HAL_RCC_ClockConfig+0x264>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d009      	beq.n	8001faa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d033      	beq.n	800200a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d12f      	bne.n	800200a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001faa:	4b72      	ldr	r3, [pc, #456]	@ (8002174 <HAL_RCC_ClockConfig+0x264>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001fb2:	4a70      	ldr	r2, [pc, #448]	@ (8002174 <HAL_RCC_ClockConfig+0x264>)
 8001fb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fb8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001fba:	2380      	movs	r3, #128	@ 0x80
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	e024      	b.n	800200a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d107      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fc8:	4b6a      	ldr	r3, [pc, #424]	@ (8002174 <HAL_RCC_ClockConfig+0x264>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d109      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0c6      	b.n	8002166 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fd8:	4b66      	ldr	r3, [pc, #408]	@ (8002174 <HAL_RCC_ClockConfig+0x264>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0be      	b.n	8002166 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001fe8:	f000 f8ce 	bl	8002188 <HAL_RCC_GetSysClockFreq>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4a61      	ldr	r2, [pc, #388]	@ (8002178 <HAL_RCC_ClockConfig+0x268>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d909      	bls.n	800200a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ff6:	4b5f      	ldr	r3, [pc, #380]	@ (8002174 <HAL_RCC_ClockConfig+0x264>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ffe:	4a5d      	ldr	r2, [pc, #372]	@ (8002174 <HAL_RCC_ClockConfig+0x264>)
 8002000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002004:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002006:	2380      	movs	r3, #128	@ 0x80
 8002008:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800200a:	4b5a      	ldr	r3, [pc, #360]	@ (8002174 <HAL_RCC_ClockConfig+0x264>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f023 0203 	bic.w	r2, r3, #3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	4957      	ldr	r1, [pc, #348]	@ (8002174 <HAL_RCC_ClockConfig+0x264>)
 8002018:	4313      	orrs	r3, r2
 800201a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800201c:	f7fe fe4e 	bl	8000cbc <HAL_GetTick>
 8002020:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002022:	e00a      	b.n	800203a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002024:	f7fe fe4a 	bl	8000cbc <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002032:	4293      	cmp	r3, r2
 8002034:	d901      	bls.n	800203a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e095      	b.n	8002166 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203a:	4b4e      	ldr	r3, [pc, #312]	@ (8002174 <HAL_RCC_ClockConfig+0x264>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 020c 	and.w	r2, r3, #12
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	429a      	cmp	r2, r3
 800204a:	d1eb      	bne.n	8002024 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d023      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002064:	4b43      	ldr	r3, [pc, #268]	@ (8002174 <HAL_RCC_ClockConfig+0x264>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	4a42      	ldr	r2, [pc, #264]	@ (8002174 <HAL_RCC_ClockConfig+0x264>)
 800206a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800206e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	d007      	beq.n	800208c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800207c:	4b3d      	ldr	r3, [pc, #244]	@ (8002174 <HAL_RCC_ClockConfig+0x264>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002084:	4a3b      	ldr	r2, [pc, #236]	@ (8002174 <HAL_RCC_ClockConfig+0x264>)
 8002086:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800208a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800208c:	4b39      	ldr	r3, [pc, #228]	@ (8002174 <HAL_RCC_ClockConfig+0x264>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	4936      	ldr	r1, [pc, #216]	@ (8002174 <HAL_RCC_ClockConfig+0x264>)
 800209a:	4313      	orrs	r3, r2
 800209c:	608b      	str	r3, [r1, #8]
 800209e:	e008      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	2b80      	cmp	r3, #128	@ 0x80
 80020a4:	d105      	bne.n	80020b2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80020a6:	4b33      	ldr	r3, [pc, #204]	@ (8002174 <HAL_RCC_ClockConfig+0x264>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	4a32      	ldr	r2, [pc, #200]	@ (8002174 <HAL_RCC_ClockConfig+0x264>)
 80020ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80020b0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002170 <HAL_RCC_ClockConfig+0x260>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d21d      	bcs.n	80020fc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002170 <HAL_RCC_ClockConfig+0x260>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f023 020f 	bic.w	r2, r3, #15
 80020c8:	4929      	ldr	r1, [pc, #164]	@ (8002170 <HAL_RCC_ClockConfig+0x260>)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020d0:	f7fe fdf4 	bl	8000cbc <HAL_GetTick>
 80020d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d6:	e00a      	b.n	80020ee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d8:	f7fe fdf0 	bl	8000cbc <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e03b      	b.n	8002166 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ee:	4b20      	ldr	r3, [pc, #128]	@ (8002170 <HAL_RCC_ClockConfig+0x260>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d1ed      	bne.n	80020d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002108:	4b1a      	ldr	r3, [pc, #104]	@ (8002174 <HAL_RCC_ClockConfig+0x264>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	4917      	ldr	r1, [pc, #92]	@ (8002174 <HAL_RCC_ClockConfig+0x264>)
 8002116:	4313      	orrs	r3, r2
 8002118:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d009      	beq.n	800213a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002126:	4b13      	ldr	r3, [pc, #76]	@ (8002174 <HAL_RCC_ClockConfig+0x264>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	490f      	ldr	r1, [pc, #60]	@ (8002174 <HAL_RCC_ClockConfig+0x264>)
 8002136:	4313      	orrs	r3, r2
 8002138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800213a:	f000 f825 	bl	8002188 <HAL_RCC_GetSysClockFreq>
 800213e:	4602      	mov	r2, r0
 8002140:	4b0c      	ldr	r3, [pc, #48]	@ (8002174 <HAL_RCC_ClockConfig+0x264>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	091b      	lsrs	r3, r3, #4
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	490c      	ldr	r1, [pc, #48]	@ (800217c <HAL_RCC_ClockConfig+0x26c>)
 800214c:	5ccb      	ldrb	r3, [r1, r3]
 800214e:	f003 031f 	and.w	r3, r3, #31
 8002152:	fa22 f303 	lsr.w	r3, r2, r3
 8002156:	4a0a      	ldr	r2, [pc, #40]	@ (8002180 <HAL_RCC_ClockConfig+0x270>)
 8002158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800215a:	4b0a      	ldr	r3, [pc, #40]	@ (8002184 <HAL_RCC_ClockConfig+0x274>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe fd60 	bl	8000c24 <HAL_InitTick>
 8002164:	4603      	mov	r3, r0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40022000 	.word	0x40022000
 8002174:	40021000 	.word	0x40021000
 8002178:	04c4b400 	.word	0x04c4b400
 800217c:	08004300 	.word	0x08004300
 8002180:	20000000 	.word	0x20000000
 8002184:	20000004 	.word	0x20000004

08002188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002188:	b480      	push	{r7}
 800218a:	b087      	sub	sp, #28
 800218c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800218e:	4b2c      	ldr	r3, [pc, #176]	@ (8002240 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 030c 	and.w	r3, r3, #12
 8002196:	2b04      	cmp	r3, #4
 8002198:	d102      	bne.n	80021a0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800219a:	4b2a      	ldr	r3, [pc, #168]	@ (8002244 <HAL_RCC_GetSysClockFreq+0xbc>)
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	e047      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80021a0:	4b27      	ldr	r3, [pc, #156]	@ (8002240 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d102      	bne.n	80021b2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021ac:	4b26      	ldr	r3, [pc, #152]	@ (8002248 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	e03e      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80021b2:	4b23      	ldr	r3, [pc, #140]	@ (8002240 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b0c      	cmp	r3, #12
 80021bc:	d136      	bne.n	800222c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021be:	4b20      	ldr	r3, [pc, #128]	@ (8002240 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002240 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	3301      	adds	r3, #1
 80021d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d10c      	bne.n	80021f6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021dc:	4a1a      	ldr	r2, [pc, #104]	@ (8002248 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e4:	4a16      	ldr	r2, [pc, #88]	@ (8002240 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021e6:	68d2      	ldr	r2, [r2, #12]
 80021e8:	0a12      	lsrs	r2, r2, #8
 80021ea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80021ee:	fb02 f303 	mul.w	r3, r2, r3
 80021f2:	617b      	str	r3, [r7, #20]
      break;
 80021f4:	e00c      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021f6:	4a13      	ldr	r2, [pc, #76]	@ (8002244 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fe:	4a10      	ldr	r2, [pc, #64]	@ (8002240 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002200:	68d2      	ldr	r2, [r2, #12]
 8002202:	0a12      	lsrs	r2, r2, #8
 8002204:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002208:	fb02 f303 	mul.w	r3, r2, r3
 800220c:	617b      	str	r3, [r7, #20]
      break;
 800220e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002210:	4b0b      	ldr	r3, [pc, #44]	@ (8002240 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	0e5b      	lsrs	r3, r3, #25
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	3301      	adds	r3, #1
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	fbb2 f3f3 	udiv	r3, r2, r3
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	e001      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002230:	693b      	ldr	r3, [r7, #16]
}
 8002232:	4618      	mov	r0, r3
 8002234:	371c      	adds	r7, #28
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000
 8002244:	00f42400 	.word	0x00f42400
 8002248:	007a1200 	.word	0x007a1200

0800224c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002250:	4b03      	ldr	r3, [pc, #12]	@ (8002260 <HAL_RCC_GetHCLKFreq+0x14>)
 8002252:	681b      	ldr	r3, [r3, #0]
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	20000000 	.word	0x20000000

08002264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002268:	f7ff fff0 	bl	800224c <HAL_RCC_GetHCLKFreq>
 800226c:	4602      	mov	r2, r0
 800226e:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	4904      	ldr	r1, [pc, #16]	@ (800228c <HAL_RCC_GetPCLK1Freq+0x28>)
 800227a:	5ccb      	ldrb	r3, [r1, r3]
 800227c:	f003 031f 	and.w	r3, r3, #31
 8002280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002284:	4618      	mov	r0, r3
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40021000 	.word	0x40021000
 800228c:	08004310 	.word	0x08004310

08002290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002294:	f7ff ffda 	bl	800224c <HAL_RCC_GetHCLKFreq>
 8002298:	4602      	mov	r2, r0
 800229a:	4b06      	ldr	r3, [pc, #24]	@ (80022b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	0adb      	lsrs	r3, r3, #11
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	4904      	ldr	r1, [pc, #16]	@ (80022b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022a6:	5ccb      	ldrb	r3, [r1, r3]
 80022a8:	f003 031f 	and.w	r3, r3, #31
 80022ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40021000 	.word	0x40021000
 80022b8:	08004310 	.word	0x08004310

080022bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022c2:	4b1e      	ldr	r3, [pc, #120]	@ (800233c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022cc:	4b1b      	ldr	r3, [pc, #108]	@ (800233c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	3301      	adds	r3, #1
 80022d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d10c      	bne.n	80022fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022e0:	4a17      	ldr	r2, [pc, #92]	@ (8002340 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e8:	4a14      	ldr	r2, [pc, #80]	@ (800233c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022ea:	68d2      	ldr	r2, [r2, #12]
 80022ec:	0a12      	lsrs	r2, r2, #8
 80022ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80022f2:	fb02 f303 	mul.w	r3, r2, r3
 80022f6:	617b      	str	r3, [r7, #20]
    break;
 80022f8:	e00c      	b.n	8002314 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022fa:	4a12      	ldr	r2, [pc, #72]	@ (8002344 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002302:	4a0e      	ldr	r2, [pc, #56]	@ (800233c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002304:	68d2      	ldr	r2, [r2, #12]
 8002306:	0a12      	lsrs	r2, r2, #8
 8002308:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800230c:	fb02 f303 	mul.w	r3, r2, r3
 8002310:	617b      	str	r3, [r7, #20]
    break;
 8002312:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002314:	4b09      	ldr	r3, [pc, #36]	@ (800233c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	0e5b      	lsrs	r3, r3, #25
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	3301      	adds	r3, #1
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	fbb2 f3f3 	udiv	r3, r2, r3
 800232c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800232e:	687b      	ldr	r3, [r7, #4]
}
 8002330:	4618      	mov	r0, r3
 8002332:	371c      	adds	r7, #28
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	40021000 	.word	0x40021000
 8002340:	007a1200 	.word	0x007a1200
 8002344:	00f42400 	.word	0x00f42400

08002348 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002350:	2300      	movs	r3, #0
 8002352:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002354:	2300      	movs	r3, #0
 8002356:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 8098 	beq.w	8002496 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002366:	2300      	movs	r3, #0
 8002368:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236a:	4b43      	ldr	r3, [pc, #268]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800236c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10d      	bne.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002376:	4b40      	ldr	r3, [pc, #256]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237a:	4a3f      	ldr	r2, [pc, #252]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800237c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002380:	6593      	str	r3, [r2, #88]	@ 0x58
 8002382:	4b3d      	ldr	r3, [pc, #244]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800238e:	2301      	movs	r3, #1
 8002390:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002392:	4b3a      	ldr	r3, [pc, #232]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a39      	ldr	r2, [pc, #228]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800239c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800239e:	f7fe fc8d 	bl	8000cbc <HAL_GetTick>
 80023a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023a4:	e009      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a6:	f7fe fc89 	bl	8000cbc <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d902      	bls.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	74fb      	strb	r3, [r7, #19]
        break;
 80023b8:	e005      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023ba:	4b30      	ldr	r3, [pc, #192]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0ef      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80023c6:	7cfb      	ldrb	r3, [r7, #19]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d159      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d01e      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d019      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023e8:	4b23      	ldr	r3, [pc, #140]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023f4:	4b20      	ldr	r3, [pc, #128]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002400:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002404:	4b1c      	ldr	r3, [pc, #112]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800240a:	4a1b      	ldr	r2, [pc, #108]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800240c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002410:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002414:	4a18      	ldr	r2, [pc, #96]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d016      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002426:	f7fe fc49 	bl	8000cbc <HAL_GetTick>
 800242a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800242c:	e00b      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242e:	f7fe fc45 	bl	8000cbc <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800243c:	4293      	cmp	r3, r2
 800243e:	d902      	bls.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	74fb      	strb	r3, [r7, #19]
            break;
 8002444:	e006      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002446:	4b0c      	ldr	r3, [pc, #48]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0ec      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002454:	7cfb      	ldrb	r3, [r7, #19]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10b      	bne.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800245a:	4b07      	ldr	r3, [pc, #28]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800245c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002460:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002468:	4903      	ldr	r1, [pc, #12]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002470:	e008      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002472:	7cfb      	ldrb	r3, [r7, #19]
 8002474:	74bb      	strb	r3, [r7, #18]
 8002476:	e005      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002478:	40021000 	.word	0x40021000
 800247c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002480:	7cfb      	ldrb	r3, [r7, #19]
 8002482:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002484:	7c7b      	ldrb	r3, [r7, #17]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d105      	bne.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248a:	4ba6      	ldr	r3, [pc, #664]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800248c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248e:	4aa5      	ldr	r2, [pc, #660]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002490:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002494:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00a      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024a2:	4ba0      	ldr	r3, [pc, #640]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024a8:	f023 0203 	bic.w	r2, r3, #3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	499c      	ldr	r1, [pc, #624]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00a      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024c4:	4b97      	ldr	r3, [pc, #604]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ca:	f023 020c 	bic.w	r2, r3, #12
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	4994      	ldr	r1, [pc, #592]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00a      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024e6:	4b8f      	ldr	r3, [pc, #572]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	498b      	ldr	r1, [pc, #556]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00a      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002508:	4b86      	ldr	r3, [pc, #536]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800250e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	4983      	ldr	r1, [pc, #524]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0320 	and.w	r3, r3, #32
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00a      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800252a:	4b7e      	ldr	r3, [pc, #504]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800252c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002530:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	497a      	ldr	r1, [pc, #488]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800253a:	4313      	orrs	r3, r2
 800253c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00a      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800254c:	4b75      	ldr	r3, [pc, #468]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800254e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002552:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	4972      	ldr	r1, [pc, #456]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800255c:	4313      	orrs	r3, r2
 800255e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800256e:	4b6d      	ldr	r3, [pc, #436]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002574:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	4969      	ldr	r1, [pc, #420]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00a      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002590:	4b64      	ldr	r3, [pc, #400]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002596:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	4961      	ldr	r1, [pc, #388]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00a      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025b2:	4b5c      	ldr	r3, [pc, #368]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c0:	4958      	ldr	r1, [pc, #352]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d015      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025d4:	4b53      	ldr	r3, [pc, #332]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e2:	4950      	ldr	r1, [pc, #320]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025f2:	d105      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4a4a      	ldr	r2, [pc, #296]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002608:	2b00      	cmp	r3, #0
 800260a:	d015      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800260c:	4b45      	ldr	r3, [pc, #276]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002612:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261a:	4942      	ldr	r1, [pc, #264]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002626:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800262a:	d105      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800262c:	4b3d      	ldr	r3, [pc, #244]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4a3c      	ldr	r2, [pc, #240]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002632:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002636:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d015      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002644:	4b37      	ldr	r3, [pc, #220]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800264a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002652:	4934      	ldr	r1, [pc, #208]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002662:	d105      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002664:	4b2f      	ldr	r3, [pc, #188]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4a2e      	ldr	r2, [pc, #184]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800266a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800266e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d015      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800267c:	4b29      	ldr	r3, [pc, #164]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800267e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002682:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800268a:	4926      	ldr	r1, [pc, #152]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002696:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800269a:	d105      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800269c:	4b21      	ldr	r3, [pc, #132]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	4a20      	ldr	r2, [pc, #128]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026a6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d015      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c2:	4918      	ldr	r1, [pc, #96]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026d2:	d105      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026d4:	4b13      	ldr	r3, [pc, #76]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4a12      	ldr	r2, [pc, #72]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d015      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026fa:	490a      	ldr	r1, [pc, #40]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002706:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800270a:	d105      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800270c:	4b05      	ldr	r3, [pc, #20]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	4a04      	ldr	r2, [pc, #16]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002712:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002716:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002718:	7cbb      	ldrb	r3, [r7, #18]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000

08002728 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e042      	b.n	80027c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002740:	2b00      	cmp	r3, #0
 8002742:	d106      	bne.n	8002752 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7fe f9a1 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2224      	movs	r2, #36	@ 0x24
 8002756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0201 	bic.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fbf8 	bl	8002f68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f929 	bl	80029d0 <UART_SetConfig>
 800277e:	4603      	mov	r3, r0
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e01b      	b.n	80027c0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002796:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 fc77 	bl	80030ac <UART_CheckIdleState>
 80027be:	4603      	mov	r3, r0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	@ 0x28
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	4613      	mov	r3, r2
 80027d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027de:	2b20      	cmp	r3, #32
 80027e0:	d17b      	bne.n	80028da <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <HAL_UART_Transmit+0x26>
 80027e8:	88fb      	ldrh	r3, [r7, #6]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e074      	b.n	80028dc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2221      	movs	r2, #33	@ 0x21
 80027fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002802:	f7fe fa5b 	bl	8000cbc <HAL_GetTick>
 8002806:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	88fa      	ldrh	r2, [r7, #6]
 800280c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	88fa      	ldrh	r2, [r7, #6]
 8002814:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002820:	d108      	bne.n	8002834 <HAL_UART_Transmit+0x6c>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d104      	bne.n	8002834 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	e003      	b.n	800283c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002838:	2300      	movs	r3, #0
 800283a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800283c:	e030      	b.n	80028a0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	2200      	movs	r2, #0
 8002846:	2180      	movs	r1, #128	@ 0x80
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 fcd9 	bl	8003200 <UART_WaitOnFlagUntilTimeout>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2220      	movs	r2, #32
 8002858:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e03d      	b.n	80028dc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10b      	bne.n	800287e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002874:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	3302      	adds	r3, #2
 800287a:	61bb      	str	r3, [r7, #24]
 800287c:	e007      	b.n	800288e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	781a      	ldrb	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	3301      	adds	r3, #1
 800288c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002894:	b29b      	uxth	r3, r3
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1c8      	bne.n	800283e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	2200      	movs	r2, #0
 80028b4:	2140      	movs	r1, #64	@ 0x40
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 fca2 	bl	8003200 <UART_WaitOnFlagUntilTimeout>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d005      	beq.n	80028ce <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2220      	movs	r2, #32
 80028c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e006      	b.n	80028dc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2220      	movs	r2, #32
 80028d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	e000      	b.n	80028dc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80028da:	2302      	movs	r3, #2
  }
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3720      	adds	r7, #32
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08a      	sub	sp, #40	@ 0x28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	4613      	mov	r3, r2
 80028f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028f8:	2b20      	cmp	r3, #32
 80028fa:	d137      	bne.n	800296c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <HAL_UART_Receive_DMA+0x24>
 8002902:	88fb      	ldrh	r3, [r7, #6]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e030      	b.n	800296e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a18      	ldr	r2, [pc, #96]	@ (8002978 <HAL_UART_Receive_DMA+0x94>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d01f      	beq.n	800295c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d018      	beq.n	800295c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	e853 3f00 	ldrex	r3, [r3]
 8002936:	613b      	str	r3, [r7, #16]
   return(result);
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800293e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002948:	623b      	str	r3, [r7, #32]
 800294a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294c:	69f9      	ldr	r1, [r7, #28]
 800294e:	6a3a      	ldr	r2, [r7, #32]
 8002950:	e841 2300 	strex	r3, r2, [r1]
 8002954:	61bb      	str	r3, [r7, #24]
   return(result);
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1e6      	bne.n	800292a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800295c:	88fb      	ldrh	r3, [r7, #6]
 800295e:	461a      	mov	r2, r3
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 fcba 	bl	80032dc <UART_Start_Receive_DMA>
 8002968:	4603      	mov	r3, r0
 800296a:	e000      	b.n	800296e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800296c:	2302      	movs	r3, #2
  }
}
 800296e:	4618      	mov	r0, r3
 8002970:	3728      	adds	r7, #40	@ 0x28
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40008000 	.word	0x40008000

0800297c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029d4:	b08c      	sub	sp, #48	@ 0x30
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029da:	2300      	movs	r3, #0
 80029dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	431a      	orrs	r2, r3
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	4bab      	ldr	r3, [pc, #684]	@ (8002cac <UART_SetConfig+0x2dc>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	6812      	ldr	r2, [r2, #0]
 8002a06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a08:	430b      	orrs	r3, r1
 8002a0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4aa0      	ldr	r2, [pc, #640]	@ (8002cb0 <UART_SetConfig+0x2e0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d004      	beq.n	8002a3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002a46:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	6812      	ldr	r2, [r2, #0]
 8002a4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a50:	430b      	orrs	r3, r1
 8002a52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5a:	f023 010f 	bic.w	r1, r3, #15
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a91      	ldr	r2, [pc, #580]	@ (8002cb4 <UART_SetConfig+0x2e4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d125      	bne.n	8002ac0 <UART_SetConfig+0xf0>
 8002a74:	4b90      	ldr	r3, [pc, #576]	@ (8002cb8 <UART_SetConfig+0x2e8>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	d81a      	bhi.n	8002ab8 <UART_SetConfig+0xe8>
 8002a82:	a201      	add	r2, pc, #4	@ (adr r2, 8002a88 <UART_SetConfig+0xb8>)
 8002a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a88:	08002a99 	.word	0x08002a99
 8002a8c:	08002aa9 	.word	0x08002aa9
 8002a90:	08002aa1 	.word	0x08002aa1
 8002a94:	08002ab1 	.word	0x08002ab1
 8002a98:	2301      	movs	r3, #1
 8002a9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a9e:	e0d6      	b.n	8002c4e <UART_SetConfig+0x27e>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002aa6:	e0d2      	b.n	8002c4e <UART_SetConfig+0x27e>
 8002aa8:	2304      	movs	r3, #4
 8002aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002aae:	e0ce      	b.n	8002c4e <UART_SetConfig+0x27e>
 8002ab0:	2308      	movs	r3, #8
 8002ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ab6:	e0ca      	b.n	8002c4e <UART_SetConfig+0x27e>
 8002ab8:	2310      	movs	r3, #16
 8002aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002abe:	e0c6      	b.n	8002c4e <UART_SetConfig+0x27e>
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a7d      	ldr	r2, [pc, #500]	@ (8002cbc <UART_SetConfig+0x2ec>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d138      	bne.n	8002b3c <UART_SetConfig+0x16c>
 8002aca:	4b7b      	ldr	r3, [pc, #492]	@ (8002cb8 <UART_SetConfig+0x2e8>)
 8002acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad0:	f003 030c 	and.w	r3, r3, #12
 8002ad4:	2b0c      	cmp	r3, #12
 8002ad6:	d82d      	bhi.n	8002b34 <UART_SetConfig+0x164>
 8002ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ae0 <UART_SetConfig+0x110>)
 8002ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ade:	bf00      	nop
 8002ae0:	08002b15 	.word	0x08002b15
 8002ae4:	08002b35 	.word	0x08002b35
 8002ae8:	08002b35 	.word	0x08002b35
 8002aec:	08002b35 	.word	0x08002b35
 8002af0:	08002b25 	.word	0x08002b25
 8002af4:	08002b35 	.word	0x08002b35
 8002af8:	08002b35 	.word	0x08002b35
 8002afc:	08002b35 	.word	0x08002b35
 8002b00:	08002b1d 	.word	0x08002b1d
 8002b04:	08002b35 	.word	0x08002b35
 8002b08:	08002b35 	.word	0x08002b35
 8002b0c:	08002b35 	.word	0x08002b35
 8002b10:	08002b2d 	.word	0x08002b2d
 8002b14:	2300      	movs	r3, #0
 8002b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b1a:	e098      	b.n	8002c4e <UART_SetConfig+0x27e>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b22:	e094      	b.n	8002c4e <UART_SetConfig+0x27e>
 8002b24:	2304      	movs	r3, #4
 8002b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b2a:	e090      	b.n	8002c4e <UART_SetConfig+0x27e>
 8002b2c:	2308      	movs	r3, #8
 8002b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b32:	e08c      	b.n	8002c4e <UART_SetConfig+0x27e>
 8002b34:	2310      	movs	r3, #16
 8002b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b3a:	e088      	b.n	8002c4e <UART_SetConfig+0x27e>
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a5f      	ldr	r2, [pc, #380]	@ (8002cc0 <UART_SetConfig+0x2f0>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d125      	bne.n	8002b92 <UART_SetConfig+0x1c2>
 8002b46:	4b5c      	ldr	r3, [pc, #368]	@ (8002cb8 <UART_SetConfig+0x2e8>)
 8002b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b4c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002b50:	2b30      	cmp	r3, #48	@ 0x30
 8002b52:	d016      	beq.n	8002b82 <UART_SetConfig+0x1b2>
 8002b54:	2b30      	cmp	r3, #48	@ 0x30
 8002b56:	d818      	bhi.n	8002b8a <UART_SetConfig+0x1ba>
 8002b58:	2b20      	cmp	r3, #32
 8002b5a:	d00a      	beq.n	8002b72 <UART_SetConfig+0x1a2>
 8002b5c:	2b20      	cmp	r3, #32
 8002b5e:	d814      	bhi.n	8002b8a <UART_SetConfig+0x1ba>
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <UART_SetConfig+0x19a>
 8002b64:	2b10      	cmp	r3, #16
 8002b66:	d008      	beq.n	8002b7a <UART_SetConfig+0x1aa>
 8002b68:	e00f      	b.n	8002b8a <UART_SetConfig+0x1ba>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b70:	e06d      	b.n	8002c4e <UART_SetConfig+0x27e>
 8002b72:	2302      	movs	r3, #2
 8002b74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b78:	e069      	b.n	8002c4e <UART_SetConfig+0x27e>
 8002b7a:	2304      	movs	r3, #4
 8002b7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b80:	e065      	b.n	8002c4e <UART_SetConfig+0x27e>
 8002b82:	2308      	movs	r3, #8
 8002b84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b88:	e061      	b.n	8002c4e <UART_SetConfig+0x27e>
 8002b8a:	2310      	movs	r3, #16
 8002b8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b90:	e05d      	b.n	8002c4e <UART_SetConfig+0x27e>
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a4b      	ldr	r2, [pc, #300]	@ (8002cc4 <UART_SetConfig+0x2f4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d125      	bne.n	8002be8 <UART_SetConfig+0x218>
 8002b9c:	4b46      	ldr	r3, [pc, #280]	@ (8002cb8 <UART_SetConfig+0x2e8>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002ba6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ba8:	d016      	beq.n	8002bd8 <UART_SetConfig+0x208>
 8002baa:	2bc0      	cmp	r3, #192	@ 0xc0
 8002bac:	d818      	bhi.n	8002be0 <UART_SetConfig+0x210>
 8002bae:	2b80      	cmp	r3, #128	@ 0x80
 8002bb0:	d00a      	beq.n	8002bc8 <UART_SetConfig+0x1f8>
 8002bb2:	2b80      	cmp	r3, #128	@ 0x80
 8002bb4:	d814      	bhi.n	8002be0 <UART_SetConfig+0x210>
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <UART_SetConfig+0x1f0>
 8002bba:	2b40      	cmp	r3, #64	@ 0x40
 8002bbc:	d008      	beq.n	8002bd0 <UART_SetConfig+0x200>
 8002bbe:	e00f      	b.n	8002be0 <UART_SetConfig+0x210>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bc6:	e042      	b.n	8002c4e <UART_SetConfig+0x27e>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bce:	e03e      	b.n	8002c4e <UART_SetConfig+0x27e>
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bd6:	e03a      	b.n	8002c4e <UART_SetConfig+0x27e>
 8002bd8:	2308      	movs	r3, #8
 8002bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bde:	e036      	b.n	8002c4e <UART_SetConfig+0x27e>
 8002be0:	2310      	movs	r3, #16
 8002be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002be6:	e032      	b.n	8002c4e <UART_SetConfig+0x27e>
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a30      	ldr	r2, [pc, #192]	@ (8002cb0 <UART_SetConfig+0x2e0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d12a      	bne.n	8002c48 <UART_SetConfig+0x278>
 8002bf2:	4b31      	ldr	r3, [pc, #196]	@ (8002cb8 <UART_SetConfig+0x2e8>)
 8002bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002bfc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002c00:	d01a      	beq.n	8002c38 <UART_SetConfig+0x268>
 8002c02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002c06:	d81b      	bhi.n	8002c40 <UART_SetConfig+0x270>
 8002c08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c0c:	d00c      	beq.n	8002c28 <UART_SetConfig+0x258>
 8002c0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c12:	d815      	bhi.n	8002c40 <UART_SetConfig+0x270>
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <UART_SetConfig+0x250>
 8002c18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c1c:	d008      	beq.n	8002c30 <UART_SetConfig+0x260>
 8002c1e:	e00f      	b.n	8002c40 <UART_SetConfig+0x270>
 8002c20:	2300      	movs	r3, #0
 8002c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c26:	e012      	b.n	8002c4e <UART_SetConfig+0x27e>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c2e:	e00e      	b.n	8002c4e <UART_SetConfig+0x27e>
 8002c30:	2304      	movs	r3, #4
 8002c32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c36:	e00a      	b.n	8002c4e <UART_SetConfig+0x27e>
 8002c38:	2308      	movs	r3, #8
 8002c3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c3e:	e006      	b.n	8002c4e <UART_SetConfig+0x27e>
 8002c40:	2310      	movs	r3, #16
 8002c42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c46:	e002      	b.n	8002c4e <UART_SetConfig+0x27e>
 8002c48:	2310      	movs	r3, #16
 8002c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a17      	ldr	r2, [pc, #92]	@ (8002cb0 <UART_SetConfig+0x2e0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	f040 80a8 	bne.w	8002daa <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c5a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d834      	bhi.n	8002ccc <UART_SetConfig+0x2fc>
 8002c62:	a201      	add	r2, pc, #4	@ (adr r2, 8002c68 <UART_SetConfig+0x298>)
 8002c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c68:	08002c8d 	.word	0x08002c8d
 8002c6c:	08002ccd 	.word	0x08002ccd
 8002c70:	08002c95 	.word	0x08002c95
 8002c74:	08002ccd 	.word	0x08002ccd
 8002c78:	08002c9b 	.word	0x08002c9b
 8002c7c:	08002ccd 	.word	0x08002ccd
 8002c80:	08002ccd 	.word	0x08002ccd
 8002c84:	08002ccd 	.word	0x08002ccd
 8002c88:	08002ca3 	.word	0x08002ca3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c8c:	f7ff faea 	bl	8002264 <HAL_RCC_GetPCLK1Freq>
 8002c90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002c92:	e021      	b.n	8002cd8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c94:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc8 <UART_SetConfig+0x2f8>)
 8002c96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002c98:	e01e      	b.n	8002cd8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c9a:	f7ff fa75 	bl	8002188 <HAL_RCC_GetSysClockFreq>
 8002c9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ca0:	e01a      	b.n	8002cd8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ca2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ca6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002ca8:	e016      	b.n	8002cd8 <UART_SetConfig+0x308>
 8002caa:	bf00      	nop
 8002cac:	cfff69f3 	.word	0xcfff69f3
 8002cb0:	40008000 	.word	0x40008000
 8002cb4:	40013800 	.word	0x40013800
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	40004400 	.word	0x40004400
 8002cc0:	40004800 	.word	0x40004800
 8002cc4:	40004c00 	.word	0x40004c00
 8002cc8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002cd6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 812a 	beq.w	8002f34 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce4:	4a9e      	ldr	r2, [pc, #632]	@ (8002f60 <UART_SetConfig+0x590>)
 8002ce6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cea:	461a      	mov	r2, r3
 8002cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cee:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	4413      	add	r3, r2
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d305      	bcc.n	8002d10 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d903      	bls.n	8002d18 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002d16:	e10d      	b.n	8002f34 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	60fa      	str	r2, [r7, #12]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d24:	4a8e      	ldr	r2, [pc, #568]	@ (8002f60 <UART_SetConfig+0x590>)
 8002d26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	607a      	str	r2, [r7, #4]
 8002d32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d3a:	f7fd fac1 	bl	80002c0 <__aeabi_uldivmod>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4610      	mov	r0, r2
 8002d44:	4619      	mov	r1, r3
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	020b      	lsls	r3, r1, #8
 8002d50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002d54:	0202      	lsls	r2, r0, #8
 8002d56:	6979      	ldr	r1, [r7, #20]
 8002d58:	6849      	ldr	r1, [r1, #4]
 8002d5a:	0849      	lsrs	r1, r1, #1
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	460c      	mov	r4, r1
 8002d60:	4605      	mov	r5, r0
 8002d62:	eb12 0804 	adds.w	r8, r2, r4
 8002d66:	eb43 0905 	adc.w	r9, r3, r5
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	469a      	mov	sl, r3
 8002d72:	4693      	mov	fp, r2
 8002d74:	4652      	mov	r2, sl
 8002d76:	465b      	mov	r3, fp
 8002d78:	4640      	mov	r0, r8
 8002d7a:	4649      	mov	r1, r9
 8002d7c:	f7fd faa0 	bl	80002c0 <__aeabi_uldivmod>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4613      	mov	r3, r2
 8002d86:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d8e:	d308      	bcc.n	8002da2 <UART_SetConfig+0x3d2>
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d96:	d204      	bcs.n	8002da2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6a3a      	ldr	r2, [r7, #32]
 8002d9e:	60da      	str	r2, [r3, #12]
 8002da0:	e0c8      	b.n	8002f34 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002da8:	e0c4      	b.n	8002f34 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002db2:	d167      	bne.n	8002e84 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002db4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d828      	bhi.n	8002e0e <UART_SetConfig+0x43e>
 8002dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8002dc4 <UART_SetConfig+0x3f4>)
 8002dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc2:	bf00      	nop
 8002dc4:	08002de9 	.word	0x08002de9
 8002dc8:	08002df1 	.word	0x08002df1
 8002dcc:	08002df9 	.word	0x08002df9
 8002dd0:	08002e0f 	.word	0x08002e0f
 8002dd4:	08002dff 	.word	0x08002dff
 8002dd8:	08002e0f 	.word	0x08002e0f
 8002ddc:	08002e0f 	.word	0x08002e0f
 8002de0:	08002e0f 	.word	0x08002e0f
 8002de4:	08002e07 	.word	0x08002e07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002de8:	f7ff fa3c 	bl	8002264 <HAL_RCC_GetPCLK1Freq>
 8002dec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002dee:	e014      	b.n	8002e1a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002df0:	f7ff fa4e 	bl	8002290 <HAL_RCC_GetPCLK2Freq>
 8002df4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002df6:	e010      	b.n	8002e1a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002df8:	4b5a      	ldr	r3, [pc, #360]	@ (8002f64 <UART_SetConfig+0x594>)
 8002dfa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002dfc:	e00d      	b.n	8002e1a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dfe:	f7ff f9c3 	bl	8002188 <HAL_RCC_GetSysClockFreq>
 8002e02:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e04:	e009      	b.n	8002e1a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e0c:	e005      	b.n	8002e1a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002e18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 8089 	beq.w	8002f34 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e26:	4a4e      	ldr	r2, [pc, #312]	@ (8002f60 <UART_SetConfig+0x590>)
 8002e28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e30:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e34:	005a      	lsls	r2, r3, #1
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	085b      	lsrs	r3, r3, #1
 8002e3c:	441a      	add	r2, r3
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	2b0f      	cmp	r3, #15
 8002e4c:	d916      	bls.n	8002e7c <UART_SetConfig+0x4ac>
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e54:	d212      	bcs.n	8002e7c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	f023 030f 	bic.w	r3, r3, #15
 8002e5e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	085b      	lsrs	r3, r3, #1
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	8bfb      	ldrh	r3, [r7, #30]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	8bfa      	ldrh	r2, [r7, #30]
 8002e78:	60da      	str	r2, [r3, #12]
 8002e7a:	e05b      	b.n	8002f34 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002e82:	e057      	b.n	8002f34 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e84:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d828      	bhi.n	8002ede <UART_SetConfig+0x50e>
 8002e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e94 <UART_SetConfig+0x4c4>)
 8002e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e92:	bf00      	nop
 8002e94:	08002eb9 	.word	0x08002eb9
 8002e98:	08002ec1 	.word	0x08002ec1
 8002e9c:	08002ec9 	.word	0x08002ec9
 8002ea0:	08002edf 	.word	0x08002edf
 8002ea4:	08002ecf 	.word	0x08002ecf
 8002ea8:	08002edf 	.word	0x08002edf
 8002eac:	08002edf 	.word	0x08002edf
 8002eb0:	08002edf 	.word	0x08002edf
 8002eb4:	08002ed7 	.word	0x08002ed7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002eb8:	f7ff f9d4 	bl	8002264 <HAL_RCC_GetPCLK1Freq>
 8002ebc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ebe:	e014      	b.n	8002eea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ec0:	f7ff f9e6 	bl	8002290 <HAL_RCC_GetPCLK2Freq>
 8002ec4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ec6:	e010      	b.n	8002eea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ec8:	4b26      	ldr	r3, [pc, #152]	@ (8002f64 <UART_SetConfig+0x594>)
 8002eca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002ecc:	e00d      	b.n	8002eea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ece:	f7ff f95b 	bl	8002188 <HAL_RCC_GetSysClockFreq>
 8002ed2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ed4:	e009      	b.n	8002eea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ed6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002eda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002edc:	e005      	b.n	8002eea <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002ee8:	bf00      	nop
    }

    if (pclk != 0U)
 8002eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d021      	beq.n	8002f34 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef4:	4a1a      	ldr	r2, [pc, #104]	@ (8002f60 <UART_SetConfig+0x590>)
 8002ef6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002efa:	461a      	mov	r2, r3
 8002efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efe:	fbb3 f2f2 	udiv	r2, r3, r2
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	085b      	lsrs	r3, r3, #1
 8002f08:	441a      	add	r2, r3
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	2b0f      	cmp	r3, #15
 8002f18:	d909      	bls.n	8002f2e <UART_SetConfig+0x55e>
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f20:	d205      	bcs.n	8002f2e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	60da      	str	r2, [r3, #12]
 8002f2c:	e002      	b.n	8002f34 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	2200      	movs	r2, #0
 8002f48:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002f50:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3730      	adds	r7, #48	@ 0x30
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f5e:	bf00      	nop
 8002f60:	08004318 	.word	0x08004318
 8002f64:	00f42400 	.word	0x00f42400

08002f68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00a      	beq.n	8002f92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00a      	beq.n	8002fd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fda:	f003 0304 	and.w	r3, r3, #4
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffc:	f003 0310 	and.w	r3, r3, #16
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00a      	beq.n	800301a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003044:	2b00      	cmp	r3, #0
 8003046:	d01a      	beq.n	800307e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003062:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003066:	d10a      	bne.n	800307e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00a      	beq.n	80030a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	605a      	str	r2, [r3, #4]
  }
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b098      	sub	sp, #96	@ 0x60
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030bc:	f7fd fdfe 	bl	8000cbc <HAL_GetTick>
 80030c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d12f      	bne.n	8003130 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030d8:	2200      	movs	r2, #0
 80030da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f88e 	bl	8003200 <UART_WaitOnFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d022      	beq.n	8003130 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030f2:	e853 3f00 	ldrex	r3, [r3]
 80030f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80030f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003108:	647b      	str	r3, [r7, #68]	@ 0x44
 800310a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800310e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003110:	e841 2300 	strex	r3, r2, [r1]
 8003114:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1e6      	bne.n	80030ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e063      	b.n	80031f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	2b04      	cmp	r3, #4
 800313c:	d149      	bne.n	80031d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800313e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003146:	2200      	movs	r2, #0
 8003148:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f857 	bl	8003200 <UART_WaitOnFlagUntilTimeout>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d03c      	beq.n	80031d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003160:	e853 3f00 	ldrex	r3, [r3]
 8003164:	623b      	str	r3, [r7, #32]
   return(result);
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800316c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	461a      	mov	r2, r3
 8003174:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003176:	633b      	str	r3, [r7, #48]	@ 0x30
 8003178:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800317c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800317e:	e841 2300 	strex	r3, r2, [r1]
 8003182:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1e6      	bne.n	8003158 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3308      	adds	r3, #8
 8003190:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	e853 3f00 	ldrex	r3, [r3]
 8003198:	60fb      	str	r3, [r7, #12]
   return(result);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f023 0301 	bic.w	r3, r3, #1
 80031a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3308      	adds	r3, #8
 80031a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031aa:	61fa      	str	r2, [r7, #28]
 80031ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ae:	69b9      	ldr	r1, [r7, #24]
 80031b0:	69fa      	ldr	r2, [r7, #28]
 80031b2:	e841 2300 	strex	r3, r2, [r1]
 80031b6:	617b      	str	r3, [r7, #20]
   return(result);
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1e5      	bne.n	800318a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e012      	b.n	80031f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2220      	movs	r2, #32
 80031d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2220      	movs	r2, #32
 80031de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3758      	adds	r7, #88	@ 0x58
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	603b      	str	r3, [r7, #0]
 800320c:	4613      	mov	r3, r2
 800320e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003210:	e04f      	b.n	80032b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003218:	d04b      	beq.n	80032b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800321a:	f7fd fd4f 	bl	8000cbc <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	429a      	cmp	r2, r3
 8003228:	d302      	bcc.n	8003230 <UART_WaitOnFlagUntilTimeout+0x30>
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e04e      	b.n	80032d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0304 	and.w	r3, r3, #4
 800323e:	2b00      	cmp	r3, #0
 8003240:	d037      	beq.n	80032b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2b80      	cmp	r3, #128	@ 0x80
 8003246:	d034      	beq.n	80032b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b40      	cmp	r3, #64	@ 0x40
 800324c:	d031      	beq.n	80032b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69db      	ldr	r3, [r3, #28]
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	2b08      	cmp	r3, #8
 800325a:	d110      	bne.n	800327e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2208      	movs	r2, #8
 8003262:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 f920 	bl	80034aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2208      	movs	r2, #8
 800326e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e029      	b.n	80032d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003288:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800328c:	d111      	bne.n	80032b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003296:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f906 	bl	80034aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2220      	movs	r2, #32
 80032a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e00f      	b.n	80032d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69da      	ldr	r2, [r3, #28]
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	4013      	ands	r3, r2
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	429a      	cmp	r2, r3
 80032c0:	bf0c      	ite	eq
 80032c2:	2301      	moveq	r3, #1
 80032c4:	2300      	movne	r3, #0
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	461a      	mov	r2, r3
 80032ca:	79fb      	ldrb	r3, [r7, #7]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d0a0      	beq.n	8003212 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b096      	sub	sp, #88	@ 0x58
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	4613      	mov	r3, r2
 80032e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	88fa      	ldrh	r2, [r7, #6]
 80032f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2222      	movs	r2, #34	@ 0x22
 8003304:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800330e:	2b00      	cmp	r3, #0
 8003310:	d02d      	beq.n	800336e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003318:	4a40      	ldr	r2, [pc, #256]	@ (800341c <UART_Start_Receive_DMA+0x140>)
 800331a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003322:	4a3f      	ldr	r2, [pc, #252]	@ (8003420 <UART_Start_Receive_DMA+0x144>)
 8003324:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800332c:	4a3d      	ldr	r2, [pc, #244]	@ (8003424 <UART_Start_Receive_DMA+0x148>)
 800332e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003336:	2200      	movs	r2, #0
 8003338:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	3324      	adds	r3, #36	@ 0x24
 8003346:	4619      	mov	r1, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334c:	461a      	mov	r2, r3
 800334e:	88fb      	ldrh	r3, [r7, #6]
 8003350:	f7fd fe9a 	bl	8001088 <HAL_DMA_Start_IT>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d009      	beq.n	800336e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2210      	movs	r2, #16
 800335e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2220      	movs	r2, #32
 8003366:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e051      	b.n	8003412 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d018      	beq.n	80033a8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800337e:	e853 3f00 	ldrex	r3, [r3]
 8003382:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003386:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800338a:	657b      	str	r3, [r7, #84]	@ 0x54
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	461a      	mov	r2, r3
 8003392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003394:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003396:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003398:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800339a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800339c:	e841 2300 	strex	r3, r2, [r1]
 80033a0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80033a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1e6      	bne.n	8003376 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3308      	adds	r3, #8
 80033ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b2:	e853 3f00 	ldrex	r3, [r3]
 80033b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	653b      	str	r3, [r7, #80]	@ 0x50
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3308      	adds	r3, #8
 80033c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80033c8:	637a      	str	r2, [r7, #52]	@ 0x34
 80033ca:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80033ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80033d0:	e841 2300 	strex	r3, r2, [r1]
 80033d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80033d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1e5      	bne.n	80033a8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	3308      	adds	r3, #8
 80033e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	e853 3f00 	ldrex	r3, [r3]
 80033ea:	613b      	str	r3, [r7, #16]
   return(result);
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3308      	adds	r3, #8
 80033fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033fc:	623a      	str	r2, [r7, #32]
 80033fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003400:	69f9      	ldr	r1, [r7, #28]
 8003402:	6a3a      	ldr	r2, [r7, #32]
 8003404:	e841 2300 	strex	r3, r2, [r1]
 8003408:	61bb      	str	r3, [r7, #24]
   return(result);
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1e5      	bne.n	80033dc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3758      	adds	r7, #88	@ 0x58
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	08003577 	.word	0x08003577
 8003420:	080036a3 	.word	0x080036a3
 8003424:	080036e1 	.word	0x080036e1

08003428 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003428:	b480      	push	{r7}
 800342a:	b08f      	sub	sp, #60	@ 0x3c
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	e853 3f00 	ldrex	r3, [r3]
 800343c:	61fb      	str	r3, [r7, #28]
   return(result);
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003444:	637b      	str	r3, [r7, #52]	@ 0x34
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800344e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003450:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003452:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003454:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003456:	e841 2300 	strex	r3, r2, [r1]
 800345a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800345c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1e6      	bne.n	8003430 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	3308      	adds	r3, #8
 8003468:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	e853 3f00 	ldrex	r3, [r3]
 8003470:	60bb      	str	r3, [r7, #8]
   return(result);
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003478:	633b      	str	r3, [r7, #48]	@ 0x30
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	3308      	adds	r3, #8
 8003480:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003482:	61ba      	str	r2, [r7, #24]
 8003484:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003486:	6979      	ldr	r1, [r7, #20]
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	e841 2300 	strex	r3, r2, [r1]
 800348e:	613b      	str	r3, [r7, #16]
   return(result);
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1e5      	bne.n	8003462 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2220      	movs	r2, #32
 800349a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800349e:	bf00      	nop
 80034a0:	373c      	adds	r7, #60	@ 0x3c
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b095      	sub	sp, #84	@ 0x54
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ba:	e853 3f00 	ldrex	r3, [r3]
 80034be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	461a      	mov	r2, r3
 80034ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80034d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034d8:	e841 2300 	strex	r3, r2, [r1]
 80034dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80034de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1e6      	bne.n	80034b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3308      	adds	r3, #8
 80034ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	e853 3f00 	ldrex	r3, [r3]
 80034f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034fa:	f023 0301 	bic.w	r3, r3, #1
 80034fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	3308      	adds	r3, #8
 8003506:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003508:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800350a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800350e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003510:	e841 2300 	strex	r3, r2, [r1]
 8003514:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1e3      	bne.n	80034e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003520:	2b01      	cmp	r3, #1
 8003522:	d118      	bne.n	8003556 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	e853 3f00 	ldrex	r3, [r3]
 8003530:	60bb      	str	r3, [r7, #8]
   return(result);
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	f023 0310 	bic.w	r3, r3, #16
 8003538:	647b      	str	r3, [r7, #68]	@ 0x44
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	461a      	mov	r2, r3
 8003540:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003542:	61bb      	str	r3, [r7, #24]
 8003544:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003546:	6979      	ldr	r1, [r7, #20]
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	e841 2300 	strex	r3, r2, [r1]
 800354e:	613b      	str	r3, [r7, #16]
   return(result);
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1e6      	bne.n	8003524 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2220      	movs	r2, #32
 800355a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800356a:	bf00      	nop
 800356c:	3754      	adds	r7, #84	@ 0x54
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b09c      	sub	sp, #112	@ 0x70
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003582:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b00      	cmp	r3, #0
 8003590:	d171      	bne.n	8003676 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8003592:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003594:	2200      	movs	r2, #0
 8003596:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800359a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035a2:	e853 3f00 	ldrex	r3, [r3]
 80035a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80035a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	461a      	mov	r2, r3
 80035b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035ba:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80035be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035c0:	e841 2300 	strex	r3, r2, [r1]
 80035c4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80035c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1e6      	bne.n	800359a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3308      	adds	r3, #8
 80035d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d6:	e853 3f00 	ldrex	r3, [r3]
 80035da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035de:	f023 0301 	bic.w	r3, r3, #1
 80035e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80035e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	3308      	adds	r3, #8
 80035ea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80035ec:	647a      	str	r2, [r7, #68]	@ 0x44
 80035ee:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035f4:	e841 2300 	strex	r3, r2, [r1]
 80035f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1e5      	bne.n	80035cc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003600:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3308      	adds	r3, #8
 8003606:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360a:	e853 3f00 	ldrex	r3, [r3]
 800360e:	623b      	str	r3, [r7, #32]
   return(result);
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003616:	663b      	str	r3, [r7, #96]	@ 0x60
 8003618:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3308      	adds	r3, #8
 800361e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003620:	633a      	str	r2, [r7, #48]	@ 0x30
 8003622:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003624:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003626:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003628:	e841 2300 	strex	r3, r2, [r1]
 800362c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800362e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e5      	bne.n	8003600 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003634:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003636:	2220      	movs	r2, #32
 8003638:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800363c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800363e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003640:	2b01      	cmp	r3, #1
 8003642:	d118      	bne.n	8003676 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003644:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	e853 3f00 	ldrex	r3, [r3]
 8003650:	60fb      	str	r3, [r7, #12]
   return(result);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f023 0310 	bic.w	r3, r3, #16
 8003658:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800365a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003662:	61fb      	str	r3, [r7, #28]
 8003664:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003666:	69b9      	ldr	r1, [r7, #24]
 8003668:	69fa      	ldr	r2, [r7, #28]
 800366a:	e841 2300 	strex	r3, r2, [r1]
 800366e:	617b      	str	r3, [r7, #20]
   return(result);
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1e6      	bne.n	8003644 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003676:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003678:	2200      	movs	r2, #0
 800367a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800367c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800367e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003680:	2b01      	cmp	r3, #1
 8003682:	d107      	bne.n	8003694 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003684:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003686:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800368a:	4619      	mov	r1, r3
 800368c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800368e:	f7ff f993 	bl	80029b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003692:	e002      	b.n	800369a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003694:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003696:	f7ff f971 	bl	800297c <HAL_UART_RxCpltCallback>
}
 800369a:	bf00      	nop
 800369c:	3770      	adds	r7, #112	@ 0x70
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2201      	movs	r2, #1
 80036b4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d109      	bne.n	80036d2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80036c4:	085b      	lsrs	r3, r3, #1
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	4619      	mov	r1, r3
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f7ff f974 	bl	80029b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80036d0:	e002      	b.n	80036d8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f7ff f95c 	bl	8002990 <HAL_UART_RxHalfCpltCallback>
}
 80036d8:	bf00      	nop
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ec:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036fc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003708:	2b80      	cmp	r3, #128	@ 0x80
 800370a:	d109      	bne.n	8003720 <UART_DMAError+0x40>
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	2b21      	cmp	r3, #33	@ 0x21
 8003710:	d106      	bne.n	8003720 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2200      	movs	r2, #0
 8003716:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800371a:	6978      	ldr	r0, [r7, #20]
 800371c:	f7ff fe84 	bl	8003428 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800372a:	2b40      	cmp	r3, #64	@ 0x40
 800372c:	d109      	bne.n	8003742 <UART_DMAError+0x62>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b22      	cmp	r3, #34	@ 0x22
 8003732:	d106      	bne.n	8003742 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	2200      	movs	r2, #0
 8003738:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800373c:	6978      	ldr	r0, [r7, #20]
 800373e:	f7ff feb4 	bl	80034aa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003748:	f043 0210 	orr.w	r2, r3, #16
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003752:	6978      	ldr	r0, [r7, #20]
 8003754:	f7ff f926 	bl	80029a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003758:	bf00      	nop
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_UARTEx_DisableFifoMode+0x16>
 8003772:	2302      	movs	r3, #2
 8003774:	e027      	b.n	80037c6 <HAL_UARTEx_DisableFifoMode+0x66>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2224      	movs	r2, #36	@ 0x24
 8003782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0201 	bic.w	r2, r2, #1
 800379c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80037a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b084      	sub	sp, #16
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
 80037da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e02d      	b.n	8003846 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2224      	movs	r2, #36	@ 0x24
 80037f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0201 	bic.w	r2, r2, #1
 8003810:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f850 	bl	80038cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2220      	movs	r2, #32
 8003838:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b084      	sub	sp, #16
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003862:	2302      	movs	r3, #2
 8003864:	e02d      	b.n	80038c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2224      	movs	r2, #36	@ 0x24
 8003872:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0201 	bic.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f812 	bl	80038cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d108      	bne.n	80038ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80038ec:	e031      	b.n	8003952 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80038ee:	2308      	movs	r3, #8
 80038f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80038f2:	2308      	movs	r3, #8
 80038f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	0e5b      	lsrs	r3, r3, #25
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	0f5b      	lsrs	r3, r3, #29
 800390e:	b2db      	uxtb	r3, r3
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003916:	7bbb      	ldrb	r3, [r7, #14]
 8003918:	7b3a      	ldrb	r2, [r7, #12]
 800391a:	4911      	ldr	r1, [pc, #68]	@ (8003960 <UARTEx_SetNbDataToProcess+0x94>)
 800391c:	5c8a      	ldrb	r2, [r1, r2]
 800391e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003922:	7b3a      	ldrb	r2, [r7, #12]
 8003924:	490f      	ldr	r1, [pc, #60]	@ (8003964 <UARTEx_SetNbDataToProcess+0x98>)
 8003926:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003928:	fb93 f3f2 	sdiv	r3, r3, r2
 800392c:	b29a      	uxth	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003934:	7bfb      	ldrb	r3, [r7, #15]
 8003936:	7b7a      	ldrb	r2, [r7, #13]
 8003938:	4909      	ldr	r1, [pc, #36]	@ (8003960 <UARTEx_SetNbDataToProcess+0x94>)
 800393a:	5c8a      	ldrb	r2, [r1, r2]
 800393c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003940:	7b7a      	ldrb	r2, [r7, #13]
 8003942:	4908      	ldr	r1, [pc, #32]	@ (8003964 <UARTEx_SetNbDataToProcess+0x98>)
 8003944:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003946:	fb93 f3f2 	sdiv	r3, r3, r2
 800394a:	b29a      	uxth	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003952:	bf00      	nop
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	08004330 	.word	0x08004330
 8003964:	08004338 	.word	0x08004338

08003968 <_vsniprintf_r>:
 8003968:	b530      	push	{r4, r5, lr}
 800396a:	4614      	mov	r4, r2
 800396c:	2c00      	cmp	r4, #0
 800396e:	b09b      	sub	sp, #108	@ 0x6c
 8003970:	4605      	mov	r5, r0
 8003972:	461a      	mov	r2, r3
 8003974:	da05      	bge.n	8003982 <_vsniprintf_r+0x1a>
 8003976:	238b      	movs	r3, #139	@ 0x8b
 8003978:	6003      	str	r3, [r0, #0]
 800397a:	f04f 30ff 	mov.w	r0, #4294967295
 800397e:	b01b      	add	sp, #108	@ 0x6c
 8003980:	bd30      	pop	{r4, r5, pc}
 8003982:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003986:	f8ad 300c 	strh.w	r3, [sp, #12]
 800398a:	bf14      	ite	ne
 800398c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003990:	4623      	moveq	r3, r4
 8003992:	9302      	str	r3, [sp, #8]
 8003994:	9305      	str	r3, [sp, #20]
 8003996:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800399a:	9100      	str	r1, [sp, #0]
 800399c:	9104      	str	r1, [sp, #16]
 800399e:	f8ad 300e 	strh.w	r3, [sp, #14]
 80039a2:	4669      	mov	r1, sp
 80039a4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80039a6:	f000 f9a1 	bl	8003cec <_svfiprintf_r>
 80039aa:	1c43      	adds	r3, r0, #1
 80039ac:	bfbc      	itt	lt
 80039ae:	238b      	movlt	r3, #139	@ 0x8b
 80039b0:	602b      	strlt	r3, [r5, #0]
 80039b2:	2c00      	cmp	r4, #0
 80039b4:	d0e3      	beq.n	800397e <_vsniprintf_r+0x16>
 80039b6:	9b00      	ldr	r3, [sp, #0]
 80039b8:	2200      	movs	r2, #0
 80039ba:	701a      	strb	r2, [r3, #0]
 80039bc:	e7df      	b.n	800397e <_vsniprintf_r+0x16>
	...

080039c0 <vsniprintf>:
 80039c0:	b507      	push	{r0, r1, r2, lr}
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	4613      	mov	r3, r2
 80039c6:	460a      	mov	r2, r1
 80039c8:	4601      	mov	r1, r0
 80039ca:	4803      	ldr	r0, [pc, #12]	@ (80039d8 <vsniprintf+0x18>)
 80039cc:	6800      	ldr	r0, [r0, #0]
 80039ce:	f7ff ffcb 	bl	8003968 <_vsniprintf_r>
 80039d2:	b003      	add	sp, #12
 80039d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80039d8:	2000000c 	.word	0x2000000c

080039dc <memset>:
 80039dc:	4402      	add	r2, r0
 80039de:	4603      	mov	r3, r0
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d100      	bne.n	80039e6 <memset+0xa>
 80039e4:	4770      	bx	lr
 80039e6:	f803 1b01 	strb.w	r1, [r3], #1
 80039ea:	e7f9      	b.n	80039e0 <memset+0x4>

080039ec <__errno>:
 80039ec:	4b01      	ldr	r3, [pc, #4]	@ (80039f4 <__errno+0x8>)
 80039ee:	6818      	ldr	r0, [r3, #0]
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	2000000c 	.word	0x2000000c

080039f8 <__libc_init_array>:
 80039f8:	b570      	push	{r4, r5, r6, lr}
 80039fa:	4d0d      	ldr	r5, [pc, #52]	@ (8003a30 <__libc_init_array+0x38>)
 80039fc:	4c0d      	ldr	r4, [pc, #52]	@ (8003a34 <__libc_init_array+0x3c>)
 80039fe:	1b64      	subs	r4, r4, r5
 8003a00:	10a4      	asrs	r4, r4, #2
 8003a02:	2600      	movs	r6, #0
 8003a04:	42a6      	cmp	r6, r4
 8003a06:	d109      	bne.n	8003a1c <__libc_init_array+0x24>
 8003a08:	4d0b      	ldr	r5, [pc, #44]	@ (8003a38 <__libc_init_array+0x40>)
 8003a0a:	4c0c      	ldr	r4, [pc, #48]	@ (8003a3c <__libc_init_array+0x44>)
 8003a0c:	f000 fc66 	bl	80042dc <_init>
 8003a10:	1b64      	subs	r4, r4, r5
 8003a12:	10a4      	asrs	r4, r4, #2
 8003a14:	2600      	movs	r6, #0
 8003a16:	42a6      	cmp	r6, r4
 8003a18:	d105      	bne.n	8003a26 <__libc_init_array+0x2e>
 8003a1a:	bd70      	pop	{r4, r5, r6, pc}
 8003a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a20:	4798      	blx	r3
 8003a22:	3601      	adds	r6, #1
 8003a24:	e7ee      	b.n	8003a04 <__libc_init_array+0xc>
 8003a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a2a:	4798      	blx	r3
 8003a2c:	3601      	adds	r6, #1
 8003a2e:	e7f2      	b.n	8003a16 <__libc_init_array+0x1e>
 8003a30:	0800437c 	.word	0x0800437c
 8003a34:	0800437c 	.word	0x0800437c
 8003a38:	0800437c 	.word	0x0800437c
 8003a3c:	08004380 	.word	0x08004380

08003a40 <__retarget_lock_acquire_recursive>:
 8003a40:	4770      	bx	lr

08003a42 <__retarget_lock_release_recursive>:
 8003a42:	4770      	bx	lr

08003a44 <_free_r>:
 8003a44:	b538      	push	{r3, r4, r5, lr}
 8003a46:	4605      	mov	r5, r0
 8003a48:	2900      	cmp	r1, #0
 8003a4a:	d041      	beq.n	8003ad0 <_free_r+0x8c>
 8003a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a50:	1f0c      	subs	r4, r1, #4
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	bfb8      	it	lt
 8003a56:	18e4      	addlt	r4, r4, r3
 8003a58:	f000 f8e0 	bl	8003c1c <__malloc_lock>
 8003a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad4 <_free_r+0x90>)
 8003a5e:	6813      	ldr	r3, [r2, #0]
 8003a60:	b933      	cbnz	r3, 8003a70 <_free_r+0x2c>
 8003a62:	6063      	str	r3, [r4, #4]
 8003a64:	6014      	str	r4, [r2, #0]
 8003a66:	4628      	mov	r0, r5
 8003a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a6c:	f000 b8dc 	b.w	8003c28 <__malloc_unlock>
 8003a70:	42a3      	cmp	r3, r4
 8003a72:	d908      	bls.n	8003a86 <_free_r+0x42>
 8003a74:	6820      	ldr	r0, [r4, #0]
 8003a76:	1821      	adds	r1, r4, r0
 8003a78:	428b      	cmp	r3, r1
 8003a7a:	bf01      	itttt	eq
 8003a7c:	6819      	ldreq	r1, [r3, #0]
 8003a7e:	685b      	ldreq	r3, [r3, #4]
 8003a80:	1809      	addeq	r1, r1, r0
 8003a82:	6021      	streq	r1, [r4, #0]
 8003a84:	e7ed      	b.n	8003a62 <_free_r+0x1e>
 8003a86:	461a      	mov	r2, r3
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	b10b      	cbz	r3, 8003a90 <_free_r+0x4c>
 8003a8c:	42a3      	cmp	r3, r4
 8003a8e:	d9fa      	bls.n	8003a86 <_free_r+0x42>
 8003a90:	6811      	ldr	r1, [r2, #0]
 8003a92:	1850      	adds	r0, r2, r1
 8003a94:	42a0      	cmp	r0, r4
 8003a96:	d10b      	bne.n	8003ab0 <_free_r+0x6c>
 8003a98:	6820      	ldr	r0, [r4, #0]
 8003a9a:	4401      	add	r1, r0
 8003a9c:	1850      	adds	r0, r2, r1
 8003a9e:	4283      	cmp	r3, r0
 8003aa0:	6011      	str	r1, [r2, #0]
 8003aa2:	d1e0      	bne.n	8003a66 <_free_r+0x22>
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	6053      	str	r3, [r2, #4]
 8003aaa:	4408      	add	r0, r1
 8003aac:	6010      	str	r0, [r2, #0]
 8003aae:	e7da      	b.n	8003a66 <_free_r+0x22>
 8003ab0:	d902      	bls.n	8003ab8 <_free_r+0x74>
 8003ab2:	230c      	movs	r3, #12
 8003ab4:	602b      	str	r3, [r5, #0]
 8003ab6:	e7d6      	b.n	8003a66 <_free_r+0x22>
 8003ab8:	6820      	ldr	r0, [r4, #0]
 8003aba:	1821      	adds	r1, r4, r0
 8003abc:	428b      	cmp	r3, r1
 8003abe:	bf04      	itt	eq
 8003ac0:	6819      	ldreq	r1, [r3, #0]
 8003ac2:	685b      	ldreq	r3, [r3, #4]
 8003ac4:	6063      	str	r3, [r4, #4]
 8003ac6:	bf04      	itt	eq
 8003ac8:	1809      	addeq	r1, r1, r0
 8003aca:	6021      	streq	r1, [r4, #0]
 8003acc:	6054      	str	r4, [r2, #4]
 8003ace:	e7ca      	b.n	8003a66 <_free_r+0x22>
 8003ad0:	bd38      	pop	{r3, r4, r5, pc}
 8003ad2:	bf00      	nop
 8003ad4:	200003b8 	.word	0x200003b8

08003ad8 <sbrk_aligned>:
 8003ad8:	b570      	push	{r4, r5, r6, lr}
 8003ada:	4e0f      	ldr	r6, [pc, #60]	@ (8003b18 <sbrk_aligned+0x40>)
 8003adc:	460c      	mov	r4, r1
 8003ade:	6831      	ldr	r1, [r6, #0]
 8003ae0:	4605      	mov	r5, r0
 8003ae2:	b911      	cbnz	r1, 8003aea <sbrk_aligned+0x12>
 8003ae4:	f000 fba6 	bl	8004234 <_sbrk_r>
 8003ae8:	6030      	str	r0, [r6, #0]
 8003aea:	4621      	mov	r1, r4
 8003aec:	4628      	mov	r0, r5
 8003aee:	f000 fba1 	bl	8004234 <_sbrk_r>
 8003af2:	1c43      	adds	r3, r0, #1
 8003af4:	d103      	bne.n	8003afe <sbrk_aligned+0x26>
 8003af6:	f04f 34ff 	mov.w	r4, #4294967295
 8003afa:	4620      	mov	r0, r4
 8003afc:	bd70      	pop	{r4, r5, r6, pc}
 8003afe:	1cc4      	adds	r4, r0, #3
 8003b00:	f024 0403 	bic.w	r4, r4, #3
 8003b04:	42a0      	cmp	r0, r4
 8003b06:	d0f8      	beq.n	8003afa <sbrk_aligned+0x22>
 8003b08:	1a21      	subs	r1, r4, r0
 8003b0a:	4628      	mov	r0, r5
 8003b0c:	f000 fb92 	bl	8004234 <_sbrk_r>
 8003b10:	3001      	adds	r0, #1
 8003b12:	d1f2      	bne.n	8003afa <sbrk_aligned+0x22>
 8003b14:	e7ef      	b.n	8003af6 <sbrk_aligned+0x1e>
 8003b16:	bf00      	nop
 8003b18:	200003b4 	.word	0x200003b4

08003b1c <_malloc_r>:
 8003b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b20:	1ccd      	adds	r5, r1, #3
 8003b22:	f025 0503 	bic.w	r5, r5, #3
 8003b26:	3508      	adds	r5, #8
 8003b28:	2d0c      	cmp	r5, #12
 8003b2a:	bf38      	it	cc
 8003b2c:	250c      	movcc	r5, #12
 8003b2e:	2d00      	cmp	r5, #0
 8003b30:	4606      	mov	r6, r0
 8003b32:	db01      	blt.n	8003b38 <_malloc_r+0x1c>
 8003b34:	42a9      	cmp	r1, r5
 8003b36:	d904      	bls.n	8003b42 <_malloc_r+0x26>
 8003b38:	230c      	movs	r3, #12
 8003b3a:	6033      	str	r3, [r6, #0]
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c18 <_malloc_r+0xfc>
 8003b46:	f000 f869 	bl	8003c1c <__malloc_lock>
 8003b4a:	f8d8 3000 	ldr.w	r3, [r8]
 8003b4e:	461c      	mov	r4, r3
 8003b50:	bb44      	cbnz	r4, 8003ba4 <_malloc_r+0x88>
 8003b52:	4629      	mov	r1, r5
 8003b54:	4630      	mov	r0, r6
 8003b56:	f7ff ffbf 	bl	8003ad8 <sbrk_aligned>
 8003b5a:	1c43      	adds	r3, r0, #1
 8003b5c:	4604      	mov	r4, r0
 8003b5e:	d158      	bne.n	8003c12 <_malloc_r+0xf6>
 8003b60:	f8d8 4000 	ldr.w	r4, [r8]
 8003b64:	4627      	mov	r7, r4
 8003b66:	2f00      	cmp	r7, #0
 8003b68:	d143      	bne.n	8003bf2 <_malloc_r+0xd6>
 8003b6a:	2c00      	cmp	r4, #0
 8003b6c:	d04b      	beq.n	8003c06 <_malloc_r+0xea>
 8003b6e:	6823      	ldr	r3, [r4, #0]
 8003b70:	4639      	mov	r1, r7
 8003b72:	4630      	mov	r0, r6
 8003b74:	eb04 0903 	add.w	r9, r4, r3
 8003b78:	f000 fb5c 	bl	8004234 <_sbrk_r>
 8003b7c:	4581      	cmp	r9, r0
 8003b7e:	d142      	bne.n	8003c06 <_malloc_r+0xea>
 8003b80:	6821      	ldr	r1, [r4, #0]
 8003b82:	1a6d      	subs	r5, r5, r1
 8003b84:	4629      	mov	r1, r5
 8003b86:	4630      	mov	r0, r6
 8003b88:	f7ff ffa6 	bl	8003ad8 <sbrk_aligned>
 8003b8c:	3001      	adds	r0, #1
 8003b8e:	d03a      	beq.n	8003c06 <_malloc_r+0xea>
 8003b90:	6823      	ldr	r3, [r4, #0]
 8003b92:	442b      	add	r3, r5
 8003b94:	6023      	str	r3, [r4, #0]
 8003b96:	f8d8 3000 	ldr.w	r3, [r8]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	bb62      	cbnz	r2, 8003bf8 <_malloc_r+0xdc>
 8003b9e:	f8c8 7000 	str.w	r7, [r8]
 8003ba2:	e00f      	b.n	8003bc4 <_malloc_r+0xa8>
 8003ba4:	6822      	ldr	r2, [r4, #0]
 8003ba6:	1b52      	subs	r2, r2, r5
 8003ba8:	d420      	bmi.n	8003bec <_malloc_r+0xd0>
 8003baa:	2a0b      	cmp	r2, #11
 8003bac:	d917      	bls.n	8003bde <_malloc_r+0xc2>
 8003bae:	1961      	adds	r1, r4, r5
 8003bb0:	42a3      	cmp	r3, r4
 8003bb2:	6025      	str	r5, [r4, #0]
 8003bb4:	bf18      	it	ne
 8003bb6:	6059      	strne	r1, [r3, #4]
 8003bb8:	6863      	ldr	r3, [r4, #4]
 8003bba:	bf08      	it	eq
 8003bbc:	f8c8 1000 	streq.w	r1, [r8]
 8003bc0:	5162      	str	r2, [r4, r5]
 8003bc2:	604b      	str	r3, [r1, #4]
 8003bc4:	4630      	mov	r0, r6
 8003bc6:	f000 f82f 	bl	8003c28 <__malloc_unlock>
 8003bca:	f104 000b 	add.w	r0, r4, #11
 8003bce:	1d23      	adds	r3, r4, #4
 8003bd0:	f020 0007 	bic.w	r0, r0, #7
 8003bd4:	1ac2      	subs	r2, r0, r3
 8003bd6:	bf1c      	itt	ne
 8003bd8:	1a1b      	subne	r3, r3, r0
 8003bda:	50a3      	strne	r3, [r4, r2]
 8003bdc:	e7af      	b.n	8003b3e <_malloc_r+0x22>
 8003bde:	6862      	ldr	r2, [r4, #4]
 8003be0:	42a3      	cmp	r3, r4
 8003be2:	bf0c      	ite	eq
 8003be4:	f8c8 2000 	streq.w	r2, [r8]
 8003be8:	605a      	strne	r2, [r3, #4]
 8003bea:	e7eb      	b.n	8003bc4 <_malloc_r+0xa8>
 8003bec:	4623      	mov	r3, r4
 8003bee:	6864      	ldr	r4, [r4, #4]
 8003bf0:	e7ae      	b.n	8003b50 <_malloc_r+0x34>
 8003bf2:	463c      	mov	r4, r7
 8003bf4:	687f      	ldr	r7, [r7, #4]
 8003bf6:	e7b6      	b.n	8003b66 <_malloc_r+0x4a>
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	42a3      	cmp	r3, r4
 8003bfe:	d1fb      	bne.n	8003bf8 <_malloc_r+0xdc>
 8003c00:	2300      	movs	r3, #0
 8003c02:	6053      	str	r3, [r2, #4]
 8003c04:	e7de      	b.n	8003bc4 <_malloc_r+0xa8>
 8003c06:	230c      	movs	r3, #12
 8003c08:	6033      	str	r3, [r6, #0]
 8003c0a:	4630      	mov	r0, r6
 8003c0c:	f000 f80c 	bl	8003c28 <__malloc_unlock>
 8003c10:	e794      	b.n	8003b3c <_malloc_r+0x20>
 8003c12:	6005      	str	r5, [r0, #0]
 8003c14:	e7d6      	b.n	8003bc4 <_malloc_r+0xa8>
 8003c16:	bf00      	nop
 8003c18:	200003b8 	.word	0x200003b8

08003c1c <__malloc_lock>:
 8003c1c:	4801      	ldr	r0, [pc, #4]	@ (8003c24 <__malloc_lock+0x8>)
 8003c1e:	f7ff bf0f 	b.w	8003a40 <__retarget_lock_acquire_recursive>
 8003c22:	bf00      	nop
 8003c24:	200003b0 	.word	0x200003b0

08003c28 <__malloc_unlock>:
 8003c28:	4801      	ldr	r0, [pc, #4]	@ (8003c30 <__malloc_unlock+0x8>)
 8003c2a:	f7ff bf0a 	b.w	8003a42 <__retarget_lock_release_recursive>
 8003c2e:	bf00      	nop
 8003c30:	200003b0 	.word	0x200003b0

08003c34 <__ssputs_r>:
 8003c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c38:	688e      	ldr	r6, [r1, #8]
 8003c3a:	461f      	mov	r7, r3
 8003c3c:	42be      	cmp	r6, r7
 8003c3e:	680b      	ldr	r3, [r1, #0]
 8003c40:	4682      	mov	sl, r0
 8003c42:	460c      	mov	r4, r1
 8003c44:	4690      	mov	r8, r2
 8003c46:	d82d      	bhi.n	8003ca4 <__ssputs_r+0x70>
 8003c48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003c50:	d026      	beq.n	8003ca0 <__ssputs_r+0x6c>
 8003c52:	6965      	ldr	r5, [r4, #20]
 8003c54:	6909      	ldr	r1, [r1, #16]
 8003c56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c5a:	eba3 0901 	sub.w	r9, r3, r1
 8003c5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c62:	1c7b      	adds	r3, r7, #1
 8003c64:	444b      	add	r3, r9
 8003c66:	106d      	asrs	r5, r5, #1
 8003c68:	429d      	cmp	r5, r3
 8003c6a:	bf38      	it	cc
 8003c6c:	461d      	movcc	r5, r3
 8003c6e:	0553      	lsls	r3, r2, #21
 8003c70:	d527      	bpl.n	8003cc2 <__ssputs_r+0x8e>
 8003c72:	4629      	mov	r1, r5
 8003c74:	f7ff ff52 	bl	8003b1c <_malloc_r>
 8003c78:	4606      	mov	r6, r0
 8003c7a:	b360      	cbz	r0, 8003cd6 <__ssputs_r+0xa2>
 8003c7c:	6921      	ldr	r1, [r4, #16]
 8003c7e:	464a      	mov	r2, r9
 8003c80:	f000 fae8 	bl	8004254 <memcpy>
 8003c84:	89a3      	ldrh	r3, [r4, #12]
 8003c86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c8e:	81a3      	strh	r3, [r4, #12]
 8003c90:	6126      	str	r6, [r4, #16]
 8003c92:	6165      	str	r5, [r4, #20]
 8003c94:	444e      	add	r6, r9
 8003c96:	eba5 0509 	sub.w	r5, r5, r9
 8003c9a:	6026      	str	r6, [r4, #0]
 8003c9c:	60a5      	str	r5, [r4, #8]
 8003c9e:	463e      	mov	r6, r7
 8003ca0:	42be      	cmp	r6, r7
 8003ca2:	d900      	bls.n	8003ca6 <__ssputs_r+0x72>
 8003ca4:	463e      	mov	r6, r7
 8003ca6:	6820      	ldr	r0, [r4, #0]
 8003ca8:	4632      	mov	r2, r6
 8003caa:	4641      	mov	r1, r8
 8003cac:	f000 faa8 	bl	8004200 <memmove>
 8003cb0:	68a3      	ldr	r3, [r4, #8]
 8003cb2:	1b9b      	subs	r3, r3, r6
 8003cb4:	60a3      	str	r3, [r4, #8]
 8003cb6:	6823      	ldr	r3, [r4, #0]
 8003cb8:	4433      	add	r3, r6
 8003cba:	6023      	str	r3, [r4, #0]
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cc2:	462a      	mov	r2, r5
 8003cc4:	f000 fad4 	bl	8004270 <_realloc_r>
 8003cc8:	4606      	mov	r6, r0
 8003cca:	2800      	cmp	r0, #0
 8003ccc:	d1e0      	bne.n	8003c90 <__ssputs_r+0x5c>
 8003cce:	6921      	ldr	r1, [r4, #16]
 8003cd0:	4650      	mov	r0, sl
 8003cd2:	f7ff feb7 	bl	8003a44 <_free_r>
 8003cd6:	230c      	movs	r3, #12
 8003cd8:	f8ca 3000 	str.w	r3, [sl]
 8003cdc:	89a3      	ldrh	r3, [r4, #12]
 8003cde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ce2:	81a3      	strh	r3, [r4, #12]
 8003ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce8:	e7e9      	b.n	8003cbe <__ssputs_r+0x8a>
	...

08003cec <_svfiprintf_r>:
 8003cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cf0:	4698      	mov	r8, r3
 8003cf2:	898b      	ldrh	r3, [r1, #12]
 8003cf4:	061b      	lsls	r3, r3, #24
 8003cf6:	b09d      	sub	sp, #116	@ 0x74
 8003cf8:	4607      	mov	r7, r0
 8003cfa:	460d      	mov	r5, r1
 8003cfc:	4614      	mov	r4, r2
 8003cfe:	d510      	bpl.n	8003d22 <_svfiprintf_r+0x36>
 8003d00:	690b      	ldr	r3, [r1, #16]
 8003d02:	b973      	cbnz	r3, 8003d22 <_svfiprintf_r+0x36>
 8003d04:	2140      	movs	r1, #64	@ 0x40
 8003d06:	f7ff ff09 	bl	8003b1c <_malloc_r>
 8003d0a:	6028      	str	r0, [r5, #0]
 8003d0c:	6128      	str	r0, [r5, #16]
 8003d0e:	b930      	cbnz	r0, 8003d1e <_svfiprintf_r+0x32>
 8003d10:	230c      	movs	r3, #12
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	f04f 30ff 	mov.w	r0, #4294967295
 8003d18:	b01d      	add	sp, #116	@ 0x74
 8003d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d1e:	2340      	movs	r3, #64	@ 0x40
 8003d20:	616b      	str	r3, [r5, #20]
 8003d22:	2300      	movs	r3, #0
 8003d24:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d26:	2320      	movs	r3, #32
 8003d28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d30:	2330      	movs	r3, #48	@ 0x30
 8003d32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003ed0 <_svfiprintf_r+0x1e4>
 8003d36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d3a:	f04f 0901 	mov.w	r9, #1
 8003d3e:	4623      	mov	r3, r4
 8003d40:	469a      	mov	sl, r3
 8003d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d46:	b10a      	cbz	r2, 8003d4c <_svfiprintf_r+0x60>
 8003d48:	2a25      	cmp	r2, #37	@ 0x25
 8003d4a:	d1f9      	bne.n	8003d40 <_svfiprintf_r+0x54>
 8003d4c:	ebba 0b04 	subs.w	fp, sl, r4
 8003d50:	d00b      	beq.n	8003d6a <_svfiprintf_r+0x7e>
 8003d52:	465b      	mov	r3, fp
 8003d54:	4622      	mov	r2, r4
 8003d56:	4629      	mov	r1, r5
 8003d58:	4638      	mov	r0, r7
 8003d5a:	f7ff ff6b 	bl	8003c34 <__ssputs_r>
 8003d5e:	3001      	adds	r0, #1
 8003d60:	f000 80a7 	beq.w	8003eb2 <_svfiprintf_r+0x1c6>
 8003d64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d66:	445a      	add	r2, fp
 8003d68:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 809f 	beq.w	8003eb2 <_svfiprintf_r+0x1c6>
 8003d74:	2300      	movs	r3, #0
 8003d76:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d7e:	f10a 0a01 	add.w	sl, sl, #1
 8003d82:	9304      	str	r3, [sp, #16]
 8003d84:	9307      	str	r3, [sp, #28]
 8003d86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d8c:	4654      	mov	r4, sl
 8003d8e:	2205      	movs	r2, #5
 8003d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d94:	484e      	ldr	r0, [pc, #312]	@ (8003ed0 <_svfiprintf_r+0x1e4>)
 8003d96:	f7fc fa43 	bl	8000220 <memchr>
 8003d9a:	9a04      	ldr	r2, [sp, #16]
 8003d9c:	b9d8      	cbnz	r0, 8003dd6 <_svfiprintf_r+0xea>
 8003d9e:	06d0      	lsls	r0, r2, #27
 8003da0:	bf44      	itt	mi
 8003da2:	2320      	movmi	r3, #32
 8003da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003da8:	0711      	lsls	r1, r2, #28
 8003daa:	bf44      	itt	mi
 8003dac:	232b      	movmi	r3, #43	@ 0x2b
 8003dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003db2:	f89a 3000 	ldrb.w	r3, [sl]
 8003db6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003db8:	d015      	beq.n	8003de6 <_svfiprintf_r+0xfa>
 8003dba:	9a07      	ldr	r2, [sp, #28]
 8003dbc:	4654      	mov	r4, sl
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	f04f 0c0a 	mov.w	ip, #10
 8003dc4:	4621      	mov	r1, r4
 8003dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dca:	3b30      	subs	r3, #48	@ 0x30
 8003dcc:	2b09      	cmp	r3, #9
 8003dce:	d94b      	bls.n	8003e68 <_svfiprintf_r+0x17c>
 8003dd0:	b1b0      	cbz	r0, 8003e00 <_svfiprintf_r+0x114>
 8003dd2:	9207      	str	r2, [sp, #28]
 8003dd4:	e014      	b.n	8003e00 <_svfiprintf_r+0x114>
 8003dd6:	eba0 0308 	sub.w	r3, r0, r8
 8003dda:	fa09 f303 	lsl.w	r3, r9, r3
 8003dde:	4313      	orrs	r3, r2
 8003de0:	9304      	str	r3, [sp, #16]
 8003de2:	46a2      	mov	sl, r4
 8003de4:	e7d2      	b.n	8003d8c <_svfiprintf_r+0xa0>
 8003de6:	9b03      	ldr	r3, [sp, #12]
 8003de8:	1d19      	adds	r1, r3, #4
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	9103      	str	r1, [sp, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	bfbb      	ittet	lt
 8003df2:	425b      	neglt	r3, r3
 8003df4:	f042 0202 	orrlt.w	r2, r2, #2
 8003df8:	9307      	strge	r3, [sp, #28]
 8003dfa:	9307      	strlt	r3, [sp, #28]
 8003dfc:	bfb8      	it	lt
 8003dfe:	9204      	strlt	r2, [sp, #16]
 8003e00:	7823      	ldrb	r3, [r4, #0]
 8003e02:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e04:	d10a      	bne.n	8003e1c <_svfiprintf_r+0x130>
 8003e06:	7863      	ldrb	r3, [r4, #1]
 8003e08:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e0a:	d132      	bne.n	8003e72 <_svfiprintf_r+0x186>
 8003e0c:	9b03      	ldr	r3, [sp, #12]
 8003e0e:	1d1a      	adds	r2, r3, #4
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	9203      	str	r2, [sp, #12]
 8003e14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e18:	3402      	adds	r4, #2
 8003e1a:	9305      	str	r3, [sp, #20]
 8003e1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003ee0 <_svfiprintf_r+0x1f4>
 8003e20:	7821      	ldrb	r1, [r4, #0]
 8003e22:	2203      	movs	r2, #3
 8003e24:	4650      	mov	r0, sl
 8003e26:	f7fc f9fb 	bl	8000220 <memchr>
 8003e2a:	b138      	cbz	r0, 8003e3c <_svfiprintf_r+0x150>
 8003e2c:	9b04      	ldr	r3, [sp, #16]
 8003e2e:	eba0 000a 	sub.w	r0, r0, sl
 8003e32:	2240      	movs	r2, #64	@ 0x40
 8003e34:	4082      	lsls	r2, r0
 8003e36:	4313      	orrs	r3, r2
 8003e38:	3401      	adds	r4, #1
 8003e3a:	9304      	str	r3, [sp, #16]
 8003e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e40:	4824      	ldr	r0, [pc, #144]	@ (8003ed4 <_svfiprintf_r+0x1e8>)
 8003e42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003e46:	2206      	movs	r2, #6
 8003e48:	f7fc f9ea 	bl	8000220 <memchr>
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	d036      	beq.n	8003ebe <_svfiprintf_r+0x1d2>
 8003e50:	4b21      	ldr	r3, [pc, #132]	@ (8003ed8 <_svfiprintf_r+0x1ec>)
 8003e52:	bb1b      	cbnz	r3, 8003e9c <_svfiprintf_r+0x1b0>
 8003e54:	9b03      	ldr	r3, [sp, #12]
 8003e56:	3307      	adds	r3, #7
 8003e58:	f023 0307 	bic.w	r3, r3, #7
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	9303      	str	r3, [sp, #12]
 8003e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e62:	4433      	add	r3, r6
 8003e64:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e66:	e76a      	b.n	8003d3e <_svfiprintf_r+0x52>
 8003e68:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e6c:	460c      	mov	r4, r1
 8003e6e:	2001      	movs	r0, #1
 8003e70:	e7a8      	b.n	8003dc4 <_svfiprintf_r+0xd8>
 8003e72:	2300      	movs	r3, #0
 8003e74:	3401      	adds	r4, #1
 8003e76:	9305      	str	r3, [sp, #20]
 8003e78:	4619      	mov	r1, r3
 8003e7a:	f04f 0c0a 	mov.w	ip, #10
 8003e7e:	4620      	mov	r0, r4
 8003e80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e84:	3a30      	subs	r2, #48	@ 0x30
 8003e86:	2a09      	cmp	r2, #9
 8003e88:	d903      	bls.n	8003e92 <_svfiprintf_r+0x1a6>
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0c6      	beq.n	8003e1c <_svfiprintf_r+0x130>
 8003e8e:	9105      	str	r1, [sp, #20]
 8003e90:	e7c4      	b.n	8003e1c <_svfiprintf_r+0x130>
 8003e92:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e96:	4604      	mov	r4, r0
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e7f0      	b.n	8003e7e <_svfiprintf_r+0x192>
 8003e9c:	ab03      	add	r3, sp, #12
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	462a      	mov	r2, r5
 8003ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8003edc <_svfiprintf_r+0x1f0>)
 8003ea4:	a904      	add	r1, sp, #16
 8003ea6:	4638      	mov	r0, r7
 8003ea8:	f3af 8000 	nop.w
 8003eac:	1c42      	adds	r2, r0, #1
 8003eae:	4606      	mov	r6, r0
 8003eb0:	d1d6      	bne.n	8003e60 <_svfiprintf_r+0x174>
 8003eb2:	89ab      	ldrh	r3, [r5, #12]
 8003eb4:	065b      	lsls	r3, r3, #25
 8003eb6:	f53f af2d 	bmi.w	8003d14 <_svfiprintf_r+0x28>
 8003eba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ebc:	e72c      	b.n	8003d18 <_svfiprintf_r+0x2c>
 8003ebe:	ab03      	add	r3, sp, #12
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	462a      	mov	r2, r5
 8003ec4:	4b05      	ldr	r3, [pc, #20]	@ (8003edc <_svfiprintf_r+0x1f0>)
 8003ec6:	a904      	add	r1, sp, #16
 8003ec8:	4638      	mov	r0, r7
 8003eca:	f000 f879 	bl	8003fc0 <_printf_i>
 8003ece:	e7ed      	b.n	8003eac <_svfiprintf_r+0x1c0>
 8003ed0:	08004340 	.word	0x08004340
 8003ed4:	0800434a 	.word	0x0800434a
 8003ed8:	00000000 	.word	0x00000000
 8003edc:	08003c35 	.word	0x08003c35
 8003ee0:	08004346 	.word	0x08004346

08003ee4 <_printf_common>:
 8003ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee8:	4616      	mov	r6, r2
 8003eea:	4698      	mov	r8, r3
 8003eec:	688a      	ldr	r2, [r1, #8]
 8003eee:	690b      	ldr	r3, [r1, #16]
 8003ef0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	bfb8      	it	lt
 8003ef8:	4613      	movlt	r3, r2
 8003efa:	6033      	str	r3, [r6, #0]
 8003efc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f00:	4607      	mov	r7, r0
 8003f02:	460c      	mov	r4, r1
 8003f04:	b10a      	cbz	r2, 8003f0a <_printf_common+0x26>
 8003f06:	3301      	adds	r3, #1
 8003f08:	6033      	str	r3, [r6, #0]
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	0699      	lsls	r1, r3, #26
 8003f0e:	bf42      	ittt	mi
 8003f10:	6833      	ldrmi	r3, [r6, #0]
 8003f12:	3302      	addmi	r3, #2
 8003f14:	6033      	strmi	r3, [r6, #0]
 8003f16:	6825      	ldr	r5, [r4, #0]
 8003f18:	f015 0506 	ands.w	r5, r5, #6
 8003f1c:	d106      	bne.n	8003f2c <_printf_common+0x48>
 8003f1e:	f104 0a19 	add.w	sl, r4, #25
 8003f22:	68e3      	ldr	r3, [r4, #12]
 8003f24:	6832      	ldr	r2, [r6, #0]
 8003f26:	1a9b      	subs	r3, r3, r2
 8003f28:	42ab      	cmp	r3, r5
 8003f2a:	dc26      	bgt.n	8003f7a <_printf_common+0x96>
 8003f2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f30:	6822      	ldr	r2, [r4, #0]
 8003f32:	3b00      	subs	r3, #0
 8003f34:	bf18      	it	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	0692      	lsls	r2, r2, #26
 8003f3a:	d42b      	bmi.n	8003f94 <_printf_common+0xb0>
 8003f3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f40:	4641      	mov	r1, r8
 8003f42:	4638      	mov	r0, r7
 8003f44:	47c8      	blx	r9
 8003f46:	3001      	adds	r0, #1
 8003f48:	d01e      	beq.n	8003f88 <_printf_common+0xa4>
 8003f4a:	6823      	ldr	r3, [r4, #0]
 8003f4c:	6922      	ldr	r2, [r4, #16]
 8003f4e:	f003 0306 	and.w	r3, r3, #6
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	bf02      	ittt	eq
 8003f56:	68e5      	ldreq	r5, [r4, #12]
 8003f58:	6833      	ldreq	r3, [r6, #0]
 8003f5a:	1aed      	subeq	r5, r5, r3
 8003f5c:	68a3      	ldr	r3, [r4, #8]
 8003f5e:	bf0c      	ite	eq
 8003f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f64:	2500      	movne	r5, #0
 8003f66:	4293      	cmp	r3, r2
 8003f68:	bfc4      	itt	gt
 8003f6a:	1a9b      	subgt	r3, r3, r2
 8003f6c:	18ed      	addgt	r5, r5, r3
 8003f6e:	2600      	movs	r6, #0
 8003f70:	341a      	adds	r4, #26
 8003f72:	42b5      	cmp	r5, r6
 8003f74:	d11a      	bne.n	8003fac <_printf_common+0xc8>
 8003f76:	2000      	movs	r0, #0
 8003f78:	e008      	b.n	8003f8c <_printf_common+0xa8>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	4652      	mov	r2, sl
 8003f7e:	4641      	mov	r1, r8
 8003f80:	4638      	mov	r0, r7
 8003f82:	47c8      	blx	r9
 8003f84:	3001      	adds	r0, #1
 8003f86:	d103      	bne.n	8003f90 <_printf_common+0xac>
 8003f88:	f04f 30ff 	mov.w	r0, #4294967295
 8003f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f90:	3501      	adds	r5, #1
 8003f92:	e7c6      	b.n	8003f22 <_printf_common+0x3e>
 8003f94:	18e1      	adds	r1, r4, r3
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	2030      	movs	r0, #48	@ 0x30
 8003f9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f9e:	4422      	add	r2, r4
 8003fa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003fa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003fa8:	3302      	adds	r3, #2
 8003faa:	e7c7      	b.n	8003f3c <_printf_common+0x58>
 8003fac:	2301      	movs	r3, #1
 8003fae:	4622      	mov	r2, r4
 8003fb0:	4641      	mov	r1, r8
 8003fb2:	4638      	mov	r0, r7
 8003fb4:	47c8      	blx	r9
 8003fb6:	3001      	adds	r0, #1
 8003fb8:	d0e6      	beq.n	8003f88 <_printf_common+0xa4>
 8003fba:	3601      	adds	r6, #1
 8003fbc:	e7d9      	b.n	8003f72 <_printf_common+0x8e>
	...

08003fc0 <_printf_i>:
 8003fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fc4:	7e0f      	ldrb	r7, [r1, #24]
 8003fc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003fc8:	2f78      	cmp	r7, #120	@ 0x78
 8003fca:	4691      	mov	r9, r2
 8003fcc:	4680      	mov	r8, r0
 8003fce:	460c      	mov	r4, r1
 8003fd0:	469a      	mov	sl, r3
 8003fd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003fd6:	d807      	bhi.n	8003fe8 <_printf_i+0x28>
 8003fd8:	2f62      	cmp	r7, #98	@ 0x62
 8003fda:	d80a      	bhi.n	8003ff2 <_printf_i+0x32>
 8003fdc:	2f00      	cmp	r7, #0
 8003fde:	f000 80d2 	beq.w	8004186 <_printf_i+0x1c6>
 8003fe2:	2f58      	cmp	r7, #88	@ 0x58
 8003fe4:	f000 80b9 	beq.w	800415a <_printf_i+0x19a>
 8003fe8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003fec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ff0:	e03a      	b.n	8004068 <_printf_i+0xa8>
 8003ff2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ff6:	2b15      	cmp	r3, #21
 8003ff8:	d8f6      	bhi.n	8003fe8 <_printf_i+0x28>
 8003ffa:	a101      	add	r1, pc, #4	@ (adr r1, 8004000 <_printf_i+0x40>)
 8003ffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004000:	08004059 	.word	0x08004059
 8004004:	0800406d 	.word	0x0800406d
 8004008:	08003fe9 	.word	0x08003fe9
 800400c:	08003fe9 	.word	0x08003fe9
 8004010:	08003fe9 	.word	0x08003fe9
 8004014:	08003fe9 	.word	0x08003fe9
 8004018:	0800406d 	.word	0x0800406d
 800401c:	08003fe9 	.word	0x08003fe9
 8004020:	08003fe9 	.word	0x08003fe9
 8004024:	08003fe9 	.word	0x08003fe9
 8004028:	08003fe9 	.word	0x08003fe9
 800402c:	0800416d 	.word	0x0800416d
 8004030:	08004097 	.word	0x08004097
 8004034:	08004127 	.word	0x08004127
 8004038:	08003fe9 	.word	0x08003fe9
 800403c:	08003fe9 	.word	0x08003fe9
 8004040:	0800418f 	.word	0x0800418f
 8004044:	08003fe9 	.word	0x08003fe9
 8004048:	08004097 	.word	0x08004097
 800404c:	08003fe9 	.word	0x08003fe9
 8004050:	08003fe9 	.word	0x08003fe9
 8004054:	0800412f 	.word	0x0800412f
 8004058:	6833      	ldr	r3, [r6, #0]
 800405a:	1d1a      	adds	r2, r3, #4
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6032      	str	r2, [r6, #0]
 8004060:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004064:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004068:	2301      	movs	r3, #1
 800406a:	e09d      	b.n	80041a8 <_printf_i+0x1e8>
 800406c:	6833      	ldr	r3, [r6, #0]
 800406e:	6820      	ldr	r0, [r4, #0]
 8004070:	1d19      	adds	r1, r3, #4
 8004072:	6031      	str	r1, [r6, #0]
 8004074:	0606      	lsls	r6, r0, #24
 8004076:	d501      	bpl.n	800407c <_printf_i+0xbc>
 8004078:	681d      	ldr	r5, [r3, #0]
 800407a:	e003      	b.n	8004084 <_printf_i+0xc4>
 800407c:	0645      	lsls	r5, r0, #25
 800407e:	d5fb      	bpl.n	8004078 <_printf_i+0xb8>
 8004080:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004084:	2d00      	cmp	r5, #0
 8004086:	da03      	bge.n	8004090 <_printf_i+0xd0>
 8004088:	232d      	movs	r3, #45	@ 0x2d
 800408a:	426d      	negs	r5, r5
 800408c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004090:	4859      	ldr	r0, [pc, #356]	@ (80041f8 <_printf_i+0x238>)
 8004092:	230a      	movs	r3, #10
 8004094:	e011      	b.n	80040ba <_printf_i+0xfa>
 8004096:	6821      	ldr	r1, [r4, #0]
 8004098:	6833      	ldr	r3, [r6, #0]
 800409a:	0608      	lsls	r0, r1, #24
 800409c:	f853 5b04 	ldr.w	r5, [r3], #4
 80040a0:	d402      	bmi.n	80040a8 <_printf_i+0xe8>
 80040a2:	0649      	lsls	r1, r1, #25
 80040a4:	bf48      	it	mi
 80040a6:	b2ad      	uxthmi	r5, r5
 80040a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80040aa:	4853      	ldr	r0, [pc, #332]	@ (80041f8 <_printf_i+0x238>)
 80040ac:	6033      	str	r3, [r6, #0]
 80040ae:	bf14      	ite	ne
 80040b0:	230a      	movne	r3, #10
 80040b2:	2308      	moveq	r3, #8
 80040b4:	2100      	movs	r1, #0
 80040b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80040ba:	6866      	ldr	r6, [r4, #4]
 80040bc:	60a6      	str	r6, [r4, #8]
 80040be:	2e00      	cmp	r6, #0
 80040c0:	bfa2      	ittt	ge
 80040c2:	6821      	ldrge	r1, [r4, #0]
 80040c4:	f021 0104 	bicge.w	r1, r1, #4
 80040c8:	6021      	strge	r1, [r4, #0]
 80040ca:	b90d      	cbnz	r5, 80040d0 <_printf_i+0x110>
 80040cc:	2e00      	cmp	r6, #0
 80040ce:	d04b      	beq.n	8004168 <_printf_i+0x1a8>
 80040d0:	4616      	mov	r6, r2
 80040d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80040d6:	fb03 5711 	mls	r7, r3, r1, r5
 80040da:	5dc7      	ldrb	r7, [r0, r7]
 80040dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040e0:	462f      	mov	r7, r5
 80040e2:	42bb      	cmp	r3, r7
 80040e4:	460d      	mov	r5, r1
 80040e6:	d9f4      	bls.n	80040d2 <_printf_i+0x112>
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d10b      	bne.n	8004104 <_printf_i+0x144>
 80040ec:	6823      	ldr	r3, [r4, #0]
 80040ee:	07df      	lsls	r7, r3, #31
 80040f0:	d508      	bpl.n	8004104 <_printf_i+0x144>
 80040f2:	6923      	ldr	r3, [r4, #16]
 80040f4:	6861      	ldr	r1, [r4, #4]
 80040f6:	4299      	cmp	r1, r3
 80040f8:	bfde      	ittt	le
 80040fa:	2330      	movle	r3, #48	@ 0x30
 80040fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004100:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004104:	1b92      	subs	r2, r2, r6
 8004106:	6122      	str	r2, [r4, #16]
 8004108:	f8cd a000 	str.w	sl, [sp]
 800410c:	464b      	mov	r3, r9
 800410e:	aa03      	add	r2, sp, #12
 8004110:	4621      	mov	r1, r4
 8004112:	4640      	mov	r0, r8
 8004114:	f7ff fee6 	bl	8003ee4 <_printf_common>
 8004118:	3001      	adds	r0, #1
 800411a:	d14a      	bne.n	80041b2 <_printf_i+0x1f2>
 800411c:	f04f 30ff 	mov.w	r0, #4294967295
 8004120:	b004      	add	sp, #16
 8004122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	f043 0320 	orr.w	r3, r3, #32
 800412c:	6023      	str	r3, [r4, #0]
 800412e:	4833      	ldr	r0, [pc, #204]	@ (80041fc <_printf_i+0x23c>)
 8004130:	2778      	movs	r7, #120	@ 0x78
 8004132:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	6831      	ldr	r1, [r6, #0]
 800413a:	061f      	lsls	r7, r3, #24
 800413c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004140:	d402      	bmi.n	8004148 <_printf_i+0x188>
 8004142:	065f      	lsls	r7, r3, #25
 8004144:	bf48      	it	mi
 8004146:	b2ad      	uxthmi	r5, r5
 8004148:	6031      	str	r1, [r6, #0]
 800414a:	07d9      	lsls	r1, r3, #31
 800414c:	bf44      	itt	mi
 800414e:	f043 0320 	orrmi.w	r3, r3, #32
 8004152:	6023      	strmi	r3, [r4, #0]
 8004154:	b11d      	cbz	r5, 800415e <_printf_i+0x19e>
 8004156:	2310      	movs	r3, #16
 8004158:	e7ac      	b.n	80040b4 <_printf_i+0xf4>
 800415a:	4827      	ldr	r0, [pc, #156]	@ (80041f8 <_printf_i+0x238>)
 800415c:	e7e9      	b.n	8004132 <_printf_i+0x172>
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	f023 0320 	bic.w	r3, r3, #32
 8004164:	6023      	str	r3, [r4, #0]
 8004166:	e7f6      	b.n	8004156 <_printf_i+0x196>
 8004168:	4616      	mov	r6, r2
 800416a:	e7bd      	b.n	80040e8 <_printf_i+0x128>
 800416c:	6833      	ldr	r3, [r6, #0]
 800416e:	6825      	ldr	r5, [r4, #0]
 8004170:	6961      	ldr	r1, [r4, #20]
 8004172:	1d18      	adds	r0, r3, #4
 8004174:	6030      	str	r0, [r6, #0]
 8004176:	062e      	lsls	r6, r5, #24
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	d501      	bpl.n	8004180 <_printf_i+0x1c0>
 800417c:	6019      	str	r1, [r3, #0]
 800417e:	e002      	b.n	8004186 <_printf_i+0x1c6>
 8004180:	0668      	lsls	r0, r5, #25
 8004182:	d5fb      	bpl.n	800417c <_printf_i+0x1bc>
 8004184:	8019      	strh	r1, [r3, #0]
 8004186:	2300      	movs	r3, #0
 8004188:	6123      	str	r3, [r4, #16]
 800418a:	4616      	mov	r6, r2
 800418c:	e7bc      	b.n	8004108 <_printf_i+0x148>
 800418e:	6833      	ldr	r3, [r6, #0]
 8004190:	1d1a      	adds	r2, r3, #4
 8004192:	6032      	str	r2, [r6, #0]
 8004194:	681e      	ldr	r6, [r3, #0]
 8004196:	6862      	ldr	r2, [r4, #4]
 8004198:	2100      	movs	r1, #0
 800419a:	4630      	mov	r0, r6
 800419c:	f7fc f840 	bl	8000220 <memchr>
 80041a0:	b108      	cbz	r0, 80041a6 <_printf_i+0x1e6>
 80041a2:	1b80      	subs	r0, r0, r6
 80041a4:	6060      	str	r0, [r4, #4]
 80041a6:	6863      	ldr	r3, [r4, #4]
 80041a8:	6123      	str	r3, [r4, #16]
 80041aa:	2300      	movs	r3, #0
 80041ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041b0:	e7aa      	b.n	8004108 <_printf_i+0x148>
 80041b2:	6923      	ldr	r3, [r4, #16]
 80041b4:	4632      	mov	r2, r6
 80041b6:	4649      	mov	r1, r9
 80041b8:	4640      	mov	r0, r8
 80041ba:	47d0      	blx	sl
 80041bc:	3001      	adds	r0, #1
 80041be:	d0ad      	beq.n	800411c <_printf_i+0x15c>
 80041c0:	6823      	ldr	r3, [r4, #0]
 80041c2:	079b      	lsls	r3, r3, #30
 80041c4:	d413      	bmi.n	80041ee <_printf_i+0x22e>
 80041c6:	68e0      	ldr	r0, [r4, #12]
 80041c8:	9b03      	ldr	r3, [sp, #12]
 80041ca:	4298      	cmp	r0, r3
 80041cc:	bfb8      	it	lt
 80041ce:	4618      	movlt	r0, r3
 80041d0:	e7a6      	b.n	8004120 <_printf_i+0x160>
 80041d2:	2301      	movs	r3, #1
 80041d4:	4632      	mov	r2, r6
 80041d6:	4649      	mov	r1, r9
 80041d8:	4640      	mov	r0, r8
 80041da:	47d0      	blx	sl
 80041dc:	3001      	adds	r0, #1
 80041de:	d09d      	beq.n	800411c <_printf_i+0x15c>
 80041e0:	3501      	adds	r5, #1
 80041e2:	68e3      	ldr	r3, [r4, #12]
 80041e4:	9903      	ldr	r1, [sp, #12]
 80041e6:	1a5b      	subs	r3, r3, r1
 80041e8:	42ab      	cmp	r3, r5
 80041ea:	dcf2      	bgt.n	80041d2 <_printf_i+0x212>
 80041ec:	e7eb      	b.n	80041c6 <_printf_i+0x206>
 80041ee:	2500      	movs	r5, #0
 80041f0:	f104 0619 	add.w	r6, r4, #25
 80041f4:	e7f5      	b.n	80041e2 <_printf_i+0x222>
 80041f6:	bf00      	nop
 80041f8:	08004351 	.word	0x08004351
 80041fc:	08004362 	.word	0x08004362

08004200 <memmove>:
 8004200:	4288      	cmp	r0, r1
 8004202:	b510      	push	{r4, lr}
 8004204:	eb01 0402 	add.w	r4, r1, r2
 8004208:	d902      	bls.n	8004210 <memmove+0x10>
 800420a:	4284      	cmp	r4, r0
 800420c:	4623      	mov	r3, r4
 800420e:	d807      	bhi.n	8004220 <memmove+0x20>
 8004210:	1e43      	subs	r3, r0, #1
 8004212:	42a1      	cmp	r1, r4
 8004214:	d008      	beq.n	8004228 <memmove+0x28>
 8004216:	f811 2b01 	ldrb.w	r2, [r1], #1
 800421a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800421e:	e7f8      	b.n	8004212 <memmove+0x12>
 8004220:	4402      	add	r2, r0
 8004222:	4601      	mov	r1, r0
 8004224:	428a      	cmp	r2, r1
 8004226:	d100      	bne.n	800422a <memmove+0x2a>
 8004228:	bd10      	pop	{r4, pc}
 800422a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800422e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004232:	e7f7      	b.n	8004224 <memmove+0x24>

08004234 <_sbrk_r>:
 8004234:	b538      	push	{r3, r4, r5, lr}
 8004236:	4d06      	ldr	r5, [pc, #24]	@ (8004250 <_sbrk_r+0x1c>)
 8004238:	2300      	movs	r3, #0
 800423a:	4604      	mov	r4, r0
 800423c:	4608      	mov	r0, r1
 800423e:	602b      	str	r3, [r5, #0]
 8004240:	f7fc fb94 	bl	800096c <_sbrk>
 8004244:	1c43      	adds	r3, r0, #1
 8004246:	d102      	bne.n	800424e <_sbrk_r+0x1a>
 8004248:	682b      	ldr	r3, [r5, #0]
 800424a:	b103      	cbz	r3, 800424e <_sbrk_r+0x1a>
 800424c:	6023      	str	r3, [r4, #0]
 800424e:	bd38      	pop	{r3, r4, r5, pc}
 8004250:	200003ac 	.word	0x200003ac

08004254 <memcpy>:
 8004254:	440a      	add	r2, r1
 8004256:	4291      	cmp	r1, r2
 8004258:	f100 33ff 	add.w	r3, r0, #4294967295
 800425c:	d100      	bne.n	8004260 <memcpy+0xc>
 800425e:	4770      	bx	lr
 8004260:	b510      	push	{r4, lr}
 8004262:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004266:	f803 4f01 	strb.w	r4, [r3, #1]!
 800426a:	4291      	cmp	r1, r2
 800426c:	d1f9      	bne.n	8004262 <memcpy+0xe>
 800426e:	bd10      	pop	{r4, pc}

08004270 <_realloc_r>:
 8004270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004274:	4680      	mov	r8, r0
 8004276:	4615      	mov	r5, r2
 8004278:	460c      	mov	r4, r1
 800427a:	b921      	cbnz	r1, 8004286 <_realloc_r+0x16>
 800427c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004280:	4611      	mov	r1, r2
 8004282:	f7ff bc4b 	b.w	8003b1c <_malloc_r>
 8004286:	b92a      	cbnz	r2, 8004294 <_realloc_r+0x24>
 8004288:	f7ff fbdc 	bl	8003a44 <_free_r>
 800428c:	2400      	movs	r4, #0
 800428e:	4620      	mov	r0, r4
 8004290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004294:	f000 f81a 	bl	80042cc <_malloc_usable_size_r>
 8004298:	4285      	cmp	r5, r0
 800429a:	4606      	mov	r6, r0
 800429c:	d802      	bhi.n	80042a4 <_realloc_r+0x34>
 800429e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80042a2:	d8f4      	bhi.n	800428e <_realloc_r+0x1e>
 80042a4:	4629      	mov	r1, r5
 80042a6:	4640      	mov	r0, r8
 80042a8:	f7ff fc38 	bl	8003b1c <_malloc_r>
 80042ac:	4607      	mov	r7, r0
 80042ae:	2800      	cmp	r0, #0
 80042b0:	d0ec      	beq.n	800428c <_realloc_r+0x1c>
 80042b2:	42b5      	cmp	r5, r6
 80042b4:	462a      	mov	r2, r5
 80042b6:	4621      	mov	r1, r4
 80042b8:	bf28      	it	cs
 80042ba:	4632      	movcs	r2, r6
 80042bc:	f7ff ffca 	bl	8004254 <memcpy>
 80042c0:	4621      	mov	r1, r4
 80042c2:	4640      	mov	r0, r8
 80042c4:	f7ff fbbe 	bl	8003a44 <_free_r>
 80042c8:	463c      	mov	r4, r7
 80042ca:	e7e0      	b.n	800428e <_realloc_r+0x1e>

080042cc <_malloc_usable_size_r>:
 80042cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042d0:	1f18      	subs	r0, r3, #4
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	bfbc      	itt	lt
 80042d6:	580b      	ldrlt	r3, [r1, r0]
 80042d8:	18c0      	addlt	r0, r0, r3
 80042da:	4770      	bx	lr

080042dc <_init>:
 80042dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042de:	bf00      	nop
 80042e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042e2:	bc08      	pop	{r3}
 80042e4:	469e      	mov	lr, r3
 80042e6:	4770      	bx	lr

080042e8 <_fini>:
 80042e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ea:	bf00      	nop
 80042ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ee:	bc08      	pop	{r3}
 80042f0:	469e      	mov	lr, r3
 80042f2:	4770      	bx	lr
